var sketchProc = function(processingInstance) {
     with (processingInstance) {
        size(600, 600); 
if(localStorage.getItem("inv_Save")===null){
	localStorage.setItem("inv_Save","");
}
if(localStorage.getItem("tlb_Save")===null){
	localStorage.setItem("tlb_Save","");
}
if(localStorage.getItem("ts_Save")===null){
	localStorage.setItem("ts_Save","");
}
if(localStorage.getItem("xy_Save")===null){
	localStorage.setItem("xy_Save","");
}
if(localStorage.getItem("world_Save")===null){
	localStorage.setItem("world_Save","");
}
var difficulty=5;//0-10
//{
var sheaths=[
        {
            name:"midas touch",
            types:[0,1,2,3],
            effect:function(t){
                t.midas=true;
            }
        },
        {
            name:"efficiency I",
            types:[0,1,2,3,4],
            effect:function(t){
                //t.mining=t.remining;
                t.mining*=1.5;
            }
        },
        {
            name:"efficiency II",
            types:[0,1,2,3,4],
            effect:function(t){
                //t.mining=t.remining;
                t.mining*=2;
            }
        },
        {
            name:"durability I",
            types:[0,1,2],
            effect:function(t){
                
                t.durability*=1.5;
                t.redurability=t.durability;
            }
        },
        {
            name:"durability II",
            types:[0],
            effect:function(t){
                //t.durability=t.redurability;
                t.durability*=2;
                t.redurability=t.durability;
            }
        },
        {
            name:"durability III",
            types:[0],
            effect:function(t){
                //t.durability=t.redurability;
                t.durability*=2;
                t.redurability=t.durability;
            }
        },
        {
            name:"fire I",
            types:[0],
            effect:function(t){
                t.fire=1;
            }
        },
        {
            name:"fire II",
            types:[0],
            effect:function(t){
                t.fire=5;
            }
        },
        {
            name:"damage I",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=1.5;
            }
        },
        {
            name:"damage II",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=2;
            }
        },
        {
            name:"damage III",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=3;
            }
        },
        {
            name:"damage IV",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=4;
            }
        },
        {
            name:"damage V",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=5;
            }
        },
        {
            name:"damage VI",
            types:[0],
            effect:function(t){
                //t.damage=t.redamage;
                t.damage*=10;
            }
        },
    ];
    //}//Important stuff
//{
    Array.prototype.equals=function(array){
        if(this.length!==array.length){
            return false;
        }
        for(var i=0;i<this.length;i++){
            if(this[i]!==array[i]){
                return false;
            }
        }
        return true;
    };var stringArray=function(input){
    var out=[];
    var i=1;
    var inSeg=-1;
    var layer=0;
    while(i<input.length-1){
        var g=false;
        if(inSeg===-1){
            var q=i;
            var f="";
            
            if(input[i]==="["){
                var n=0;
                    while(q<input.length){
                        if(input[q]==="["){
                            n++;
                        }
                        else if(input[q]==="]"){
                            n--;
                        }
                        q++;
                        if(n===0){
                            break;
                        }
                    }
                }
            else if(input[i]==="{"){
                var n=0;
                    while(q<input.length){
                        if(input[q]==="{"){
                            n++;
                        }
                        else if(input[q]==="}"){
                            n--;
                        }
                        q++;
                        if(n===0){
                            break;
                        }
                    }
                }
                else{
            while(input[q]!==","&&q<input.length&&input[q]!=="]"){
                
                q++;
            }
                }
            for(var j=i;j<q;j++){
                f+=input[j];
            }
            out.push(f);
            i=q;
        
        }
        if(g===false){
        i++;
        }
    }
    return out;
};
    var roundTo=function(num,digit){
    if(digit===0){
        return num;
    }
    else{
        var n1=num*pow(10,digit);
        var n2;
        if(n1>=floor(n1)+0.5){
            n2=ceil(n1);
        }
        else{
            n2=floor(n1);
        }
        var n=n2/pow(10,digit);
        if((n-floor(n)).toString().length>digit){
            //println(0);
           return n;
        }
        //println(pow(10,-digit));
        return n;
    }
};
    var contract=function(number){
        if(number>=0){
        return number<1000?number:number<1000000?roundTo(number/1000,1)+"K":number<1000000000?roundTo(number/1000000,1)+"M":roundTo(number/1000000000,1)+"B";
        }
        else{
            return -number<1000?number:-number<1000000?roundTo(number/1000,1)+"K":-number<1000000000?roundTo(number/1000000,1)+"M":roundTo(number/1000000000,1)+"B";
        }
        
    };
    String.prototype.toTitleCase=function(){
        var f=this.split(" ");
        for(var i=0;i<f.length;i++){
        f[i]=f[i][0].toUpperCase()+f[i].split("").splice(1,f[i].length-1).join("");
        }
    return f.join(" ");
};
var parse=function(p){
    if(parseFloat(p)){
        return parseFloat(p);
    }
    else if(p==="true"){
        return true;
    }
    else if(p==="false"){
        return false;
    }
    else if(p[0]==="["&&(p[p.length-1]==="]"||p[p.length-2]==="]")){
        return stringArray(p);
    }
    else{
        return p.toString();
    }
};
var stringObject=function(input){
    var out={};
    var i=1;
    var labeling=true;
    var label="";
        var value="";
    while(i!=="}"){
        var q=i;
        
        if(labeling){
        while(input[q]!==":"){
            label+=input[q];
            q++;
        }
        if(input[q]===":"){
            labeling=false;
        }
        }
        else{
            while(input[q]!==","&&input[q]!=="}"){
                if(input[q]==="["){
                    while(input[q]!=="]"){
                        value+=input[q];
            q++;
                    }
                }
                else{
            value+=input[q];
            q++;
                }
        }
        out[label]=parse(value);
        label="";
        value="";
        if(input[q]===","){
            labeling=true;
        }
        else if(input[q]==="}"){
            break;
        }
        }
        
        i=q;
        i++;
        
    }
    return out;
};
    String.prototype.deQuote=function(){
    var car=this;
    if((this[0]==="\""&&this[this.length-1]==="\"")||(this[0]==="\'"&&this[this.length-1]==="\'")){
        car=[];
        for(var i=1;i<this.length-1;i++){
            car.push(this[i]);
        }
        car=car.join("");
    }
    return car;
};
    var encryptData=function(input){
    var car="";
    var alphanumeric="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+={}[]|:;'<,>.? /-ΑΒΓΔΕΖΗΘΙͿΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ`";
    alphanumeric["."]="\\";
    var key=round(random(0,alphanumeric.length-10));
    //var convert=function(inp){
        if(typeof input=== typeof 0){
            input=input.toString();
            car="\"";
            //println(floor(input/36));
            for(var i=0;i<input.length;i++){
                    car+=alphanumeric[alphanumeric.length-key-1-input[i]];
                }
            car+="~n~"+key+"\"";
        }
        else if(typeof input===typeof "a"){
            car="\"";
            key=round(random(0,alphanumeric.length-27));
            for(var i=0;i<input.length;i++){
                    for(var j=0;j<alphanumeric.length-1;j++){
            if(alphanumeric[j]===input[i]){
                    car+=j+key+"`";
            }
                }
                }
                car=car.split("");
                car.splice(car.length-1,1);
                car=car.join("");
                car+="~s~"+key+"\"";
        }
        else if(typeof input===typeof true){
            car='"'+alphanumeric[alphanumeric.length-key-1-input]+"~b~"+key+'"';
        }
        else if(input instanceof Array){
            car+="[";
            for(var i=0;i<input.length;i++){
                car+=encryptData(input[i])+",";
            }
            car+="]";
        }
        else if(typeof input===typeof function(){}){
            car="\"";
                car+=encryptData(input.toString()+";").deQuote();
            car+="\"";
        }
        else if(typeof input===typeof {}){
            car+="{";
            for(var i in input){
                car+=encryptData(i)+":"+encryptData(input[i])+",";
            }
            car+="}";
        }
        //return inp;
    //};'
    //println(typeof input);
    //input=carry;
    return car;
};
    var decryptData=function(input){
    var alphanumeric="`ΩΨΧΦΥΤΣΠΡΟΞΝΜΛΚͿΙΘΗΖΕΔΓΒΑ-/ ?.>,<';:|][}{=+_)(*&^%$#@!ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba9876543210";
    var z;
    var car="";
    if(input instanceof Array){
        car="[";
        for(var i=0;i<input.length;i++){
            car+=decryptData(input[i])+",";
        }
        car+="]";
    }
    else if(typeof input===typeof {}){
            car+="{";
            for(var i in input){
                car+=decryptData(i)+":"+decryptData(input[i])+",";
            }
            car+="}";
        }
    else{
        z=input.split("~");
        if(z[1]==="n"){
    input=z[0];
    for(var i=0;i<input.length;i++){
        if(input[i]+input[i+1]+input[i+2]+input[i+3]+input[i+4]+input[i+5]+input[i+6]+input[i+7]+input[i+8]+""==="undefined"){
            i+=8;
            car+=".";
            continue;
        }
        for(var j=0;j<alphanumeric.length;j++){
            if(alphanumeric[j]===input[i]){
                    car+=j-z[2];
            }
                }
    }
    car=parseFloat(car);
    }
        else if(z[1]==="b"){
        input=z[0];
        for(var j=0;j<alphanumeric.length;j++){
            if(alphanumeric[j]===input){
                    car=j-z[2];
            }
                }
        car=car===1?true:false;
    }
        else if(z[1]==="s"){
        input=z[0];
        var cars=z[0].split("`");
        for(var i=0;i<cars.length;i++){
            car+=alphanumeric[alphanumeric.length-(cars[i]-z[2]+1)];
        }
    }
    }
    
    
    //println(typeof car-0);
    return car;
    
};
    var start=function(){
    this[["KAInfiniteLoopCount"]]=-Infinity;
};
    var neg=function(col){
    return blendColor(color(255,255,255),col,SUBTRACT);
};
    var chooseRandom=function(array){
    return array[floor(random(0,array.length))];
};
    Array.prototype.calcTotal=function(property,property2){
    var g=0;
    if(property2){
        for(var i=0;i<this.length;i++){
            if(this[i]&&this[i][property]){
            g+=this[i][property][property2];
            }
        }
    }
    else if(property){
        for(var i=0;i<this.length;i++){
            if(this[i]){
            g+=this[i][property];
            }
        }
        
    }
    else{
        for(var i=0;i<this.length;i++){
            if(this[i]){
            g+=this[i];
            }
        }
    }
    return g;
};
    Array.prototype.append=function(array){
        if(array instanceof Array){
            for(var i=0;i<array.length;i++){
            this.push(array[i]);
            }
            return this;
        }
        else{
            this.push(array);
            return this;
        }
    };
    start();
//}//Utilities
//Paste your save file below, replacing all five variables
//Copy this entire code and paste at the top of the code
//println(localStorage.setItem("inv_Save",""));
//println(stringArray(localStorage.getItem("ts_Save")));
var inv_Save=(localStorage.getItem("inv_Save").length>0?stringArray(localStorage.getItem("inv_Save")):[]);
for(var i=0;i<inv_Save.length;i++){
	var v=stringArray(inv_Save[i]);
	//println(v+":"+inv_Save[i]+" "+(typeof v));
	inv_Save[i]=[parseFloat(v[0]),parseFloat(v[1])];
}
var tlb_Save=(localStorage.getItem("tlb_Save").length>0?stringArray(localStorage.getItem("tlb_Save")):[]);
for(var i=0;i<tlb_Save.length;i++){
	var v=stringArray(tlb_Save[i]);
	//println(v+":"+inv_Save[i]+" "+(typeof v));
	tlb_Save[i]=[parseFloat(v[0]),parseFloat(v[1])];
}
var ts_Save=(localStorage.getItem("ts_Save").length>0?stringArray(localStorage.getItem("ts_Save")):[]);
for(var i=0;i<ts_Save.length;i++){
		ts_Save[i]=stringObject(ts_Save[i]);
		//println(ts_Save[i][j]);
}
var xy_Save=(localStorage.getItem("xy_Save").length>0?stringArray(localStorage.getItem("xy_Save")):[]);
for(var i=0;i<xy_Save.length;i++){
	xy_Save[i]=parseFloat(xy_Save[i]);
}
var world_Save=(localStorage.getItem("world_Save").length>0?stringArray(localStorage.getItem("world_Save")):[]);
for(var i=0;i<world_Save.length;i++){
	println(world_Save[i]);
	world_Save[i]=stringArray(world_Save[i]);
	for(var j=0;j<world_Save[i].length;j++){
		world_Save[i][j]=parse(world_Save[i][j]);
		if(world_Save[i][j] instanceof Array){
			world_Save[i][j][0]=parse(world_Save[i][j][0]);
			world_Save[i][j][1]=stringArray(world_Save[i][j][1]);
			for(var k=0;k<world_Save[i][j][1].length;k++){
				world_Save[i][j][1][k]=stringArray(world_Save[i][j][1][k]);
				for(var l=0;l<world_Save[i][j][1][k].length;l++){
					world_Save[i][j][1][k][l]=stringArray(world_Save[i][j][1][k][l]);
					world_Save[i][j][1][k][l]=[parse(world_Save[i][j][1][k][l][0]),parse(world_Save[i][j][1][k][l][1])];
				}
			}
		}
	}
}
//{
var scene="load";

var keys=[];
var level=0;
var blockNum=0;
var selected=0;
var selType=0;
var graphics=[];
var vehicles=[];
frameRate(30);
var keyIsPressed=false;
var negative=false;//negative colors
smooth();
var toolGs=[get(0,0,600,600)];
var art=[
    [
        [29,30,29,30,30,28,29,30,29,28,30,30,30,29,28],[28,30,31,30,31,31,30,29,30,30,30,30,29,31,30],[29,31,29,30,31,30,31,30,31,31,29,31,29,30,28],[28,31,30,30,30,30,29,30,29,30,31,30,30,29,29],[30,30,31,31,29,30,30,31,31,29,30,29,30,31,28],[29,29,29,30,30,31,30,29,30,29,30,30,29,31,30],[28,30,31,29,31,30,30,29,30,31,31,31,29,31,28],[30,30,31,31,31,30,31,31,29,29,29,31,29,30,28],[30,30,31,31,30,29,30,31,31,29,29,30,30,30,30],[30,30,31,30,31,29,30,31,30,29,30,30,29,31,30],[30,30,30,31,30,31,30,30,30,30,31,30,31,30,28],[30,29,30,30,30,29,30,31,30,31,31,30,30,31,29],[28,30,30,29,31,31,31,29,29,31,30,29,31,30,30],[29,31,31,30,30,30,29,31,31,30,30,29,31,29,28],[30,30,30,28,30,28,29,28,30,28,29,29,30,28,29],
        ],
    [
        [30,30,30,30,29,30,30,30,30,30,30,30,30,30,29],[30,29,29,29,29,29,29,29,30,29,30,30,29,29,29],[29,30,29,30,30,30,30,30,30,30,29,29,30,29,29],[30,29,30,31,31,31,31,31,31,31,31,31,30,29,29],[30,29,30,31,41,41,31,41,41,31,41,31,30,30,30],[30,29,29,31,31,31,31,31,31,31,31,41,30,29,30],[30,30,29,31,41,31,30,30,30,41,31,41,30,30,29],[30,30,29,31,31,31,30,30,30,31,31,41,30,30,30],[29,29,30,41,31,31,30,30,30,41,31,41,30,29,30],[29,30,30,41,31,31,31,31,31,31,41,31,29,29,30],[30,30,30,31,41,41,41,41,31,31,31,31,30,29,29],[30,29,30,31,31,31,41,31,41,41,41,31,30,29,30],[30,30,30,30,29,29,30,30,30,30,30,30,29,29,30],[29,30,30,29,29,29,29,29,30,30,29,29,30,30,30],[30,30,30,30,30,30,30,29,30,30,30,30,30,29,29],
        ],
    [
        [12,12,13,12,12,12,13,12,13,12,12,13,27,27,12],[13,15,13,27,15,15,12,15,27,15,27,12,12,13,13],[27,15,12,27,27,12,13,13,13,15,15,12,13,15,13],[27,13,15,27,27,12,27,13,14,15,15,12,27,15,12],[12,13,13,15,12,13,12,27,27,27,13,12,13,27,13],[13,13,13,27,15,15,15,15,13,15,15,15,15,27,13],[12,27,27,13,13,13,13,15,13,12,27,12,13,27,12],[12,27,15,12,13,15,15,15,15,12,12,13,27,27,27],[15,12,13,15,14,27,12,27,12,15,15,13,27,15,13],[13,15,13,12,27,13,15,12,12,12,27,13,27,12,12],[12,12,12,27,12,13,15,13,27,12,15,15,15,15,12],[12,14,27,15,13,13,13,12,27,13,12,12,13,15,13],[12,14,27,15,12,12,15,27,27,27,12,13,12,13,12],[12,13,27,13,12,12,27,12,12,27,27,12,13,15,15],[12,12,12,13,12,12,13,13,13,12,12,12,13,13,12],
        ],
    [
        [26,51,46,26,26,26,26,51,51,51,26,26,26,26,26],[51,46,51,46,51,46,46,46,46,51,51,46,46,26,51],[51,46,26,26,51,51,26,26,26,26,26,51,46,26,51],[26,26,46,46,51,46,51,46,26,46,46,51,46,26,51],[51,26,26,26,26,46,26,46,51,51,51,51,26,46,51],[51,51,46,51,51,51,51,26,51,46,26,26,26,46,51],[51,26,26,51,46,46,26,46,51,26,51,26,26,26,51],[46,46,26,26,46,26,26,51,46,26,51,51,26,46,51],[26,26,51,46,46,51,51,26,26,46,46,51,46,26,46],[46,26,26,51,46,51,46,26,26,51,51,51,46,26,46],[26,26,26,51,51,51,46,26,51,46,46,51,51,26,46],[26,26,51,26,26,51,51,51,51,46,46,26,51,51,51],[51,51,46,26,46,26,46,26,26,46,26,26,26,51,26],[46,26,51,26,51,26,51,26,51,51,51,51,51,46,26],[46,46,26,46,46,46,26,26,26,26,26,26,26,26,26],
        ],
    [
        [47,48,47,47,47,50,49,49,50,49,49,48,47,47,48],[47,49,49,51,51,51,51,50,49,47,49,49,49,51,49],[49,50,50,49,51,48,50,50,51,50,50,49,51,51,51],[47,48,48,50,50,48,48,51,51,49,47,51,50,50,49],[48,48,47,49,51,51,51,48,50,50,51,51,47,47,50],[50,51,49,51,47,51,47,47,50,50,49,50,50,47,47],[50,51,51,51,51,50,49,50,47,49,48,50,51,50,47],[50,47,51,51,49,50,49,47,49,48,50,47,51,51,49],[48,49,47,49,51,50,51,51,51,50,51,50,49,51,49],[47,50,47,47,51,50,48,51,47,49,48,51,47,50,51],[47,50,47,51,50,50,49,51,50,49,50,51,51,51,51],[47,51,51,50,51,51,47,48,51,49,49,50,51,50,49],[47,50,48,47,48,49,50,47,51,49,51,50,48,51,51],[47,49,49,49,49,47,49,47,47,51,49,48,50,47,51],[47,47,47,49,49,47,47,51,48,47,50,50,47,47,49],
        ],
    [
        [45,45,45,46,45,46,44,43,43,42,42,44,42,42,44],[45,42,46,46,46,44,44,46,46,46,42,46,42,46,42],[42,46,46,46,42,44,45,46,46,46,42,43,45,45,45],[44,42,46,43,46,46,44,46,42,42,45,45,46,45,45],[46,46,46,46,46,46,44,44,46,46,44,45,45,44,46],[46,46,42,42,42,46,44,44,46,46,43,46,46,45,45],[45,46,45,44,46,44,44,46,46,46,44,46,46,46,45],[45,42,42,42,46,46,46,46,45,42,46,44,44,46,46],[46,46,42,42,45,45,44,46,45,45,44,43,45,46,46],[45,42,46,46,46,46,46,45,43,42,46,45,44,44,43],[44,45,45,46,45,45,46,44,44,45,45,44,46,44,46],[46,44,42,46,44,42,46,45,45,42,43,46,44,44,46],[45,46,46,46,46,46,44,44,45,44,42,44,46,43,46],[44,42,42,46,44,43,44,45,45,46,45,46,42,42,46],[45,42,42,46,44,44,46,42,45,46,46,44,46,46,45],
        ],
    [
        [2,3,2,5,2,3,2,2,2,2,2,5,3,2,3],[2,2,4,2,5,6,2,4,6,4,3,2,5,4,3],[5,5,4,2,4,5,5,5,2,3,6,6,5,2,2],[2,4,4,5,5,3,2,4,2,2,3,6,5,5,4],[3,4,2,6,4,2,4,3,3,4,3,3,2,3,4],[2,2,4,4,6,6,4,4,2,4,4,4,4,3,5],[4,4,4,5,4,6,6,5,5,3,5,6,5,5,5],[2,4,2,4,5,2,4,3,2,3,6,6,5,4,3],[4,2,2,2,5,5,3,3,2,4,6,5,4,4,2],[5,5,2,2,2,2,4,4,4,6,3,5,4,4,3],[2,3,5,5,5,6,2,2,6,6,2,5,4,2,2],[2,2,3,4,6,6,5,2,2,4,5,2,5,4,3],[2,3,6,6,3,2,3,3,2,5,2,3,5,4,3],[6,6,4,5,4,3,4,4,5,4,4,5,4,4,3],[2,2,5,2,2,5,2,5,2,2,2,5,2,4,2],
        ],
    [
        [8,9,9,10,7,10,10,10,9,9,9,8,9,10,10],[9,8,8,7,10,11,11,9,8,11,10,8,11,8,10],[11,11,11,11,11,9,9,9,10,10,10,11,11,11,7],[7,11,11,11,8,9,9,10,10,9,10,11,10,8,8],[10,10,10,11,11,8,10,10,11,10,8,11,9,10,9],[11,11,11,8,11,11,11,11,9,11,8,11,11,9,11],[8,11,10,8,8,10,9,7,8,8,10,10,8,10,11],[7,7,11,10,11,7,8,9,8,10,11,8,11,7,11],[11,10,11,10,11,11,11,8,9,11,8,9,10,11,10],[7,9,9,9,10,10,11,11,7,11,10,11,10,10,11],[10,9,9,11,10,10,8,9,8,10,10,11,11,8,9],[8,11,11,9,8,10,8,10,10,10,10,10,11,8,9],[11,7,10,10,10,11,10,7,10,10,10,8,11,9,8],[8,11,9,10,10,10,10,9,10,10,7,11,11,8,7],[10,10,11,7,8,8,10,11,10,9,8,9,11,10,8],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,0,0,0,0,0,0,0,0,0],[0,0,30,30,30,0,0,0,0,0,0,0,0,0,0],[0,30,30,30,0,0,0,0,0,0,0,0,0,0,0],[30,30,30,0,0,0,0,0,0,0,0,0,0,0,0],[30,30,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,6,6,6,6,0,0,0,0,0,0,0],[0,0,0,0,6,6,6,6,6,0,0,0,0,0,0],[0,0,0,6,6,6,6,6,6,6,6,6,0,0,0],[0,0,6,6,6,6,6,6,6,6,6,6,6,0,0],[0,0,6,6,6,6,6,6,6,6,6,6,6,6,0],[0,0,6,6,6,6,6,6,6,6,6,6,6,0,0],[6,6,6,6,6,6,6,6,6,6,6,6,0,0,0],[0,6,6,6,6,6,6,6,6,6,6,6,0,0,0],[0,0,0,6,6,6,6,6,6,6,6,0,0,0,0],[0,0,0,0,6,6,6,6,6,6,6,0,0,0,0],[0,0,0,0,6,6,6,6,6,6,6,0,0,0,0],[0,0,0,0,0,6,6,6,6,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        
[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,5,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,5,6,6,6,6,6,6,6,6,6,6,6,41],[41,6,5,5,5,6,6,6,6,6,6,6,6,6,41],[41,6,6,6,6,6,6,6,6,6,6,6,6,6,41],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41],
        ],
    [
        [0,0,0,0,0,0,0,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,3,4,3,3,3,3,3,3,3,3],[0,0,0,0,3,4,4,3,3,3,3,3,3,3,3],[0,0,0,3,4,4,4,3,3,3,3,3,3,3,3],[0,0,3,4,4,4,4,3,3,3,3,3,3,3,3],[0,3,4,4,4,4,4,3,3,3,3,3,3,3,3],[3,4,4,4,4,4,4,3,3,3,3,3,3,3,3],[3,4,4,4,4,4,3,4,4,4,4,4,4,3,0],[3,4,4,4,4,3,4,4,4,4,4,4,3,0,0],[3,4,4,4,3,4,4,4,4,4,4,3,0,0,0],[3,4,4,3,4,4,4,4,4,4,3,0,0,0,0],[3,4,3,4,4,4,4,4,4,3,0,0,0,0,0],[3,3,4,4,4,4,4,4,3,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,0,0,0,0,0,0,0],
        ],
    [
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,4,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,4,3,3,3,3,3,3,3,3,3,3,3,2],[2,3,4,4,4,3,3,3,3,3,3,3,3,3,2],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
        ],
    [
        [0,0,0,0,0,0,0,13,13,13,13,13,13,13,13],[0,0,0,0,0,0,13,13,13,13,13,13,13,13,13],[0,0,0,0,0,13,14,13,13,13,13,13,13,13,13],[0,0,0,0,13,14,14,13,13,13,13,13,13,13,13],[0,0,0,13,14,14,14,13,13,13,13,13,13,13,13],[0,0,13,14,14,14,14,13,13,13,13,13,13,13,13],[0,13,14,14,14,14,14,13,13,13,13,13,13,13,13],[13,14,14,14,14,14,14,13,13,13,13,13,13,13,13],[13,14,14,14,14,14,13,14,14,14,14,14,14,13,0],[13,14,14,14,14,13,14,14,14,14,14,14,13,0,0],[13,14,14,14,13,14,14,14,14,14,14,13,0,0,0],[13,14,14,13,14,14,14,14,14,14,13,0,0,0,0],[13,14,13,14,14,14,14,14,14,13,0,0,0,0,0],[13,13,14,14,14,14,14,14,13,0,0,0,0,0,0],[13,13,13,13,13,13,13,13,0,0,0,0,0,0,0],

        ],
    [
        [12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,14,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,14,13,13,13,13,13,13,13,13,13,13,13,12],[12,13,14,14,14,13,13,13,13,13,13,13,13,13,12],[12,13,13,13,13,13,13,13,13,13,13,13,13,13,12],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],

        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,18,0,0,0,0,0,0,0,0,0],[0,0,0,0,18,19,17,17,0,0,0,0,0,0,0],[0,0,0,18,19,20,18,18,17,0,0,0,0,0,0],[0,0,18,19,20,21,19,19,18,17,17,0,0,0,0],[0,0,18,19,20,21,20,20,19,18,18,17,0,0,0],[0,0,18,19,20,21,19,19,18,17,17,0,0,0,0],[0,0,0,18,19,20,18,18,17,0,0,0,0,0,0],[0,0,0,0,18,19,17,17,0,0,0,0,0,0,0],[0,0,0,0,0,18,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [17,17,17,17,17,17,17,17,17,17,17,17,17,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,0,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,0,18,18,18,18,18,18,18,18,18,18,18,17],[17,18,0,0,0,18,18,18,18,18,18,18,18,18,17],[17,18,18,18,18,18,18,18,18,18,18,18,18,18,17],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],
        ],
    [
        [0,0,0,0,0,0,0,37,37,37,37,37,37,37,37],[0,0,0,0,0,0,37,37,37,37,37,37,37,37,37],[0,0,0,0,0,37,38,37,37,37,37,37,37,37,37],[0,0,0,0,37,38,38,37,37,37,37,37,37,37,37],[0,0,0,37,38,38,38,37,37,37,37,37,37,37,37],[0,0,37,38,38,38,38,37,37,37,37,37,37,37,37],[0,37,38,38,38,38,38,37,37,37,37,37,37,37,37],[37,38,38,38,38,38,38,37,37,37,37,37,37,37,37],[37,38,38,38,38,38,37,38,38,38,38,38,38,37,0],[37,38,38,38,38,37,38,38,38,38,38,38,37,0,0],[37,38,38,38,37,38,38,38,38,38,38,37,0,0,0],[37,38,38,37,38,38,38,38,38,38,37,0,0,0,0],[37,38,37,38,38,38,38,38,38,37,0,0,0,0,0],[37,37,38,38,38,38,38,38,37,0,0,0,0,0,0],[37,37,37,37,37,37,37,37,0,0,0,0,0,0,0],
        ],
    [
        [37,37,37,37,37,37,37,37,37,37,37,37,37,37,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,39,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,39,38,38,38,38,38,38,38,38,38,38,38,37],[37,38,39,39,39,38,38,38,38,38,38,38,38,38,37],[37,38,38,38,38,38,38,38,38,38,38,38,38,38,37],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37],
        ],
    [
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,1,2,1,1,1,1,1,1,1,1],[0,0,0,0,1,2,2,1,1,1,1,1,1,1,1],[0,0,0,1,2,2,2,1,1,1,1,1,1,1,1],[0,0,1,2,2,2,2,1,1,1,1,1,1,1,1],[0,1,2,2,2,2,2,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,1,2,2,2,2,2,2,1,0],[1,2,2,2,2,1,2,2,2,2,2,2,1,0,0],[1,2,2,2,1,2,2,2,2,2,2,1,0,0,0],[1,2,2,1,2,2,2,2,2,2,1,0,0,0,0],[1,2,1,2,2,2,2,2,2,1,0,0,0,0,0],[1,1,2,2,2,2,2,2,1,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
        ],
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,3,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,3,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,2,2,2,2,2,2,2,2,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,33,0,0,0,0,0,0,0,0,0],[0,0,0,0,34,33,32,0,0,0,0,0,0,0,0],[0,0,0,35,34,33,32,32,0,0,0,0,0,0,0],[0,0,36,35,34,33,32,32,32,0,0,0,0,0,0],[0,0,36,35,34,33,32,32,32,32,0,0,0,0,0],[0,0,36,35,34,33,32,32,32,32,32,0,0,0,0],[0,0,36,35,34,33,32,32,32,32,0,0,0,0,0],[0,0,36,35,34,33,32,32,32,0,0,0,0,0,0],[0,0,0,35,34,33,32,32,0,0,0,0,0,0,0],[0,0,0,0,34,33,32,0,0,0,0,0,0,0,0],[0,0,0,0,0,33,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,0,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,0,33,33,33,33,33,33,33,33,33,33,33,32],[32,33,0,0,0,33,33,33,33,33,33,33,33,33,32],[32,33,33,33,33,33,33,33,33,33,33,33,33,33,32],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],
        ],
    [
        [29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[0,30,29,0,0,0,30,29,0,0,0,30,29,0,0],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,47,50,0,0,0],[0,0,0,0,0,0,0,0,49,49,47,50,47,0,0],[0,0,0,0,0,49,47,47,47,49,49,47,47,0,0],[0,0,0,0,0,0,0,0,47,50,50,49,49,0,0],[0,0,0,0,0,0,0,0,0,0,49,49,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,42,45,0,0,0],[0,0,0,0,0,0,0,0,44,44,42,45,42,0,0],[0,0,0,0,0,44,42,42,42,44,44,42,42,0,0],[0,0,0,0,0,0,0,0,42,45,45,44,44,0,0],[0,0,0,0,0,0,0,0,0,0,44,44,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,9,11,0,0,0],[0,0,0,0,0,0,0,0,10,10,9,11,9,0,0],[0,0,0,0,0,10,9,9,9,10,10,9,9,0,0],[0,0,0,0,0,0,0,0,9,11,11,10,10,0,0],[0,0,0,0,0,0,0,0,0,0,10,10,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ],
    [
        [3,3,3,3,3,3,3,3,3,2,2,3,3,3,3],[3,2,2,3,3,3,3,3,3,2,2,3,3,3,3],[3,2,2,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,2,2],[3,3,3,3,3,3,3,3,3,2,2,3,3,2,2],[2,2,3,3,3,2,2,3,3,2,2,3,3,3,3],[2,2,3,3,3,2,2,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3,2,2],[3,3,3,3,3,3,2,2,3,3,3,2,2,3,3],[3,3,3,2,2,3,2,2,3,3,3,2,2,3,3],[3,3,3,2,2,3,3,3,3,3,3,3,3,3,3],[2,2,3,3,3,3,3,3,3,3,3,2,2,3,3],[2,2,3,3,3,3,2,2,3,3,3,2,2,3,3],[3,3,3,3,3,3,2,2,3,3,3,3,3,3,3],
        ],
    [
        [3,3,3,3,3,3,3,3,3,12,12,3,3,3,3],[3,12,12,3,3,3,3,3,3,12,12,3,3,3,3],[3,12,12,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,12,12],[3,3,3,3,3,3,3,3,3,12,12,3,3,12,12],[12,12,3,3,3,12,12,3,3,12,12,3,3,3,3],[12,12,3,3,3,12,12,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,12,12],[3,3,3,3,3,3,3,3,3,3,3,3,3,12,12],[3,3,3,3,3,3,12,12,3,3,3,12,12,3,3],[3,3,3,12,12,3,12,12,3,3,3,12,12,3,3],[3,3,3,12,12,3,3,3,3,3,3,3,3,3,3],[12,12,3,3,3,3,3,3,3,3,3,12,12,3,3],[12,12,3,3,3,3,12,12,3,3,3,12,12,3,3],[3,3,3,3,3,3,12,12,3,3,3,3,3,3,3],
        ],
    [
        [3,3,3,3,3,3,3,3,3,17,17,3,3,3,3],[3,17,17,3,3,3,3,3,3,17,17,3,3,3,3],[3,17,17,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,17,17],[3,3,3,3,3,3,3,3,3,17,17,3,3,17,17],[17,17,3,3,3,17,17,3,3,17,17,3,3,3,3],[17,17,3,3,3,17,17,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,17,17],[3,3,3,3,3,3,3,3,3,3,3,3,3,17,17],[3,3,3,3,3,3,17,17,3,3,3,17,17,3,3],[3,3,3,17,17,3,17,17,3,3,3,17,17,3,3],[3,3,3,17,17,3,3,3,3,3,3,3,3,3,3],[17,17,3,3,3,3,3,3,3,3,3,17,17,3,3],[17,17,3,3,3,3,17,17,3,3,3,17,17,3,3],[3,3,3,3,3,3,17,17,3,3,3,3,3,3,3],
        ],
    [
        [3,3,3,3,3,3,3,3,3,37,37,3,3,3,3],[3,37,37,3,3,3,3,3,3,37,37,3,3,3,3],[3,37,37,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,37,37],[3,3,3,3,3,3,3,3,3,37,37,3,3,37,37],[37,37,3,3,3,37,37,3,3,37,37,3,3,3,3],[37,37,3,3,3,37,37,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,37,37],[3,3,3,3,3,3,3,3,3,3,3,3,3,37,37],[3,3,3,3,3,3,37,37,3,3,3,37,37,3,3],[3,3,3,37,37,3,37,37,3,3,3,37,37,3,3],[3,3,3,37,37,3,3,3,3,3,3,3,3,3,3],[37,37,3,3,3,3,3,3,3,3,3,37,37,3,3],[37,37,3,3,3,3,37,37,3,3,3,37,37,3,3],[3,3,3,3,3,3,37,37,3,3,3,3,3,3,3],
        ],
    [
        [3,3,3,3,3,3,3,3,3,1,1,3,3,3,3],[3,1,1,3,3,3,3,3,3,1,1,3,3,3,3],[3,1,1,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,1,1],[3,3,3,3,3,3,3,3,3,1,1,3,3,1,1],[1,1,3,3,3,1,1,3,3,1,1,3,3,3,3],[1,1,3,3,3,1,1,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,1,1],[3,3,3,3,3,3,3,3,3,3,3,3,3,1,1],[3,3,3,3,3,3,1,1,3,3,3,1,1,3,3],[3,3,3,1,1,3,1,1,3,3,3,1,1,3,3],[3,3,3,1,1,3,3,3,3,3,3,3,3,3,3],[1,1,3,3,3,3,3,3,3,3,3,1,1,3,3],[1,1,3,3,3,3,1,1,3,3,3,1,1,3,3],[3,3,3,3,3,3,1,1,3,3,3,3,3,3,3],

        ],
    [
        [3,3,3,3,3,3,3,3,3,32,32,3,3,3,3],[3,32,32,3,3,3,3,3,3,32,32,3,3,3,3],[3,32,32,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,32,32],[3,3,3,3,3,3,3,3,3,32,32,3,3,32,32],[32,32,3,3,3,32,32,3,3,32,32,3,3,3,3],[32,32,3,3,3,32,32,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,32,32],[3,3,3,3,3,3,3,3,3,3,3,3,3,32,32],[3,3,3,3,3,3,32,32,3,3,3,32,32,3,3],[3,3,3,32,32,3,32,32,3,3,3,32,32,3,3],[3,3,3,32,32,3,3,3,3,3,3,3,3,3,3],[32,32,3,3,3,3,3,3,3,3,3,32,32,3,3],[32,32,3,3,3,3,32,32,3,3,3,32,32,3,3],[3,3,3,3,3,3,32,32,3,3,3,3,3,3,3],
        ],
    [
        [3,3,3,3,3,3,3,3,3,6,6,3,3,3,3],[3,6,6,3,3,3,3,3,3,6,6,3,3,3,3],[3,6,6,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,6,6],[3,3,3,3,3,3,3,3,3,6,6,3,3,6,6],[6,6,3,3,3,6,6,3,3,6,6,3,3,3,3],[6,6,3,3,3,6,6,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,6,6],[3,3,3,3,3,3,3,3,3,3,3,3,3,6,6],[3,3,3,3,3,3,6,6,3,3,3,6,6,3,3],[3,3,3,6,6,3,6,6,3,3,3,6,6,3,3],[3,3,3,6,6,3,3,3,3,3,3,3,3,3,3],[6,6,3,3,3,3,3,3,3,3,3,6,6,3,3],[6,6,3,3,3,3,6,6,3,3,3,6,6,3,3],[3,3,3,3,3,3,6,6,3,3,3,3,3,3,3],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,26,51,0,0,0],[0,0,0,0,0,0,0,0,26,26,26,51,26,0,0],[0,0,0,0,0,51,26,26,26,26,26,26,26,0,0],[0,0,0,0,0,0,0,0,26,51,51,26,26,0,0],[0,0,0,0,0,0,0,0,0,0,26,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
            [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,12,12,3,3,3,3,3,3,3,3,3,3],[3,3,12,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,12,3,3,3,3,3,3,12,12,3,12,3,3],[3,3,12,3,3,3,3,3,12,3,3,3,3,3,3],[3,3,12,3,3,3,3,12,3,3,3,3,3,3,3],[3,3,12,3,3,3,12,3,3,3,3,3,3,3,3],[3,3,3,12,12,12,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
        ],
    [
        
[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        ],
    [
        
[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        ],
    [
        
[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,12,12,12,12,12,29,29,29,29,29,29,29,29],[29,29,12,3,3,3,12,29,29,29,29,29,29,29,29],[29,29,12,12,12,12,12,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],[29,29,29,29,31,29,29,29,29,29,29,29,29,29,29],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,22,25,0,0,0],[0,0,0,0,0,0,0,0,24,24,22,25,22,0,0],[0,0,0,0,0,25,22,22,22,24,24,22,22,0,0],[0,0,0,0,0,0,0,0,22,25,25,24,24,0,0],[0,0,0,0,0,0,0,0,0,0,24,24,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,41,41,41,0,0,0,0],[0,0,0,0,0,0,0,41,41,41,41,41,0,0,0],[0,0,0,0,0,0,41,41,41,41,41,41,0,0,0],[0,0,0,0,0,0,0,41,41,41,41,41,0,0,0],[0,0,0,0,0,0,0,0,41,41,41,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],
        ],
    [
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,12,12,12,12,12,12,12,12,12,12,12,2,2],[2,2,12,12,12,12,12,12,12,12,12,12,12,2,2],[2,2,12,12,2,2,12,12,2,2,2,2,2,2,2],[2,2,12,12,2,2,12,12,2,2,2,2,2,2,2],[2,2,12,12,2,2,12,12,2,2,2,2,2,2,2],[2,2,12,12,12,12,12,12,2,2,2,2,2,2,2],[2,2,12,12,12,12,12,12,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
        ],
    [
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,37,37,37,37,37,37,37,37,37,37,37,2,2],[2,2,37,37,37,37,37,37,37,37,37,37,37,2,2],[2,2,37,37,2,2,37,37,2,2,2,2,2,2,2],[2,2,37,37,2,2,37,37,2,2,2,2,2,2,2],[2,2,37,37,2,2,37,37,2,2,2,2,2,2,2],[2,2,37,37,37,37,37,37,2,2,2,2,2,2,2],[2,2,37,37,37,37,37,37,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [3,3,2,2,3,2,2,2,3,2,2,2,2,3,2],[2,3,3,3,2,4,2,4,2,2,3,2,2,2,4],[2,4,2,4,3,2,3,2,3,3,2,2,2,2,2],[3,2,3,2,4,3,2,2,2,2,4,2,3,2,2],[2,2,4,3,3,2,2,3,2,3,2,3,3,4,3],[2,2,3,2,2,2,3,3,2,2,2,2,2,2,3],[4,2,3,3,2,3,3,3,2,4,2,2,2,2,2],[3,2,2,2,2,4,2,2,3,3,2,3,2,4,3],[3,3,4,3,2,3,2,3,3,3,2,3,4,2,2],[2,2,3,2,3,2,3,4,3,3,2,2,3,2,2],[2,2,2,2,2,3,2,2,2,3,2,2,4,2,2],[3,2,2,4,3,2,3,4,2,2,3,2,3,3,3],[2,2,2,3,2,2,2,3,3,2,2,4,2,2,3],[3,2,3,2,2,4,2,2,2,3,2,2,2,4,2],[3,2,3,2,3,2,2,3,2,4,2,2,2,2,3],

        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,6,6,6,6,6,6,6,6,6,42,42,4,4],[4,4,6,6,6,6,6,6,6,42,42,42,42,4,4],[4,4,6,6,6,6,6,42,42,42,27,27,42,4,4],[4,4,6,6,6,42,42,42,27,27,27,27,42,4,4],[4,4,6,6,42,42,27,27,27,1,1,27,42,4,4],[4,4,6,6,42,27,27,1,1,1,1,27,42,4,4],[4,4,6,6,42,42,27,27,27,1,1,27,42,4,4],[4,4,6,6,6,42,42,42,27,27,27,27,42,4,4],[4,4,6,6,6,6,6,42,42,42,27,27,42,4,4],[4,4,6,6,6,6,6,6,6,42,42,42,42,4,4],[4,4,6,6,6,6,6,6,6,6,6,42,42,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,2,0,0,0,0,0,2,2,0,0,0,0,2],[2,0,0,2,0,0,2,2,2,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,2,0,0,2],[2,0,0,2,0,0,2,2,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,2,2,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,2,0,0,2],[2,0,2,2,2,2,2,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,2,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,2,2,2,0,0,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],

        ],
    [
        [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0],[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0],[4,4,4,4,0,0,0,0,0,0,0,0,0,0,4],[4,4,4,4,0,0,0,0,0,0,0,0,0,4,4],[4,4,4,4,4,0,0,0,0,0,0,4,4,4,4],[4,4,4,4,4,4,4,0,0,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,0,0,4,4,4,4,4,4],[4,4,4,4,4,0,0,0,0,0,0,4,4,4,4],[4,4,4,4,0,0,0,0,0,0,0,0,0,4,4],[4,4,4,4,0,0,0,0,0,0,0,0,0,0,4],[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0],[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,37,1,0,0,0,0,0,5,5,5,5],[0,0,0,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,0,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[3,3,37,37,37,1,3,3,3,3,3,5,5,5,5],[3,3,37,37,37,1,3,3,3,3,3,5,5,5,5],[3,3,37,37,37,1,3,3,3,3,3,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,37,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,0,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,0,37,37,1,0,0,0,0,0,5,5,5,5],[0,0,0,0,37,1,0,0,0,0,0,5,5,5,5],
        ],
    [
        [0,0,0,0,0,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,3,3,42,42,3,3,42,42,3,3],[4,4,4,4,4,3,3,42,42,3,3,42,42,3,3],[4,4,4,4,4,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,3,3,42,42,3,3,42,42,3,3],[0,0,0,0,0,3,3,42,42,3,3,42,42,3,3],[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,3,3,42,42,3,3,42,42,3,3],[0,0,0,0,0,3,3,42,42,3,3,42,42,3,3],[4,4,4,4,4,3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,3,3,42,42,3,3,42,42,3,3],[4,4,4,4,4,3,3,42,42,3,3,42,42,3,3],[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,6,0,0,0],[0,0,0,0,0,0,0,0,41,41,5,6,5,0,0],[0,0,0,0,0,41,5,5,5,41,41,5,5,0,0],[0,0,0,0,0,0,0,0,5,6,6,41,41,0,0],[0,0,0,0,0,0,0,0,0,0,41,41,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

        ],
    [
        [15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],[15,3,15,6,15,3,15,6,15,3,15,6,15,3,15],
        ],
    [
        [15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],[15,3,15,3,15,3,15,3,15,3,15,3,15,3,15],
        ],
    [
        
[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        ],
    [
        
[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,4,4,4,4,4,4,4,4,4,4,4,4,4,5],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,5],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        ],
    [
        [1,1,1,0,0,0,1,1,1,0,0,0,0,0,1],[1,0,1,0,0,0,0,0,0,1,1,0,1,1,0],[0,0,1,1,1,1,1,1,0,1,0,1,0,0,1],[0,0,0,0,0,1,1,1,1,1,1,1,0,0,1],[0,0,0,0,1,1,1,0,0,1,1,0,1,1,1],[1,0,1,1,0,0,0,0,1,1,0,0,1,1,1],[0,0,1,0,0,0,0,1,0,1,1,1,0,1,1],[1,1,1,0,0,0,0,0,1,1,1,1,0,0,1],[0,0,1,1,1,1,1,0,1,1,1,0,0,1,0],[0,0,1,1,0,1,1,0,1,0,0,0,1,0,0],[1,0,1,0,0,1,1,1,0,0,0,1,0,1,0],[0,0,0,1,1,1,1,0,0,0,1,0,0,0,0],[0,1,1,1,1,0,0,1,1,1,0,1,0,1,1],[1,0,0,0,1,0,0,0,1,0,0,1,1,0,0],[1,0,0,0,1,1,0,0,1,1,0,0,0,1,1],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,11,11,11,0,0,0,0,0,0],[0,0,0,0,0,11,42,11,11,11,0,0,0,0,0],[0,0,0,11,11,47,42,47,11,42,42,0,0,0,0],[0,0,47,11,42,47,11,42,47,47,11,0,0,0,0],[0,11,47,42,42,6,47,42,42,47,47,47,0,0,0],[0,0,11,6,6,11,47,6,42,6,11,47,0,0,0],[0,0,0,0,47,6,6,6,42,6,11,47,11,0,0],[0,0,0,0,11,42,47,47,11,11,11,42,0,0,0],[0,0,0,11,11,42,11,6,42,42,47,11,0,0,0],[0,42,42,11,11,47,6,42,42,47,47,0,0,0,0],[11,6,0,0,11,47,47,11,11,11,11,0,0,0,0],[0,0,0,0,6,42,47,47,11,0,0,0,0,0,0],[0,0,0,0,0,11,11,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
            [3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,13,6,31,31,13,13,13,13,6,6,13,13,13],[3,3,13,6,6,31,13,13,13,6,6,6,13,13,13],[3,3,13,6,6,31,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,3,3,3,3,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,13,6,6,31,13,13,6,1,1,6,13,13,13],[3,3,13,6,6,31,13,13,13,6,6,6,13,13,13],[3,3,13,6,31,31,13,13,13,13,6,6,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],
            ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,3,13,13,13,13,13,13,13,13,13,13],[1,1,0,3,3,13,13,13,13,13,13,13,13,13,13],[1,1,1,3,3,13,13,31,31,13,13,13,6,13,13],[0,1,3,3,3,13,13,31,6,13,13,13,6,13,13],[0,0,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,3,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,0,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,1,3,3,3,13,13,31,6,13,13,13,6,13,13],[1,1,1,3,3,13,13,31,31,13,13,13,6,13,13],[1,1,0,3,3,13,13,13,13,13,13,13,13,13,13],[1,0,0,0,3,13,13,13,13,13,13,13,13,13,13],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,42,47,47,47,47,47,47,47],[0,0,0,0,0,0,42,42,47,6,47,47,47,47,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,6,47,47,47,47,47],[0,0,0,0,0,0,0,42,47,47,47,47,47,47,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,1,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,1,1,1,4,4,4],[4,4,6,6,4,6,6,4,4,1,1,1,1,1,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,1,1,1,1,1,4],[4,4,4,4,4,4,4,4,4,1,1,1,4,4,4],[4,4,6,6,4,6,6,4,4,1,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,1,1,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,1,0,0,0,0],[0,0,1,0,1,1,1,0,0,0,1,0,0,0,0],[1,1,0,0,1,0,0,1,1,0,0,1,0,0,0],[1,0,0,1,1,0,0,0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0,1,0,0,0,1,0,0],[1,0,0,1,0,0,1,1,1,0,0,0,1,0,0],[1,0,0,1,0,0,1,1,0,0,0,1,1,0,0],[1,0,0,1,0,0,0,0,0,0,1,1,0,0,0],[1,0,0,1,1,0,0,0,0,1,1,0,0,0,0],[1,1,0,0,1,1,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[1,1,1,1,1,0,0,0,0,0,0,0,0,1,0],[1,0,0,0,1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,1,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [5,5,5,6,5,6,5,5,5,5,5,6,4,4,4],[5,6,5,5,4,4,4,6,6,6,5,5,5,5,6],[5,6,5,5,6,5,5,6,5,5,5,6,5,5,6],[5,5,4,4,4,5,5,6,6,4,5,5,6,4,5],[5,6,5,5,6,6,5,5,6,4,5,5,6,4,6],[5,6,5,5,6,4,6,5,6,6,4,6,6,6,5],[6,5,5,6,5,6,5,6,6,6,5,4,4,4,5],[6,4,4,5,5,5,4,4,6,6,5,6,5,6,5],[5,6,5,5,6,5,6,5,4,4,5,5,6,6,5],[5,6,6,5,5,5,5,6,5,5,4,5,5,5,6],[5,6,6,5,6,4,5,5,5,5,6,6,6,4,6],[5,4,4,5,4,6,5,5,5,4,6,4,5,4,5],[5,5,5,5,6,6,6,6,6,4,5,5,5,5,6],[5,6,6,6,5,6,5,5,4,5,5,4,4,6,6],[5,5,6,6,5,6,6,4,5,6,6,6,4,4,5],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,31,31],[0,0,0,0,0,0,0,0,0,0,0,0,31,31,31],[0,0,0,0,0,0,0,0,0,0,0,31,31,31,0],[0,0,0,0,0,0,0,0,0,0,31,31,31,0,0],[0,0,0,0,0,0,0,0,0,31,31,31,0,0,0],[0,0,0,0,0,0,0,0,31,31,31,0,0,0,0],[0,0,0,0,0,0,0,31,31,31,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,31,31,31,0,0,0,0,0,0,0],[0,0,0,0,31,31,31,0,0,0,0,0,0,0,0],[0,0,0,31,31,31,0,0,0,0,0,0,0,0,0],[0,0,31,31,31,0,0,0,0,0,0,0,0,0,0],[0,31,31,31,0,0,0,0,0,0,0,0,0,0,0],[31,31,31,0,0,0,0,0,0,0,0,0,0,0,0],[31,31,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,31,31,0,31,31,0,0,0,0,0,0],[0,0,0,31,31,31,31,31,31,31,0,0,0,0,0],[0,0,0,31,31,31,31,31,31,31,0,0,0,0,0],[0,0,0,0,31,31,31,31,31,31,31,0,0,0,0],[0,0,0,0,31,31,31,31,31,31,31,0,0,0,0],[0,0,0,0,0,0,0,31,31,31,0,0,0,0,0],[0,0,0,0,0,0,0,0,31,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],[31,31,41,41,41,41,41,41,41,41,41,41,41,31,31],[31,31,41,41,41,41,41,41,41,41,41,41,41,31,31],[31,31,41,41,31,31,31,31,31,31,31,41,41,31,31],[31,31,41,41,31,31,31,31,31,31,31,41,41,31,31],[31,31,41,41,31,31,41,41,41,31,31,41,41,31,31],[31,31,41,41,31,31,41,41,41,31,31,41,41,31,31],[31,31,41,41,31,31,41,41,41,31,31,41,41,31,31],[31,31,41,41,31,31,31,31,31,31,31,41,41,31,31],[31,31,41,41,31,31,31,31,31,31,31,41,41,31,31],[31,31,41,41,41,41,41,41,41,41,41,41,41,31,31],[31,31,41,41,41,41,41,41,41,41,41,41,41,31,31],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],
        ],
    [
        [6,31,31,31,31,6,6,6,6,31,31,6,31,31,31],[6,31,31,31,31,31,31,6,31,31,31,31,31,6,6],[31,31,41,6,6,6,41,41,41,6,6,6,41,31,6],[31,31,6,6,41,6,41,6,41,41,41,41,6,6,31],[31,6,41,41,31,31,31,6,31,31,31,41,41,31,31],[31,6,41,6,6,31,31,31,31,31,31,41,41,6,6],[6,31,41,41,6,6,41,6,41,31,6,41,41,31,6],[6,31,41,41,31,31,41,6,41,31,6,6,41,31,31],[31,6,41,41,31,31,6,6,6,6,31,41,41,31,31],[31,6,6,41,31,31,31,6,31,31,6,41,41,6,31],[31,31,41,6,6,31,31,31,31,31,6,41,41,6,31],[6,6,41,41,41,41,6,6,6,41,41,41,6,31,31],[6,31,6,41,41,6,41,41,41,6,41,41,41,31,31],[31,31,6,31,31,6,31,31,31,6,31,31,31,31,6],[31,31,31,6,31,31,31,6,6,6,31,31,31,6,6],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],[0,0,27,27,0,0,0,27,0,27,0,0,6,6,42],[0,0,0,0,0,0,0,0,0,0,0,6,42,6,42],[27,0,0,0,0,27,27,0,0,0,6,6,6,42,6],[0,0,0,0,0,0,0,0,0,0,42,6,6,6,6],[0,0,27,0,27,0,0,0,6,6,6,6,42,6,6],[0,0,0,0,0,0,0,6,42,6,6,6,6,6,6],[0,0,0,0,0,6,42,6,6,42,6,42,6,6,6],[0,27,0,0,0,6,42,6,6,6,42,6,6,42,6],[0,0,0,0,0,0,6,6,6,6,42,6,6,6,6],[0,0,0,27,27,27,0,0,6,6,6,6,6,6,6],[0,0,0,0,0,27,0,0,0,0,0,6,42,42,6],[0,0,0,0,0,0,0,0,0,0,0,6,42,6,6],[0,27,0,0,0,0,27,0,0,27,0,6,6,6,42],[0,0,0,27,0,0,0,0,27,0,0,0,6,42,6],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,2,1,1,1,1,1,1,1,1,1,1,0,0],[0,2,2,2,1,1,1,1,1,1,1,1,1,1,0],[0,2,2,2,1,1,1,1,1,1,1,1,1,1,0],[2,2,2,2,2,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,1,1,1,1,1,1,1,1,1,1],[0,2,2,2,1,1,1,1,1,1,1,1,1,1,0],[0,2,2,2,1,1,1,1,1,1,1,1,1,1,0],[0,0,2,1,1,1,1,1,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,2,1,1,1,1,1,31,31],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,30],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,29],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,30],[0,0,0,0,0,0,0,2,1,1,1,1,1,31,31],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],[0,0,0,0,0,0,0,0,0,0,37,37,37,0,0],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,2,1,1,1,1,1,31,31],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,30],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,29],[0,0,0,0,0,0,2,2,2,1,1,1,1,1,30],[0,0,0,0,0,0,0,2,1,1,1,1,1,31,31],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],[0,0,0,0,0,0,0,0,0,0,12,12,12,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[3,3,3,30,30,30,30,30,30,30,30,4,4,4,4],[3,3,3,30,30,30,30,30,30,30,30,4,4,4,4],[3,3,3,30,30,30,30,30,30,30,30,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,30,30,4,4,4,4],[0,0,0,0,0,0,0,30,30,30,30,4,4,4,4],[0,0,0,0,0,30,30,30,30,30,30,4,4,4,4],[0,0,0,30,30,30,30,30,30,0,0,4,4,4,4],[0,3,3,30,30,30,30,0,0,0,0,4,4,4,4],[3,3,3,30,30,0,0,0,0,0,0,4,4,4,4],[3,3,3,0,0,0,0,0,0,0,0,4,4,4,4],[3,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[3,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[3,3,3,0,0,0,0,0,0,0,0,4,4,4,4],[3,3,3,30,30,0,0,0,0,0,0,4,4,4,4],[0,3,3,30,30,30,30,0,0,0,0,4,4,4,4],[0,0,0,30,30,30,30,30,30,0,0,4,4,4,4],[0,0,0,0,0,30,30,30,30,30,30,4,4,4,4],[0,0,0,0,0,0,0,30,30,30,30,4,4,4,4],[0,0,0,0,0,0,0,0,0,30,30,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],

        ],
    [
        [22,22,22,24,25,25,25,25,24,24,22,22,25,25,25],[24,22,22,24,22,22,22,25,22,22,24,25,25,22,25],[25,22,22,24,24,24,22,25,22,24,25,25,24,22,22],[24,25,22,22,22,22,24,25,22,25,22,22,24,24,24],[22,22,25,22,24,25,25,24,22,22,25,25,25,25,22],[22,24,22,22,22,24,24,22,22,22,24,24,22,25,22],[22,22,25,25,22,22,22,22,24,22,24,22,24,22,25],[24,25,25,25,24,24,25,25,25,22,25,22,24,24,25],[22,22,22,22,24,25,24,24,22,24,22,25,25,25,24],[22,25,22,24,24,25,24,24,24,24,24,25,22,22,24],[22,25,25,25,22,22,25,25,22,22,24,22,24,22,24],[22,22,24,22,22,25,22,25,25,25,25,22,24,24,24],[22,24,25,22,22,25,24,22,25,25,25,22,22,25,24],[22,25,24,24,24,25,22,22,22,24,25,22,22,25,22],[22,22,22,22,22,22,25,22,24,24,25,22,22,25,22],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],[0,0,0,0,0,1,47,47,47,47,47,1,0,0,0],[0,0,0,0,1,47,47,47,47,47,47,47,1,0,0],[1,1,1,1,1,47,47,47,47,47,47,47,47,1,0],[1,0,0,0,1,47,47,47,47,47,47,47,47,47,1],[1,0,0,0,1,47,47,47,47,47,47,47,47,47,1],[1,0,0,0,1,47,47,47,47,47,47,47,47,47,1],[1,1,1,1,1,47,47,47,47,47,47,47,47,1,0],[0,0,0,0,1,47,47,47,47,47,47,47,1,0,0],[0,0,0,0,0,1,47,47,47,47,47,1,0,0,0],[0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,3,3,3,3,3,3,3,0,0,0,0],[0,0,0,0,3,3,3,3,3,3,3,0,0,0,0],[0,0,0,0,3,3,3,3,3,3,3,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,4,4,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,30,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,6,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,30,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,4,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,4,4,30,30,30,30,30,30],[0,0,0,0,0,0,4,4,4,0,0,30,30,30,30],[0,0,0,0,0,0,4,4,4,0,0,0,0,30,30],[0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],
        ],
    [
    [0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,0,4,4,4,0,0,0,0,30,30],[0,0,0,0,0,0,4,4,4,0,0,30,30,30,30],[0,0,0,0,0,4,4,4,4,30,30,30,30,30,30],[0,0,0,0,0,4,4,4,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,30,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,6,30,30,30,30,30,30,30],[0,0,0,0,0,4,4,30,30,30,30,30,30,30,30],[0,0,0,0,0,0,4,4,30,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,4,4,4,4,30,30,30,30,30,30,30],[4,4,4,4,4,4,4,30,30,30,30,30,30,30,30],[4,4,4,4,4,4,4,6,30,30,30,30,30,30,30],[4,4,4,4,4,4,4,30,30,30,30,30,30,30,30],[0,0,0,0,4,4,4,4,30,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        
[5,4,4,3,2,2,1,1,1,2,2,3,4,4,5],[5,5,4,3,3,2,1,1,1,2,3,3,4,5,5],[0,5,4,4,3,2,2,1,2,2,3,4,4,5,0],[0,5,5,4,3,3,2,1,2,3,3,4,5,5,0],[0,0,5,4,4,3,2,2,2,3,4,4,5,0,0],[0,0,5,5,4,3,3,2,3,3,4,5,5,0,0],[0,0,0,5,4,4,3,2,3,4,4,5,0,0,0],[0,0,0,5,5,4,3,3,3,4,5,5,0,0,0],[0,0,0,0,5,4,4,3,4,4,5,0,0,0,0],[0,0,0,0,5,5,4,3,4,5,5,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,0,5,4,3,4,5,0,0,0,0,0],[0,0,0,0,5,5,4,3,4,5,5,0,0,0,0],[0,0,0,0,5,4,4,3,4,4,5,0,0,0,0],[0,0,0,5,5,4,3,3,3,4,5,5,0,0,0],[0,0,0,5,4,4,3,2,3,4,4,5,0,0,0],[0,0,5,5,4,3,3,2,3,3,4,5,5,0,0],[0,0,5,4,4,3,2,2,2,3,4,4,5,0,0],[0,5,5,4,3,3,2,1,2,3,3,4,5,5,0],[0,5,4,4,3,2,2,1,2,2,3,4,4,5,0],[5,5,4,3,3,2,1,1,1,2,3,3,4,5,5],[5,4,4,3,2,2,1,1,1,2,2,3,4,4,5],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,0,0,0,5,5],[0,0,0,0,0,0,0,0,0,0,0,5,5,5,4],[0,0,0,0,0,0,0,0,0,5,5,5,4,4,4],[0,0,0,0,0,0,0,5,5,5,4,4,4,3,3],[0,0,0,0,0,5,5,5,4,4,4,3,3,3,2],[5,5,5,5,5,5,4,4,4,3,3,3,2,2,2],[4,4,4,4,4,4,4,3,3,3,2,2,2,1,1],[3,3,3,3,3,3,3,3,2,2,2,1,1,1,1],[4,4,4,4,4,4,4,3,3,3,2,2,2,1,1],[5,5,5,5,5,5,4,4,4,3,3,3,2,2,2],[0,0,0,0,0,5,5,5,4,4,4,3,3,3,2],[0,0,0,0,0,0,0,5,5,5,4,4,4,3,3],[0,0,0,0,0,0,0,0,0,5,5,5,4,4,4],[0,0,0,0,0,0,0,0,0,0,0,5,5,5,4],[0,0,0,0,0,0,0,0,0,0,0,0,0,5,5],
        ],
    [
        [5,5,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,5,5,5,0,0,0,0,0,0,0,0,0,0,0],[4,4,4,5,5,5,0,0,0,0,0,0,0,0,0],[3,3,4,4,4,5,5,5,0,0,0,0,0,0,0],[2,3,3,3,4,4,4,5,5,5,0,0,0,0,0],[2,2,2,3,3,3,4,4,4,5,5,5,5,5,5],[1,1,2,2,2,3,3,3,4,4,4,4,4,4,4],[1,1,1,1,2,2,2,3,3,3,3,3,3,3,3],[1,1,2,2,2,3,3,3,4,4,4,4,4,4,4],[2,2,2,3,3,3,4,4,4,5,5,5,5,5,5],[2,3,3,3,4,4,4,5,5,5,0,0,0,0,0],[3,3,4,4,4,5,5,5,0,0,0,0,0,0,0],[4,4,4,5,5,5,0,0,0,0,0,0,0,0,0],[4,5,5,5,0,0,0,0,0,0,0,0,0,0,0],[5,5,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[2,1,1,1,1,1,1,1,1,1,1,2,2,1,1],[1,1,1,1,2,1,1,1,2,1,1,1,1,1,2],[1,1,1,2,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,2,1,1,2,1,1,1,1,2],[1,1,1,1,1,1,1,1,1,1,1,1,2,2,1],[2,1,1,1,1,2,1,1,1,1,1,1,1,1,1],[2,1,1,2,1,1,1,1,2,1,1,1,1,2,1],[1,1,1,1,2,1,1,1,1,1,1,1,1,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,2,1,2,1],[1,1,1,2,1,1,2,2,1,1,2,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,2,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,1,1,1,2,1,1,1,2,1,2,1,1],
        ],
    [
        [0,0,0,29,29,29,0,0,29,0,0,0,29,29,29],[0,0,0,0,0,29,29,29,29,29,29,29,29,29,29],[0,0,0,29,29,29,29,29,29,29,29,29,29,29,0],[0,0,29,29,29,29,29,29,29,29,29,29,29,29,0],[0,29,29,29,29,29,29,29,29,29,29,29,29,29,0],[29,29,29,29,29,29,29,29,29,29,29,29,29,0,0],[0,29,29,29,29,29,29,29,29,29,29,29,29,0,0],[0,29,29,29,29,29,29,29,29,29,29,29,29,0,0],[0,29,29,29,29,29,29,29,29,29,29,29,29,0,0],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,0],[0,29,29,29,29,29,29,29,29,29,29,29,29,29,0],[0,0,29,29,29,29,29,29,29,29,29,29,29,29,0],[0,0,0,29,29,29,29,29,29,29,29,29,29,29,0],[0,0,0,0,0,29,29,29,29,29,29,29,29,29,29],[0,0,0,29,29,29,0,0,29,0,0,0,29,29,29],
        ],
    [
        [0,0,0,31,31,31,0,0,31,0,0,0,31,31,31],[0,0,0,0,0,31,31,31,31,31,31,31,31,31,31],[0,0,0,31,31,31,31,31,31,31,31,31,31,31,0],[0,0,31,31,31,31,31,31,31,31,31,31,31,31,0],[0,31,31,31,31,31,31,31,31,31,31,31,31,31,0],[31,31,31,31,31,31,31,31,31,31,31,31,31,0,0],[0,31,31,31,31,31,31,31,31,31,31,31,31,0,0],[0,31,31,31,31,31,31,31,31,31,31,31,31,0,0],[0,31,31,31,31,31,31,31,31,31,31,31,31,0,0],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,0],[0,31,31,31,31,31,31,31,31,31,31,31,31,31,0],[0,0,31,31,31,31,31,31,31,31,31,31,31,31,0],[0,0,0,31,31,31,31,31,31,31,31,31,31,31,0],[0,0,0,0,0,31,31,31,31,31,31,31,31,31,31],[0,0,0,31,31,31,0,0,31,0,0,0,31,31,31],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,37,37,0,0],[0,0,0,0,0,0,0,0,0,37,37,37,1,37,37],[0,0,0,0,0,0,0,0,37,37,37,1,1,37,37],[0,0,0,0,0,0,0,37,37,37,1,1,37,37,0],[0,0,0,0,0,0,0,37,37,1,1,37,37,0,0],[0,0,0,0,0,0,37,1,1,37,37,37,37,0,0],[0,0,0,0,0,37,1,37,37,37,1,1,0,0,0],[0,0,0,0,37,37,1,37,37,37,1,37,0,0,0],[0,0,0,37,37,1,1,37,37,1,1,0,0,0,0],[0,0,0,37,1,1,37,37,1,1,37,0,0,0,0],[0,0,1,1,1,37,1,1,1,37,0,0,0,0,0],[37,37,1,37,37,1,1,37,37,0,0,0,0,0,0],[37,37,37,37,1,1,37,37,0,0,0,0,0,0,0],[0,0,37,1,1,37,37,0,0,0,0,0,0,0,0],[0,0,37,1,37,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,39,39,0,0],[0,0,0,0,0,0,0,0,0,39,39,39,37,39,39],[0,0,0,0,0,0,0,0,39,39,39,37,37,39,39],[0,0,0,0,0,0,0,39,39,39,37,37,39,39,0],[0,0,0,0,0,0,0,39,39,37,37,39,39,0,0],[0,0,0,0,0,0,39,37,37,39,39,39,39,0,0],[0,0,0,0,0,39,37,39,39,39,37,37,0,0,0],[0,0,0,0,39,39,37,39,39,39,37,39,0,0,0],[0,0,0,39,39,37,37,39,39,37,37,0,0,0,0],[0,0,0,39,37,37,39,39,37,37,39,0,0,0,0],[0,0,37,37,37,39,37,37,37,39,0,0,0,0,0],[39,39,37,39,39,37,37,39,39,0,0,0,0,0,0],[39,39,39,39,37,37,39,39,0,0,0,0,0,0,0],[0,0,39,37,37,39,39,0,0,0,0,0,0,0,0],[0,0,39,37,39,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],[0,0,0,1,1,1,45,45,45,45,45,45,45,45,45],[0,0,1,1,45,45,45,45,45,45,45,45,45,0,0],[0,0,1,45,45,45,45,45,45,45,45,45,0,0,0],[0,1,1,45,45,45,45,45,45,45,45,0,0,0,0],[0,1,45,45,45,45,45,45,45,45,45,0,0,0,0],[0,1,45,45,45,45,45,45,45,45,45,0,0,0,0],[0,0,0,0,45,45,45,0,0,45,45,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],[0,0,0,1,1,1,37,37,37,37,37,37,37,37,37],[0,0,1,1,37,37,37,37,37,37,37,37,37,0,0],[0,0,1,37,37,37,37,37,37,37,37,37,0,0,0],[0,1,1,37,37,37,37,37,37,37,37,0,0,0,0],[0,1,37,37,37,37,37,37,37,37,37,0,0,0,0],[0,1,37,37,37,37,37,37,37,37,37,0,0,0,0],[0,0,0,0,37,37,37,0,0,37,37,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,45,45,0,0,0,0,0,45,45,45,45,45,0,0],[45,45,45,45,45,0,45,45,45,45,45,45,45,45,0],[1,45,45,45,45,45,45,45,45,45,45,45,45,45,0],[1,45,45,45,45,45,45,45,45,45,45,45,45,45,45],[1,45,45,45,45,45,45,45,45,45,45,45,45,45,45],[1,1,1,1,45,45,1,1,1,1,45,45,45,45,45],[1,1,1,1,1,1,1,1,45,45,45,45,45,45,45],[1,45,45,45,45,45,45,45,45,45,45,45,45,0,0],[1,1,45,45,45,45,45,45,45,45,45,45,45,0,0],[45,1,45,45,45,45,45,45,45,45,45,45,0,0,0],[45,45,45,45,45,45,45,45,45,45,45,45,0,0,0],[45,45,45,45,45,45,45,45,45,45,45,0,0,0,0],[0,45,45,45,45,45,45,45,45,45,45,0,0,0,0],[0,0,45,45,45,45,45,45,45,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,38,38,0,0,0,0,0,38,38,38,38,38,0,0],[38,38,38,38,38,0,38,38,38,38,38,38,38,38,0],[1,38,38,38,38,38,38,38,38,38,38,38,38,38,0],[1,38,38,38,38,38,38,38,38,38,38,38,38,38,38],[1,38,38,38,38,38,38,38,38,38,38,38,38,38,38],[1,1,1,1,38,38,1,1,1,1,38,38,38,38,38],[1,1,1,1,1,1,1,1,38,38,38,38,38,38,38],[1,38,38,38,38,38,38,38,38,38,38,38,38,0,0],[1,1,38,38,38,38,38,38,38,38,38,38,38,0,0],[38,1,38,38,38,38,38,38,38,38,38,38,0,0,0],[38,38,38,38,38,38,38,38,38,38,38,38,0,0,0],[38,38,38,38,38,38,38,38,38,38,38,0,0,0,0],[0,38,38,38,38,38,38,38,38,38,38,0,0,0,0],[0,0,38,38,38,38,38,38,38,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,37,37,37,0,0,0,0],[0,0,0,0,0,0,0,37,37,37,37,37,0,0,0],[0,0,0,0,0,0,37,37,37,37,37,37,0,0,0],[0,0,0,0,0,0,0,37,37,37,37,37,0,0,0],[0,0,0,0,0,0,0,0,37,37,37,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,41],[0,0,0,0,0,0,0,0,0,0,0,0,0,40,40],[0,0,0,0,0,0,0,0,0,0,0,0,0,40,40],[0,0,0,0,0,0,0,0,0,0,0,0,40,41,40],[0,0,0,0,0,0,0,0,0,0,0,40,40,41,40],[0,0,0,0,0,0,0,0,0,40,41,41,40,41,40],[0,0,0,0,0,0,0,0,40,40,40,41,41,41,41],[0,0,0,0,0,0,0,40,40,41,41,40,40,40,41],[0,0,0,0,0,0,0,41,40,40,40,40,41,40,40],[0,0,0,0,0,0,0,41,40,41,41,41,41,41,40],[0,0,0,0,0,0,0,0,0,40,40,41,40,40,41],[0,0,0,0,0,0,0,0,0,0,40,40,40,40,40],[0,0,0,0,0,0,0,0,0,0,0,40,40,41,41],[0,0,0,0,0,0,0,0,0,0,0,0,40,41,41],[0,0,0,0,0,0,0,0,0,0,0,0,0,40,40],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,41,41,0,0,0,0,0,41,0,0,0,0,0,0],[0,41,41,41,0,0,41,41,41,0,0,0,0,41,0],[0,0,0,0,0,0,41,41,0,0,0,0,41,41,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,41,0],[0,0,0,0,0,0,0,0,41,41,41,0,0,0,0],[0,0,0,41,41,0,0,0,0,0,41,41,0,0,0],[0,0,0,41,41,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,41,41,41,0,0],[0,0,0,0,0,0,41,0,0,0,0,41,41,0,0],[0,0,0,0,0,0,41,41,0,0,0,0,0,0,0],[0,0,41,0,0,0,41,41,41,41,0,0,0,0,0],[0,0,41,0,0,0,0,0,0,0,0,41,41,0,0],[0,0,41,41,41,0,0,0,0,0,0,41,41,0,0],[0,0,0,41,41,0,0,0,0,0,0,41,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,2],[0,0,0,0,0,0,0,0,0,0,1,1,2,1,2],[0,0,0,0,0,0,0,0,0,2,2,1,1,1,1],[0,0,0,0,0,0,0,1,1,2,1,2,1,2,1],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,1,1,2,2,1,1,1],[0,0,0,0,0,0,0,0,0,1,2,1,1,1,2],[0,0,0,0,0,0,0,0,0,0,1,1,2,1,2],[0,0,0,0,0,0,0,0,0,0,0,1,1,2,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,2,2,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,1],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[0,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],[0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,28,28,28,0,0,0,0,0,0,0,0,0,0,0],[37,28,28,28,28,28,28,28,0,0,0,0,0,0,0],[37,28,37,37,28,37,28,28,28,28,28,28,0,0,0],[28,28,28,37,28,28,28,28,37,37,28,28,28,0,0],[0,28,28,28,28,37,28,28,28,28,37,28,28,0,0],[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[0,28,28,28,28,28,28,28,37,28,28,28,28,37,0],[28,37,37,28,28,28,37,28,28,28,28,37,28,37,0],[28,37,28,28,37,37,28,37,37,28,37,28,28,0,0],[28,28,28,37,28,28,28,28,28,28,28,0,0,0,0],[0,28,28,37,28,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,3,2,3,3,0,0,0,0,0,0,0,0,0,0],[3,1,3,2,3,3,3,3,0,0,0,0,0,0,0],[3,3,1,2,2,3,1,2,3,3,0,0,0,0,0],[2,2,1,3,3,1,1,3,3,1,1,3,0,0,0],[2,3,1,1,3,3,2,2,3,3,1,3,3,0,0],[3,1,1,2,2,2,3,1,3,3,1,3,1,0,0],[2,1,2,2,1,2,3,1,3,3,2,1,3,0,0],[3,3,3,3,3,2,3,1,2,1,2,3,0,0,0],[2,3,2,3,3,3,2,3,1,1,2,0,0,0,0],[3,3,1,1,2,1,2,3,3,3,0,0,0,0,0],[3,3,3,3,2,2,3,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [1,2,30,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,30,2,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,2,30,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,30,2,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,2,30,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,30,2,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,2,30,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,2,30,4,4,4,4,4,4,4,4,4,4,4],[1,30,30,2,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[30,30,2,30,30,30,2,30,30,30,2,30,30,30,2],[30,2,30,2,30,2,30,2,30,2,30,2,30,2,30],[2,30,30,30,2,30,30,30,2,30,30,30,2,30,30],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,2,30,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,30,2,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,2,30,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,30,2,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,2,30,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,30,2,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,2,30,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,2,30,1],[4,4,4,4,4,4,4,4,4,4,4,30,30,2,1],
    ],
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[30,30,2,30,30,30,2,30,30,30,2,30,30,30,2],[30,2,30,2,30,2,30,2,30,2,30,2,30,2,30],[2,30,30,30,2,30,30,30,2,30,30,30,2,30,30],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [1,2,30,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,30,2,0,0,0,0,0,0,0,0,0,0,0],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,2,30,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,30,2,31,31,31,31,31,31,31,31,31,31,31],[1,30,2,30,31,31,31,31,31,31,31,31,31,31,31],[1,2,30,30,31,31,31,31,31,31,31,31,31,31,31],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,30,2,0,0,0,0,0,0,0,0,0,0,0],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,2,30,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,2,30,0,0,0,0,0,0,0,0,0,0,0],[1,30,30,2,0,0,0,0,0,0,0,0,0,0,0]
        ],
    [
        [0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[30,30,2,30,30,30,2,30,30,30,2,30,30,30,2],[30,2,30,2,30,2,30,2,30,2,30,2,30,2,30],[2,30,30,30,2,30,30,30,2,30,30,30,2,30,30],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,2,30,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,30,2,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[0,0,0,0,0,0,0,0,0,0,0,2,30,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[31,31,31,31,31,31,31,31,31,31,31,30,30,2,1],[31,31,31,31,31,31,31,31,31,31,31,30,2,30,1],[31,31,31,31,31,31,31,31,31,31,31,2,30,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,30,2,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[0,0,0,0,0,0,0,0,0,0,0,2,30,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,2,30,1],[0,0,0,0,0,0,0,0,0,0,0,30,30,2,1],
        ],
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[30,30,2,30,30,30,2,30,30,30,2,30,30,30,2],[30,2,30,2,30,2,30,2,30,2,30,2,30,2,30],[2,30,30,30,2,30,30,30,2,30,30,30,2,30,30],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[31,31,31,31,4,4,4,4,4,4,4,4,4,4,4],[31,31,31,31,4,4,4,4,4,4,4,4,4,4,4],[31,31,31,31,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,31,31,31,31],[4,4,4,4,4,4,4,4,4,4,4,31,31,31,31],[4,4,4,4,4,4,4,4,4,4,4,31,31,31,31],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,0,0,0,0]
        ],
    [
        [0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,0,31,31,31,0,0,0,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[37,37,37,37,37,4,12,12,12,4,37,37,37,37,37],[37,37,37,37,37,1,1,1,1,1,37,37,37,37,37],[37,37,37,37,37,4,12,12,12,4,37,37,37,37,37],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,7,7,7,7,7,7,7,7,7,4,4,4],[4,4,4,7,7,7,7,7,7,7,7,7,4,4,4],[4,4,4,7,7,7,7,7,7,7,7,7,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,4,4,4,7,7,7,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        
[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[37,37,37,37,37,37,4,1,4,37,37,37,37,37,37],[37,37,37,37,37,37,4,1,4,37,37,37,37,37,37],[37,37,37,37,37,37,4,1,4,37,37,37,37,37,37],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],[4,4,4,4,4,4,12,12,12,4,4,4,4,4,4],
        ],
    [
        [4,2,3,3,3,3,5,5,2,5,5,5,5,5,5],[4,5,4,4,2,2,5,2,2,2,4,32,2,2,4],[4,5,2,2,4,4,4,4,4,4,4,4,4,4,4],[4,32,5,2,4,4,3,4,2,5,5,2,4,4,4],[3,3,5,4,32,4,32,2,5,2,2,5,4,3,4],[2,4,3,5,4,2,2,2,5,5,4,4,5,5,2],[3,4,4,5,5,2,2,2,2,5,32,4,4,5,32],[3,4,32,4,5,4,2,2,3,5,2,4,4,2,2],[4,3,2,4,2,5,2,2,4,4,5,4,4,4,5],[4,2,3,32,4,2,2,4,4,3,2,3,3,4,3],[2,2,2,2,4,4,4,2,3,3,3,3,3,2,5],[5,3,2,2,4,2,4,2,32,3,32,32,3,2,4],[5,5,2,5,5,5,5,5,5,5,32,3,5,5,4],[4,3,32,2,2,4,2,4,3,4,2,5,2,2,3],[4,4,4,4,4,2,3,2,3,3,2,4,3,2,4],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],[0,0,0,0,0,0,0,0,0,0,0,2,1,2,1],[0,0,0,0,0,0,0,0,0,2,1,2,2,2,1],[0,0,0,0,0,0,0,0,0,2,3,1,1,3,3],[0,0,0,0,0,0,0,2,2,1,3,2,2,3,2],[0,0,0,0,0,0,0,0,1,1,3,1,2,1,2],[0,0,0,0,0,0,0,0,2,2,2,2,2,3,1],[0,0,0,0,0,0,0,0,0,2,3,1,2,1,2],[0,0,0,0,0,0,0,0,0,0,2,1,2,1,2],[0,0,0,0,0,0,0,0,0,0,0,1,1,3,2],[0,0,0,0,0,0,0,0,0,0,0,2,2,1,3],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,1],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,3,0,0,0],[0,0,0,0,0,0,0,0,2,2,1,3,1,0,0],[0,0,0,0,0,2,1,1,1,2,2,1,1,0,0],[0,0,0,0,0,0,0,0,1,3,3,2,2,0,0],[0,0,0,0,0,0,0,0,0,0,2,2,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,4,4,4,4,4,2,2,2,2,2],[0,0,0,0,0,4,0,0,0,0,2,2,2,2,2],[0,0,0,0,1,1,1,0,0,0,2,2,2,2,2],[0,0,1,1,47,47,47,1,0,0,42,42,42,2,2],[0,0,1,1,47,47,47,1,0,42,42,42,42,2,2],[0,0,1,1,47,47,47,1,0,0,42,42,42,2,2],[0,0,0,0,1,1,1,0,0,0,2,2,2,2,2],[0,0,0,0,0,4,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,4,4,4,4,4,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,40,40,0,0,0],[0,0,0,0,0,0,0,0,0,0,39,40,40,0,0],[0,0,0,0,0,0,0,0,0,0,39,39,40,0,0],[0,0,0,0,0,0,0,0,0,0,38,39,40,40,0],[0,0,0,0,0,0,0,0,0,0,38,39,39,40,0],[0,0,0,0,0,0,0,0,0,0,38,38,39,40,40],[39,39,39,39,39,39,39,39,39,39,37,38,39,39,40],[39,39,39,39,39,39,39,39,39,39,37,38,38,39,40],[1,1,1,1,1,1,0,0,0,0,37,38,39,39,40],[0,1,1,1,1,1,0,0,0,0,38,38,39,40,40],[0,0,1,1,1,1,0,0,0,0,38,39,39,40,0],[0,0,0,1,1,1,0,0,0,0,38,39,40,40,0],[0,0,0,0,1,1,0,0,0,0,39,39,40,0,0],[0,0,0,0,0,0,0,0,0,0,39,40,40,0,0],[0,0,0,0,0,0,0,0,0,0,40,40,0,0,0],
        ],
    [
        [17,4,17,4,47,4,4,4,4,4,4,4,4,17,4],[4,4,4,4,47,4,4,17,4,4,4,4,4,4,4],[4,4,4,4,47,4,4,4,4,17,4,4,4,4,4],[4,17,4,17,47,4,17,4,4,4,4,4,4,17,4],[4,4,4,4,47,4,4,4,4,4,4,17,4,4,4],[4,17,4,4,47,4,4,4,17,4,4,4,17,4,4],[4,4,32,32,32,32,32,4,4,4,4,4,4,4,17],[4,4,32,3,3,3,32,4,4,4,17,4,4,4,4],[4,4,32,32,32,32,32,4,4,4,4,4,4,4,4],[17,4,4,4,47,4,4,4,4,17,4,4,4,17,4],[17,4,4,4,47,4,4,4,4,4,4,4,4,4,4],[4,4,4,17,47,4,4,17,4,4,4,17,4,4,4],[4,17,4,4,47,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,47,4,4,4,4,17,4,4,4,17,4],[4,4,4,4,47,4,17,4,4,4,4,4,4,4,4],
        ],
    [
        [4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,2,2,2,2,2,4,4,4,4,4,4,4,4],[4,4,2,3,3,3,2,4,4,4,4,4,4,4,4],[4,4,2,2,2,2,2,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,5,4,4,4,4,4,4,4,4,4,4],
        ],
    [
        [0,0,0,0,0,32,32,32,32,32,0,0,0,0,0],[0,0,0,32,32,32,32,32,32,32,32,32,0,0,0],[0,0,32,32,32,32,32,32,32,32,32,32,32,0,0],[0,32,32,32,32,32,22,22,22,32,32,32,32,32,0],[0,32,32,32,22,22,22,24,22,22,22,32,32,32,0],[32,32,32,32,22,24,24,24,24,24,22,32,32,32,32],[32,32,32,22,22,24,25,25,25,24,22,22,32,32,32],[32,32,32,22,24,24,25,26,25,24,24,22,32,32,32],[32,32,32,22,22,24,25,25,25,24,22,22,32,32,32],[32,32,32,32,22,24,24,24,24,24,22,32,32,32,32],[0,32,32,32,22,22,22,24,22,22,22,32,32,32,0],[0,32,32,32,32,32,22,22,22,32,32,32,32,32,0],[0,0,32,32,32,32,32,32,32,32,32,32,32,0,0],[0,0,0,32,32,32,32,32,32,32,32,32,0,0,0],[0,0,0,0,0,32,32,32,32,32,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,29,29,29,29,29,29,29,29,29,29],[0,0,0,0,0,0,0,0,2,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,2,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,29,0,0],[0,0,0,0,0,0,0,0,0,29,29,29,29,29,29],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,4,4],[0,0,0,0,0,0,0,0,0,0,0,0,4,6,6],[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4],[0,0,0,0,0,0,0,0,0,0,5,4,6,5,6],[0,0,0,0,0,0,0,0,4,4,4,5,4,6,5],[0,0,0,0,0,0,0,5,4,6,4,5,4,6,5],[0,0,0,0,0,0,4,4,6,6,4,5,4,5,6],[0,0,0,0,0,0,5,4,6,4,6,6,4,6,5],[0,0,0,0,0,0,0,6,4,6,4,4,4,4,5],[0,0,0,0,0,0,0,5,4,4,6,5,4,6,4],[0,0,0,0,0,0,0,0,0,0,4,5,4,5,4],[0,0,0,0,0,0,0,0,0,0,0,4,4,6,5],[0,0,0,0,0,0,0,0,0,0,0,4,6,4,6],[0,0,0,0,0,0,0,0,0,0,0,0,4,6,4],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,4],
        ],
    [
        [0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,3,3,2,2,2,2,2,3,3,0,0,0],[0,0,3,2,2,2,1,1,1,2,2,2,3,0,0],[0,3,2,2,1,1,1,42,1,1,1,2,2,3,0],[0,3,2,1,1,42,42,42,42,42,1,1,2,3,0],[3,2,2,1,42,42,5,5,5,42,42,1,2,2,3],[3,2,1,1,42,5,5,6,5,5,42,1,1,2,3],[3,2,1,42,42,5,6,6,6,5,42,42,1,2,3],[3,2,1,1,42,5,5,6,5,5,42,1,1,2,3],[3,2,2,1,42,42,5,5,5,42,42,1,2,2,3],[0,3,2,1,1,42,42,42,42,42,1,1,2,3,0],[0,3,2,2,1,1,1,42,1,1,1,2,2,3,0],[0,0,3,2,2,2,1,1,1,2,2,2,3,0,0],[0,0,0,3,3,2,2,2,2,2,3,3,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],
        ],
    ];
    art[-1]=[
        
[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,13,31,31,31,13,13,6,6,13,13,13,13,13],[3,3,13,31,6,31,13,13,6,1,6,13,13,13,13],[3,3,13,31,31,31,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,3,3,3,3,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,13,31,31,31,13,13,6,1,1,6,13,13,13],[3,3,13,31,6,31,13,13,6,1,6,13,13,13,13],[3,3,13,31,31,31,13,13,6,6,13,13,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],
        ];
    art[-2]=[
            [3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,13,6,31,31,13,13,13,13,6,6,13,13,13],[3,3,13,6,6,31,13,13,13,6,6,6,13,13,13],[3,3,13,6,6,31,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,3,3,3,3,13,13,6,1,1,6,13,13,13],[3,3,13,13,13,13,13,13,6,1,1,6,13,13,13],[3,3,13,6,6,31,13,13,6,1,1,6,13,13,13],[3,3,13,6,6,31,13,13,13,6,6,6,13,13,13],[3,3,13,6,31,31,13,13,13,13,6,6,13,13,13],[3,3,13,13,13,13,13,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],[3,3,3,3,3,3,3,13,13,13,13,13,13,13,13],
            ];
    art[-3]=[
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,3,13,13,13,13,13,13,13,13,13,13],[1,1,0,3,3,13,13,13,13,13,13,13,13,13,13],[1,1,1,3,3,13,13,31,31,13,13,13,6,13,13],[0,1,3,3,3,13,13,31,6,13,13,13,6,13,13],[0,0,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,3,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,0,3,3,3,13,13,13,13,13,13,13,6,13,13],[0,1,3,3,3,13,13,31,6,13,13,13,6,13,13],[1,1,1,3,3,13,13,31,31,13,13,13,6,13,13],[1,1,0,3,3,13,13,13,13,13,13,13,13,13,13],[1,0,0,0,3,13,13,13,13,13,13,13,13,13,13],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ];
    art[-4]=[
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,42,47,47,47,47,47,47,47],[0,0,0,0,0,0,42,42,47,6,47,47,47,47,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,47,47,47,1,1,47],[0,0,0,0,0,0,42,42,47,6,47,47,47,47,47],[0,0,0,0,0,0,0,42,47,47,47,47,47,47,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ];
    art[-5]=[
        [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,1,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,1,1,1,4,4,4],[4,4,6,6,4,6,6,4,4,1,1,1,1,1,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,1,1,1,1,1,4],[4,4,4,4,4,4,4,4,4,1,1,1,4,4,4],[4,4,6,6,4,6,6,4,4,1,4,4,4,4,4],[4,4,6,6,4,6,6,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
        ];
    art[-6]=[
        [0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,26,26,26,0,0],[0,0,0,0,0,0,0,0,0,26,26,26,26,26,0],[0,0,0,0,0,0,0,0,26,26,26,26,26,26,26],[0,0,0,0,0,0,0,26,26,26,26,26,26,26,0],[0,0,0,0,0,0,26,26,26,26,26,26,26,0,0],[0,0,0,0,0,26,26,26,26,26,26,26,0,0,0],[0,0,0,0,26,26,26,26,26,26,26,0,0,0,0],[0,0,0,26,26,26,26,26,26,26,0,0,0,0,0],[0,0,26,26,26,26,26,26,26,0,0,0,0,0,0],[0,26,26,26,26,26,26,26,0,0,0,0,0,0,0],[26,26,26,26,26,26,26,0,0,0,0,0,0,0,0],[26,26,26,26,26,26,0,0,0,0,0,0,0,0,0],[26,26,26,26,26,0,0,0,0,0,0,0,0,0,0],[26,26,26,26,0,0,0,0,0,0,0,0,0,0,0],
        ];
    art[-7]=[
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],[0,0,0,0,0,0,0,0,0,0,0,0,0,42,42],[0,0,0,0,0,0,0,0,0,0,42,42,42,42,27],[0,0,0,0,0,0,0,0,0,42,42,27,27,27,27],[0,0,0,0,0,0,0,0,42,42,27,27,12,12,12],[0,0,0,0,42,42,42,42,42,27,27,12,12,47,47],[0,0,0,42,42,27,27,27,27,27,12,12,47,47,1],[0,0,0,42,42,27,27,12,12,12,12,47,47,1,1],[0,0,0,0,42,42,27,27,27,12,12,47,47,47,1],[0,0,0,0,0,42,42,42,27,27,12,12,12,47,47],[0,0,0,0,0,0,0,42,42,42,27,27,12,12,12],[0,0,0,0,0,0,0,0,0,42,42,27,27,27,12],[0,0,0,0,0,0,0,0,0,0,42,42,42,27,27],[0,0,0,0,0,0,0,0,0,0,0,0,42,42,42],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],
        ];
    art[-8]=[
        [0,0,0,0,32,0,0,0,32,0,0,32,0,0,0],[0,32,0,0,0,0,32,0,0,0,0,0,0,32,0],[0,0,0,32,0,0,1,1,1,1,1,0,32,0,32],[0,32,0,0,0,1,22,49,49,49,22,1,0,0,0],[0,0,0,0,1,22,25,22,25,49,25,25,1,0,0],[1,1,1,1,1,22,49,49,25,22,22,49,22,1,0],[1,0,0,0,1,22,49,25,49,25,49,25,49,22,1],[1,0,0,0,1,25,49,25,49,25,22,25,22,25,1],[1,0,0,0,1,22,49,22,25,49,25,49,22,49,1],[1,1,1,1,1,22,22,49,25,25,25,49,22,1,0],[0,0,0,0,1,22,25,49,49,22,49,22,1,0,32],[0,32,0,0,0,1,22,25,22,49,25,1,0,32,0],[0,0,0,32,0,0,1,1,1,1,1,0,0,0,0],[0,32,0,0,0,32,0,0,0,0,0,0,32,0,32],[0,0,0,0,0,0,0,0,32,0,32,0,0,0,0],
        ];
    art[-9]=[
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,42,42,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,30,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,6,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,30,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,42,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,42,42,30,30,30,30,30,30],[0,0,0,0,0,0,42,42,42,0,0,30,30,30,30],[0,0,0,0,0,0,42,42,42,0,0,0,0,30,30],[0,0,0,0,0,0,42,42,42,0,0,0,0,0,0],[0,0,0,0,0,0,42,42,42,0,0,0,0,0,0],
        ];
    art[-10]=[
        [0,0,0,0,0,0,42,42,42,0,0,0,0,0,0],[0,0,0,0,0,0,42,42,42,0,0,0,0,0,0],[0,0,0,0,0,0,42,42,42,0,0,0,0,30,30],[0,0,0,0,0,0,42,42,42,0,0,30,30,30,30],[0,0,0,0,0,42,42,42,42,30,30,30,30,30,30],[0,0,0,0,0,42,42,42,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,30,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,6,30,30,30,30,30,30,30],[0,0,0,0,0,42,42,30,30,30,30,30,30,30,30],[0,0,0,0,0,0,42,42,30,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ];
    art[-11]=[
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,42,42,42,42,30,30,30,30,30,30,30],[42,42,42,42,42,42,42,30,30,30,30,30,30,30,30],[42,42,42,42,42,42,42,6,30,30,30,30,30,30,30],[42,42,42,42,42,42,42,30,30,30,30,30,30,30,30],[0,0,0,0,42,42,42,42,30,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,30,30,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ];
    art[-12]=[
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,31,31,1,1,1,1,1,1,1,1,1,1],[1,1,1,31,31,1,1,1,1,1,6,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,6,1,1,1,1],[1,1,1,1,1,1,1,6,6,1,6,1,1,1,1],[1,1,1,1,1,1,1,6,6,6,6,1,1,1,1],[1,1,1,1,1,1,1,6,6,1,6,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,6,1,1,1,1],[1,1,1,31,31,1,1,1,1,1,6,1,1,1,1],[1,1,1,31,31,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        ];
    art[-13]=[
        [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,6,6,3,3,3,3,3,3,3,3,3,3,3],[3,3,6,31,31,3,3,3,3,3,3,6,3,3,3],[3,3,3,31,6,3,3,3,3,3,3,6,1,3,3],[3,3,3,3,3,3,3,6,6,3,3,6,1,1,3],[3,3,3,3,3,3,3,6,6,6,3,6,3,3,3],[3,3,3,3,3,3,3,6,6,3,3,6,1,1,3],[3,3,3,31,6,3,3,3,3,3,3,6,1,3,3],[3,3,6,31,31,3,3,3,3,3,3,6,3,3,3],[3,3,6,6,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
        ];
    art[-14]=[
        [6,6,6,6,1,6,6,6,6,6,6,6,6,6,6],[6,6,6,1,6,1,6,6,6,6,6,6,6,1,1],[1,1,6,6,1,6,6,6,6,6,6,6,1,1,1],[1,1,1,1,6,6,6,6,6,6,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,6,1],[1,1,1,1,1,1,1,1,1,1,1,1,6,6,6],[1,1,1,1,1,1,1,1,1,1,1,1,6,6,6],[1,1,1,1,1,1,1,1,1,1,1,1,6,6,6],[1,1,1,1,1,1,1,1,1,1,1,1,6,6,6],[1,1,1,1,1,1,1,1,1,1,1,1,6,6,6],[1,1,1,1,1,1,1,1,1,1,1,1,1,6,1],[1,1,1,1,6,6,6,6,6,6,1,1,1,1,1],[1,1,6,6,1,6,6,6,6,6,6,6,1,1,1],[6,6,6,1,6,1,6,6,6,6,6,6,6,1,1],[6,6,6,6,1,6,6,6,6,6,6,6,6,6,6],
        ];
    art[-15]=[
        
[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,6,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,6,22,22,22],[22,22,22,22,22,22,22,6,6,22,22,6,22,22,22],[22,22,22,22,22,22,22,6,6,22,22,6,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,6,22,22,22],[22,22,22,22,22,22,22,6,6,22,22,6,22,22,22],[22,22,22,22,22,22,22,6,6,22,22,6,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,6,22,22,22],[22,22,22,6,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],
        ];
    art[-16]=[
        
[0,0,0,0,0,4,4,4,4,4,0,0,0,0,0],[0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,0,0,4,0,0,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,4,4,3,3,4,4,4,0,0,0,0,0],[0,0,0,0,4,3,3,4,4,3,0,0,0,0,0],[0,0,0,0,0,3,3,4,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,0,6,3,3,0,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,3,0,0,0,0,0,0,0],
        ];
    art[-17]=[
        [0,0,0,0,0,0,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,0,6,3,3,0,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,4,3,3,0,0,0,0,0],[0,0,0,0,4,3,3,4,4,3,0,0,0,0,0],[0,0,0,4,4,3,3,4,4,4,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,4,0,0,0,0,0,0,0],[0,0,0,0,0,0,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,4,4,4,4,4,0,0,0,0,0],
        ];
    art[-18]=[
        [0,0,0,0,5,5,0,0,0,5,5,0,0,0,0],[0,0,0,0,0,5,5,5,5,5,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,6,6,6,0,0,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,5,5,0,0,0],[0,0,5,5,5,6,6,6,6,6,5,0,0,0,0],[0,0,0,5,5,6,6,6,6,6,0,0,0,0,0],[0,0,0,5,5,6,6,5,5,5,0,0,0,0,0],[0,0,0,0,5,6,6,5,5,6,0,0,0,0,0],[0,0,0,0,0,6,6,5,6,6,0,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,0,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,0,0,0,0,0],[0,0,0,0,0,0,42,6,1,6,0,0,0,0,0],[0,0,0,0,0,0,6,6,1,0,0,0,0,0,0],[0,0,0,0,0,0,6,6,0,0,0,0,0,0,0],
        ];
    art[-19]=[
        [0,0,0,0,0,0,6,6,0,0,0,0,0,0,0],[0,0,0,0,0,0,6,6,1,0,0,0,0,0,0],[0,0,0,0,0,0,42,6,1,6,0,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,0,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,0,0,0,0,0],[0,0,0,0,0,6,6,5,6,6,0,0,0,0,0],[0,0,0,0,5,6,6,5,5,6,0,0,0,0,0],[0,0,0,5,5,6,6,5,5,5,0,0,0,0,0],[0,0,0,5,5,6,6,6,6,6,0,0,0,0,0],[0,0,5,5,5,6,6,6,6,6,5,0,0,0,0],[0,0,0,0,0,6,6,6,6,6,5,5,0,0,0],[0,0,0,0,0,0,6,6,6,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,5,5,5,5,5,0,0,0,0,0],[0,0,0,0,5,5,0,0,0,5,5,0,0,0,0],
        ];
var tArt=[
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,31,0,30,30,30,0,0,0,0,0,0,0,0],[0,31,31,30,30,30,0,0,0,0,0,0,0,0,0],[31,31,31,31,30,0,0,0,0,0,0,0,0,0,0],[31,31,31,31,31,31,0,0,0,0,0,0,0,0,0],[31,31,31,31,31,0,0,0,0,0,0,0,0,0,0],[31,31,31,31,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,37,0,30,30,30,0,0,0,0,0,0,0,0],[0,37,37,30,30,30,0,0,0,0,0,0,0,0,0],[37,37,37,37,30,0,0,0,0,0,0,0,0,0,0],[37,37,37,37,37,37,0,0,0,0,0,0,0,0,0],[37,37,37,37,37,0,0,0,0,0,0,0,0,0,0],[37,37,37,37,0,0,0,0,0,0,0,0,0,0,0],

        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,1,0,30,30,30,0,0,0,0,0,0,0,0],[0,1,1,30,30,30,0,0,0,0,0,0,0,0,0],[1,1,1,1,30,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,3,0,30,30,30,0,0,0,0,0,0,0,0],[0,3,3,30,30,30,0,0,0,0,0,0,0,0,0],[3,3,3,3,30,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,17,0,30,30,30,0,0,0,0,0,0,0,0],[0,17,17,30,30,30,0,0,0,0,0,0,0,0,0],[17,17,17,17,30,0,0,0,0,0,0,0,0,0,0],[17,17,17,17,17,17,0,0,0,0,0,0,0,0,0],[17,17,17,17,17,0,0,0,0,0,0,0,0,0,0],[17,17,17,17,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,32,0,30,30,30,0,0,0,0,0,0,0,0],[0,32,32,30,30,30,0,0,0,0,0,0,0,0,0],[32,32,32,32,30,0,0,0,0,0,0,0,0,0,0],[32,32,32,32,32,32,0,0,0,0,0,0,0,0,0],[32,32,32,32,32,0,0,0,0,0,0,0,0,0,0],[32,32,32,32,0,0,0,0,0,0,0,0,0,0,0],
        ],
    
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,31,31,31,31,0,0,0,0,0],[0,0,0,30,30,31,31,31,31,31,0,0,0,0,0],[0,0,0,0,0,31,31,31,31,0,0,0,0,0,0],[0,0,0,0,0,31,31,31,0,0,0,0,0,0,0],[0,0,0,0,0,31,31,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,37,37,37,37,0,0,0,0,0],[0,0,0,30,30,37,37,37,37,37,0,0,0,0,0],[0,0,0,0,0,37,37,37,37,0,0,0,0,0,0],[0,0,0,0,0,37,37,37,0,0,0,0,0,0,0],[0,0,0,0,0,37,37,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,1,1,1,1,0,0,0,0,0],[0,0,0,30,30,1,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,3,3,3,3,0,0,0,0,0],[0,0,0,30,30,3,3,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,3,3,3,0,0,0,0,0,0,0],[0,0,0,0,0,3,3,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,17,17,17,17,0,0,0,0,0],[0,0,0,30,30,17,17,17,17,17,0,0,0,0,0],[0,0,0,0,0,17,17,17,17,0,0,0,0,0,0],[0,0,0,0,0,17,17,17,0,0,0,0,0,0,0],[0,0,0,0,0,17,17,0,0,0,0,0,0,0,0],
        ],
    [
[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[0,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[0,0,0,0,0,30,30,30,0,0,0,0,0,0,0],[0,0,0,0,30,30,30,0,0,0,0,0,0,0,0],[0,0,0,30,30,30,32,32,32,32,0,0,0,0,0],[0,0,0,30,30,32,32,32,32,32,0,0,0,0,0],[0,0,0,0,0,32,32,32,32,0,0,0,0,0,0],[0,0,0,0,0,32,32,32,0,0,0,0,0,0,0],[0,0,0,0,0,32,32,0,0,0,0,0,0,0,0],
        ],
        
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[31,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[31,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[31,31,0,0,0,30,30,30,0,0,0,0,0,0,0],[31,31,0,0,30,30,30,0,0,0,0,0,0,0,0],[31,31,31,30,30,30,0,0,0,0,0,0,0,0,0],[0,31,31,30,30,0,0,0,0,0,0,0,0,0,0],[0,31,31,31,31,0,0,0,0,0,0,0,0,0,0],[0,0,31,31,31,31,31,0,0,0,0,0,0,0,0],[0,0,0,0,31,31,31,31,31,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[37,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[37,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[37,37,0,0,0,30,30,30,0,0,0,0,0,0,0],[37,37,0,0,30,30,30,0,0,0,0,0,0,0,0],[37,37,37,30,30,30,0,0,0,0,0,0,0,0,0],[0,37,37,30,30,0,0,0,0,0,0,0,0,0,0],[0,37,37,37,37,0,0,0,0,0,0,0,0,0,0],[0,0,37,37,37,37,37,0,0,0,0,0,0,0,0],[0,0,0,0,37,37,37,37,37,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[1,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[1,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[1,1,0,0,0,30,30,30,0,0,0,0,0,0,0],[1,1,0,0,30,30,30,0,0,0,0,0,0,0,0],[1,1,1,30,30,30,0,0,0,0,0,0,0,0,0],[0,1,1,30,30,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,1,1,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[3,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[3,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[3,3,0,0,0,30,30,30,0,0,0,0,0,0,0],[3,3,0,0,30,30,30,0,0,0,0,0,0,0,0],[3,3,3,30,30,30,0,0,0,0,0,0,0,0,0],[0,3,3,30,30,0,0,0,0,0,0,0,0,0,0],[0,3,3,3,3,0,0,0,0,0,0,0,0,0,0],[0,0,3,3,3,3,3,0,0,0,0,0,0,0,0],[0,0,0,0,3,3,3,3,3,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[17,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[17,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[17,17,0,0,0,30,30,30,0,0,0,0,0,0,0],[17,17,0,0,30,30,30,0,0,0,0,0,0,0,0],[17,17,17,30,30,30,0,0,0,0,0,0,0,0,0],[0,17,17,30,30,0,0,0,0,0,0,0,0,0,0],[0,17,17,17,17,0,0,0,0,0,0,0,0,0,0],[0,0,17,17,17,17,17,0,0,0,0,0,0,0,0],[0,0,0,0,17,17,17,17,17,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[32,0,0,0,0,0,0,30,30,30,0,0,0,0,0],[32,0,0,0,0,0,30,30,30,0,0,0,0,0,0],[32,32,0,0,0,30,30,30,0,0,0,0,0,0,0],[32,32,0,0,30,30,30,0,0,0,0,0,0,0,0],[32,32,32,30,30,30,0,0,0,0,0,0,0,0,0],[0,32,32,30,30,0,0,0,0,0,0,0,0,0,0],[0,32,32,32,32,0,0,0,0,0,0,0,0,0,0],[0,0,32,32,32,32,32,0,0,0,0,0,0,0,0],[0,0,0,0,32,32,32,32,32,0,0,0,0,0,0],
        ],
        
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,31,30,30,30,0,0,0],[0,0,0,0,0,0,0,31,31,31,30,30,30,0,0],[0,0,0,0,0,0,31,31,31,31,31,30,30,30,0],[0,0,0,0,0,31,31,31,31,31,0,0,30,30,0],[0,0,0,0,31,31,31,31,31,0,0,0,0,0,0],[0,0,0,31,31,31,31,31,0,0,0,0,0,0,0],[0,0,31,31,31,31,31,0,0,0,0,0,0,0,0],[0,31,31,31,31,31,0,0,0,0,0,0,0,0,0],[31,31,31,31,31,0,0,0,0,0,0,0,0,0,0],[31,31,31,31,0,0,0,0,0,0,0,0,0,0,0],[31,31,31,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,37,30,30,30,0,0,0],[0,0,0,0,0,0,0,37,37,37,30,30,30,0,0],[0,0,0,0,0,0,37,37,37,37,37,30,30,30,0],[0,0,0,0,0,37,37,37,37,37,0,0,30,30,0],[0,0,0,0,37,37,37,37,37,0,0,0,0,0,0],[0,0,0,37,37,37,37,37,0,0,0,0,0,0,0],[0,0,37,37,37,37,37,0,0,0,0,0,0,0,0],[0,37,37,37,37,37,0,0,0,0,0,0,0,0,0],[37,37,37,37,37,0,0,0,0,0,0,0,0,0,0],[37,37,37,37,0,0,0,0,0,0,0,0,0,0,0],[37,37,37,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,1,30,30,30,0,0,0],[0,0,0,0,0,0,0,1,1,1,30,30,30,0,0],[0,0,0,0,0,0,1,1,1,1,1,30,30,30,0],[0,0,0,0,0,1,1,1,1,1,0,0,30,30,0],[0,0,0,0,1,1,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,3,30,30,30,0,0,0],[0,0,0,0,0,0,0,3,3,3,30,30,30,0,0],[0,0,0,0,0,0,3,3,3,3,3,30,30,30,0],[0,0,0,0,0,3,3,3,3,3,0,0,30,30,0],[0,0,0,0,3,3,3,3,3,0,0,0,0,0,0],[0,0,0,3,3,3,3,3,0,0,0,0,0,0,0],[0,0,3,3,3,3,3,0,0,0,0,0,0,0,0],[0,3,3,3,3,3,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,0,0,0,0,0,0,0,0,0,0,0],[3,3,3,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,17,30,30,30,0,0,0],[0,0,0,0,0,0,0,17,17,17,30,30,30,0,0],[0,0,0,0,0,0,17,17,17,17,17,30,30,30,0],[0,0,0,0,0,17,17,17,17,17,0,0,30,30,0],[0,0,0,0,17,17,17,17,17,0,0,0,0,0,0],[0,0,0,17,17,17,17,17,0,0,0,0,0,0,0],[0,0,17,17,17,17,17,0,0,0,0,0,0,0,0],[0,17,17,17,17,17,0,0,0,0,0,0,0,0,0],[17,17,17,17,17,0,0,0,0,0,0,0,0,0,0],[17,17,17,17,0,0,0,0,0,0,0,0,0,0,0],[17,17,17,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,30,30,0,0,0,30,30,30],[0,0,0,0,0,0,0,30,30,30,0,30,30,30,0],[0,0,0,0,0,0,0,0,30,30,30,30,30,0,0],[0,0,0,0,0,0,0,0,32,30,30,30,0,0,0],[0,0,0,0,0,0,0,32,32,32,30,30,30,0,0],[0,0,0,0,0,0,32,32,32,32,32,30,30,30,0],[0,0,0,0,0,32,32,32,32,32,0,0,30,30,0],[0,0,0,0,32,32,32,32,32,0,0,0,0,0,0],[0,0,0,32,32,32,32,32,0,0,0,0,0,0,0],[0,0,32,32,32,32,32,0,0,0,0,0,0,0,0],[0,32,32,32,32,32,0,0,0,0,0,0,0,0,0],[32,32,32,32,32,0,0,0,0,0,0,0,0,0,0],[32,32,32,32,0,0,0,0,0,0,0,0,0,0,0],[32,32,32,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,3,3,3,3,3,3,3,3,3,3,0,0],[0,0,3,4,3,3,3,3,3,3,3,3,3,3,0],[0,3,4,4,4,3,3,3,3,3,3,3,3,3,3],[0,3,4,4,4,3,3,3,3,3,3,3,3,3,3],[3,4,4,4,4,4,3,3,3,3,3,3,3,3,3],[3,4,4,4,4,4,3,3,3,3,3,3,3,3,3],[3,4,4,4,4,4,3,3,3,3,3,3,3,3,3],[0,3,4,4,4,3,3,3,3,3,3,3,3,3,3],[0,3,4,4,4,3,3,3,3,3,3,3,3,3,3],[0,0,3,4,3,3,3,3,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,3,3,3,3,3,3,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],
    
    [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,4,0,0,0,0,30,30,30,0,0,0,0,0],[0,4,4,4,0,0,30,30,30,0,0,0,0,0,0],[4,4,4,4,4,30,30,30,0,0,0,0,0,0,0],[0,4,4,4,4,4,30,0,0,0,0,0,0,0,0],[0,0,4,4,4,4,4,0,0,0,0,0,0,0,0],[0,0,0,4,4,4,4,4,0,0,0,0,0,0,0],[0,0,0,0,4,4,4,4,4,0,0,0,0,0,0],[0,0,0,0,0,4,4,4,0,0,0,0,0,0,0],[0,0,0,0,0,0,4,0,0,0,0,0,0,0,0],
    ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,1,0,0,0,0,30,30,30,0,0,0,0,0],[0,1,1,1,0,0,30,30,30,0,0,0,0,0,0],[1,1,1,1,1,30,30,30,0,0,0,0,0,0,0],[0,1,1,1,1,1,30,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,3,0,0,0,0,30,30,30,0,0,0,0,0],[0,3,3,3,0,0,30,30,30,0,0,0,0,0,0],[3,3,3,3,3,30,30,30,0,0,0,0,0,0,0],[0,3,3,3,3,3,30,0,0,0,0,0,0,0,0],[0,0,3,3,3,3,3,0,0,0,0,0,0,0,0],[0,0,0,3,3,3,3,3,0,0,0,0,0,0,0],[0,0,0,0,3,3,3,3,3,0,0,0,0,0,0],[0,0,0,0,0,3,3,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,3,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,12,0,0,0,0,30,30,30,0,0,0,0,0],[0,12,12,12,0,0,30,30,30,0,0,0,0,0,0],[12,12,12,12,12,30,30,30,0,0,0,0,0,0,0],[0,12,12,12,12,12,30,0,0,0,0,0,0,0,0],[0,0,12,12,12,12,12,0,0,0,0,0,0,0,0],[0,0,0,12,12,12,12,12,0,0,0,0,0,0,0],[0,0,0,0,12,12,12,12,12,0,0,0,0,0,0],[0,0,0,0,0,12,12,12,0,0,0,0,0,0,0],[0,0,0,0,0,0,12,0,0,0,0,0,0,0,0],
        ],
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,17,0,0,0,0,30,30,30,0,0,0,0,0],[0,17,17,17,0,0,30,30,30,0,0,0,0,0,0],[17,17,17,17,17,30,30,30,0,0,0,0,0,0,0],[0,17,17,17,17,17,30,0,0,0,0,0,0,0,0],[0,0,17,17,17,17,17,0,0,0,0,0,0,0,0],[0,0,0,17,17,17,17,17,0,0,0,0,0,0,0],[0,0,0,0,17,17,17,17,17,0,0,0,0,0,0],[0,0,0,0,0,17,17,17,0,0,0,0,0,0,0],[0,0,0,0,0,0,17,0,0,0,0,0,0,0,0],
        ],
    [
        
[0,0,0,0,0,0,0,0,0,0,0,0,0,30,30],[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30],[0,0,0,0,0,0,0,0,0,0,0,30,30,30,0],[0,0,0,0,0,0,0,0,0,0,30,30,30,0,0],[0,0,0,0,0,0,0,0,0,30,30,30,0,0,0],[0,0,0,0,0,0,0,0,30,30,30,0,0,0,0],[0,0,32,0,0,0,0,30,30,30,0,0,0,0,0],[0,32,32,32,0,0,30,30,30,0,0,0,0,0,0],[32,32,32,32,32,30,30,30,0,0,0,0,0,0,0],[0,32,32,32,32,32,30,0,0,0,0,0,0,0,0],[0,0,32,32,32,32,32,0,0,0,0,0,0,0,0],[0,0,0,32,32,32,32,32,0,0,0,0,0,0,0],[0,0,0,0,32,32,32,32,32,0,0,0,0,0,0],[0,0,0,0,0,32,32,32,0,0,0,0,0,0,0],[0,0,0,0,0,0,32,0,0,0,0,0,0,0,0],
        ],
    ];
var cols=[    
    color(255,0),
    color(255),
    color(200),
    color(150),
    color(100),
    color(50),
    color(0),
    color(0,255,0),
    color(0,205,0),
    color(0,155,0),
    color(0,105,0),
    color(0,55,0),
    color(255,255,0),
    color(205,205,0),
    color(155,155,0),
    color(105,105,0),
    color(55,55,0),
    color(0,255,255),
    color(0,205,205),
    color(0,155,155),
    color(0,105,105),
    color(0,55,55),
    color(255,0,255),
    color(205,0,205),
    color(155,0,155),
    color(105,0,105),
    color(55,0,55),
    color(255, 145, 0),
    color(255*4/5, 145*4/5, 0),
    color(255*3/5, 145*3/5, 0),
    color(255*2/5, 145*2/5, 0),
    color(255*1/5, 145*1/5, 0),
    color(21, 219, 124),
    color(21*4/5, 219*4/5, 124*4/5),
    color(21*3/5, 219*3/5, 124*3/5),
    color(21*2/5, 219*2/5, 124*2/5),
    color(21*1/5, 219*1/5, 124*1/5),
    color(140, 61, 0),
    color(140*4/5, 61*4/5, 0),
    color(140*3/5, 61*3/5, 0),
    color(140*2/5, 61*2/5, 0),
    color(140*1/5, 61*1/5, 0),
    color(255, 0, 0),
    color(205, 0, 0),
    color(155, 0, 0),
    color(105, 0, 0),
    color(55, 0, 0),
    color(0, 0, 255),
    color(0, 0, 205),
    color(0, 0, 155),
    color(0, 0, 105),
    color(0, 0, 55),
    ];
var createArt=function(k){
    background(255,0);
    noStroke();
    for(var i=0;i< art[k].length;i++){
        for(var j=0;j<art[k][i].length;j++){
            if(k===4){
                if(negative){
                    fill(255-red(cols[art[k][i][j]]),255-green(cols[art[k][i][j]]),255-blue(cols[art[k][i][j]]),200);
                }
                else{
                fill(cols[art[k][i][j]],200);
                }
            }
            else if(k===48){
                if(negative){
                    fill(255-red(cols[art[k][i][j]]),255-green(cols[art[k][i][j]]),255-blue(cols[art[k][i][j]]),100);
                }
                else{
                fill(cols[art[k][i][j]],100);
                }
            }
            else{
            if(negative){
                    fill(255-red(cols[art[k][i][j]]),255-green(cols[art[k][i][j]]),255-blue(cols[art[k][i][j]]),alpha(cols[art[k][i][j]]));
                }
                else{
                fill(cols[art[k][i][j]]);
                }
            }
            rect(i*20,j*20,20,20);
        }
    }
    graphics[k]=get(0,0,art[k].length*20,art[k][0].length*20);
    
};
createArt(-1);
createArt(-2);
createArt(-3);
createArt(-4);
createArt(-5);
createArt(-6);
createArt(-7);
createArt(-8);
createArt(-9);
createArt(-10);
createArt(-11);
createArt(-12);
createArt(-13);
createArt(-14);
createArt(-15);
createArt(-16);
createArt(-17);
createArt(-18);
createArt(-19);
var createToolArt=function(k){
    background(255,0);
    noStroke();
    for(var i=0;i< tArt[k].length;i++){
        for(var j=0;j<tArt[k][i].length;j++){
            if(negative){
                fill(255-red(cols[tArt[k][i][j]]),255-green(cols[tArt[k][i][j]]),255-blue(cols[tArt[k][i][j]]),alpha(cols[tArt[k][i][j]]));
            }
            else{
            fill(cols[tArt[k][i][j]]);
            }
            rect(i*20,j*20,20,20);
        }
    }
    toolGs[k+1]=get(0,0,tArt[k].length*20,tArt[k][0].length*20);
    
};
var world=[
            ];
            
var sections=[
        [
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , ,0,0,0,0, , , , , , , , , ",
                " , , , , ,0,0,0,0,0,0,0,0, , , , , , , ",
                " , , , ,0,0,0, , , , ,0,0,0, , , , , , ",
                " , , ,0,0,0, , , , , , ,0,0,0, , , , , ",
                " , , ,0,0,0, ,129, , ,129, ,0,0,0, , , , , ",
                "0,0,0,0,0,0,0,0,37,37,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                ],
        [
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                "123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123",
                "123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123",
                "123, , , , , , , , , , , , , , , , , , ,123",
                "123,55, , , ,55,12, , ,128,128, , ,12,55, , , , ,123",
                "123, , , , , ,12, , ,38,38, , ,12, , , , , ,123",
                "123,56, , , ,55,12, , , , , , ,12,55, , , ,56,77",
                "123, , , , , ,12,12,12,12,12,12,12,12, , , , , ,123",
                "123, , , , , , , , , , , , , , , , , , ,123",
                "123, , , , , , , , , , , , , , , , , , ,123",
                "123, , , , , , , , , , , , , , , , , ,55,123",
                "123,23,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,123",
                "123,23,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,123",
                "123,23, , , , , , , , , , , , , , , , , ,123",
                "123,23, ,37, , ,37, , ,37, , , ,37, , , , , ,123",
                "123,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46, ,123",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , ,36, , ,36, , , , ,129, ",
                "123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                ],
        [
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , ,7, , ",
                " ,7,68,7, ",
                "7,7,68,7,7",
                " , ,68, , ",
                " , ,68, , ",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                ],
        [
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                "6,23,6,6,6,6,6,6,23,6",
                "6,23, , , , , , ,23,6",
                "6,23, , , , , , ,23,6",
                "6,23,36, ,38,38, ,36,23,6",
                "6,6,6,6,6,6,6,6,6,6",
                ],
        [
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , ,1,1,1,1, , , , , , , , ",
                " , , , , , ,1,1,1,1,1,1,1,1, , , , , , ",
                " , , , ,1,1,1,1,1,1,1,1,1,1,1,1, , , , ",
                " , ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, , ",
                "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                "6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6",
                "6, , , , , , , , ,23,23, , , , , , , , ,6",
                "6, , , , , , , , ,23,23, , , , , , , , ,6",
                "6, ,37,38,37, , , , ,23,23, , , , ,37,38,37, ,6",
                "6,1,1,1,1,1,1,1,1,23,23,1,1,1,1,1,1,1,1,6",
                "6, , , , , , , , ,23,23, , , , , , , , ,6",
                "6,36,36,37, , , , , ,23,23, , , , , ,37,36,36,6",
                "6,1,1,1,1,1,1,1,1,23,23,1,1,1,1,1,1,1,1,6",
                "6, , , , , , , , ,23,23, , , , , , , , ,6",
                " , , , , , , , , ,23,23, , , , , , , , , ",
                "6,6,6,6,6,6,6,6,37,23,23,37,6,6,6,6,6,6,6,6",
                "6,6,6,6,6,6,6,6,6,23,23,6,6,6,6,6,6,6,6,6",
                "6, , , , , , , , ,23,23, , , , , , , , ,6",
                "6, , , ,38, ,36, , ,23,23, , ,36, ,38, , , ,6",
                "6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6",
                ],
        [
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , , , , , , ",
                " , , , , , , , ,7,7,7,7, , , , , , , , ",
                " , , , , , , ,7,7, , ,7,7, , , , , , , ",
                " , , , , , ,7,7, , , , ,7,7, , , , , , ",
                " , , , , , ,1, , , , , , ,1, , , , , , ",
                " , , , , , ,1, , , , , , ,1, , , , , , ",
                " , , , , , ,1, , , , , , ,1, , , , , , ",
                " , , , , , ,1,37,38, , ,38,37,1, , , , , , ",
                " , , , , , ,68,68,68,23,68,68,68,68, , , , , , ",
                " , , , , , , , ,1,23,23,1, , , , , , , , ",
                " , , , , , , , ,1,68,23,1, , , , , , , , ",
                " , , , , , , , ,1,23,23,1, , , , , , , , ",
                "1,1, , , , , , ,1,23,68,1, , , , , , ,1,1",
                "1,1,1, , , , , ,1,23,23,1, , , , , ,1,1,1",
                "1,1,1,1, , , , ,1,68,23,1, , , , ,1,1,1,1",
                "1,1, ,1,1, , , ,1,23,23,1, , , ,1,1, ,1,1",
                "1,1, , ,1,37, , , ,23,68,1, , ,37,1, , ,1,1",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                ],
        [
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , ,7,7,7,7, , , ",
                " , , ,7,1,1,7, , , ",
                " , , ,7,1,1,7, , , ",
                " , , ,2, , ,2, , , ",
                " , , ,2, , ,2, , , ",
                " , ,2,2, , ,2,2, , ",
                " , ,2, , , , ,2, , ",
                " ,2,2,55, , ,55,2,2, ",
                " ,2, , , , , , ,2, ",
                "2,2,55, , , , ,55,2,2",
                "2, , , ,55,55, , , ,2",
                "2, , , ,38,38, , , ,2",
                "2,55,55,55, , ,55,55,55,2",
                "2,2,2,2,2,2,2,2,2,2",
                ],
        [
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , ,57,57, , , , ",
                " , , ,57,57,57,57, , , ",
                " , ,57,57,57,57,57,57, , ",
                " ,57,57,57,57,57,57,57,57, ",
                "57,57,57,57,57,57,57,57,57,57",
                "57,57,57,57,57,57,57,57,57,57",
                "57,57,57,57,57,57,57,57,57,57",
                "57,57,57,57,56,56,57,57,57,57",
                " ,57,57,57,45,45,57,57,57, ",
                " , ,57,57,45,45,57,57, , ",
                " , , ,57,45,45,57, , , ",
                " , , , ,45,45, , , , ",
                " , , , ,45,45, , , , ",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                ],
        
    ];
    for(var i=0;i<10-difficulty;i++){
        sections.push([
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                ]);
        sections.push([
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                " , , , , , , , , , , , , , , ",
                "0,0,4,4,4,4,4,4,4,4,4,4,4,0,0",
                "0,0,0,4,4,4,4,4,4,4,4,4,0,0,0",
                "0,0,0,0,4,4,4,4,4,4,4,0,0,0,0",
                "0,0,0,0,0,4,4,4,4,4,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            ]);
        sections.push([
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , , , , ",
                " , ,7, , ",
                " ,7,1,7, ",
                "7,7,1,7,7",
                " ,40,1,40, ",
                " , ,1, , ",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                "0,0,0,0,0",
                ]);
        sections.push([
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , ,7,7, , , , ",
                " , , ,7,7,7,7, , , ",
                " , ,7,7,1,1,7,7, , ",
                " ,7,7,7,1,1,7,7,7, ",
                "7,7,7,7,1,1,7,7,7,7",
                " ,40, ,40,1,1,40, ,40, ",
                " , , , ,1,1, , , , ",
                " , , , ,1,1, , , , ",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
                "0,0,0,0,0,0,0,0,0,0",
            ]);
    }
    var oTop=[
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                ];
    var oLeft=[
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                "2,2,2,2,2,2,4,4,4,4",
                "2,2,2,2,2,2,2,4,4,4",
                "2,2,2,2,2,2,2,2,4,4",
                "2,2,2,2,2,2,2,2,2,4",
                "2,2,2,2,2,2,2,2,2,2",
                ];
    var oRight=[
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                " , , , , , , , , , ",
                "4,4,4,4,2,2,2,2,2,2",
                "4,4,4,2,2,2,2,2,2,2",
                "4,4,2,2,2,2,2,2,2,2",
                "4,2,2,2,2,2,2,2,2,2",
                "2,2,2,2,2,2,2,2,2,2",
                ];
var osections=[
        [
                "4,4,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,4,4",
                "4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4",
                "4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4",
                "4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4",
                "4,4,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,123,5,5,5,5,123,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,123,5,5,5,5,123,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,123,123,5,5,5,5,123,123,4,4,4,4,4,4",
                "4,4,4,4,4,4,123,123,5,5,5,5,123,123,4,4,4,4,4,4",
                "4,4,4,4,4,123,123,123,5,5,5,5,123,123,123,4,4,4,4,4",
                "4,4,4,4,4,123,123,123,5,5,5,5,123,123,123,4,4,4,4,4",
                "2,2,2,2,123,123,123,123,5,5,5,5,123,123,123,123,2,2,2,2",
                "2,2,2,2,123,123,123,123,5,5,5,5,123,123,123,123,2,2,2,2",
                "2,2,2,2,123,123,123,123,5,5,5,5,123,123,123,123,2,2,2,2",
                "2,2,2,2,123,123,123,123,5,5,5,5,123,123,123,123,2,2,2,2",
                "2,2,2,2,123,123,123,123,5,5,5,5,123,123,123,123,2,2,2,2",
                ],
        [
"123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,4,4,20,4,128,4,20,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,4,4,20,4,128,4,20,4,4,4,4,4,4,4,4,132,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,132,4,20,20,20,20,20,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,132,4,4,4,4,4,4,132,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,132,4,4,4,6,6,6,6,6,4,4,123",
"123,4,4,4,4,4,4,132,4,4,4,4,4,4,132,4,4,4,4,4,6,6,6,4,4,4,6,4,4,123",
"123,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,6,6,6,6,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,6,132,6,4,4,4,123",
"123,4,4,4,4,132,4,4,132,4,4,132,4,4,4,4,132,4,4,4,4,4,4,6,4,4,4,6,4,123",
"123,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,123",
"123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,123",
"4,4,4,4,4,132,4,4,4,129,4,4,132,4,4,4,132,4,4,4,129,4,4,132,4,4,4,4,4,4",
"123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123",
"2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
"2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
"2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
"2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
                ],
    ];
    for(var i=0;i<5;i++){
        osections.push([
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "4,4,4,4,4,4,4,4,4,4",
                "2,2,2,2,2,2,2,2,2,2",
                "2,2,2,2,2,2,2,2,2,2",
                "2,2,2,2,2,2,2,2,2,2",
                "2,2,2,2,2,2,2,2,2,2",
                "2,2,2,2,2,2,2,2,2,2",
                ]);
    }
var gsections=[
        [
            "6,6,6,6,6",
            "6,6,5,6,6",
            "6,5,5,5,6",
            "5,5,5,5,5",
            "5,5,35,5,5",
            "5,5,35,5,5",
            "5,5,5,5,5",
            "6,5,5,5,6",
            "6,6,5,6,6",
            "6,6,6,6,6",
            ],
         [
            " , , , , ",
            " , , , , ",
            " ,36, ,36, ",
            " , , , , ",
            " , , , , ",
            " , ,129, , ",
            " , , , , ",
            " ,36, ,36, ",
            " , , , , ",
            " , , , , ",
            ],
    ];
var h=[];
var prob=[];
var shards=[];
for(var i=0;i<1500;i++){
    prob.push("6");
}
for(var i=0;i<1;i++){
    prob.push("32");
}
for(var i=0;i<2;i++){
    prob.push("29");
}
for(var i=0;i<4;i++){
    prob.push("46");
}
for(var i=0;i<6;i++){
    prob.push("28");
}
for(var i=0;i<11;i++){
    prob.push("5");
}
for(var i=0;i<11;i++){
    prob.push("54");
}
for(var i=0;i<11;i++){
    prob.push("53");
}
for(var i=0;i<11;i++){
    prob.push("54");
}
for(var i=0;i<12;i++){
    prob.push("30");
}
for(var i=0;i<12;i++){
    prob.push("31");
}
for(var i=0;i<20;i++){
    prob.push("33");
}
for(var i=0;i<29;i++){
    prob.push("4");
}
for(var i=0;i<11;i++){
    prob.push("27");
}
for(var i=0;i<1;i++){
    prob.push("6");
}
var types=[0,1,2,6,8,9,11,13,15,17,19,21,24,25,26,34,39,40,41,42,45,89,92,94,96,97,98];
var nums=[50,10,30,10,8,10,5,4,3,7,8,1,20,10,4,6,8,20,8,6,4,3,4,3,2,6,3];
var prs=[80,70,80,70,65,60,50,40,30,45,50,5,80,60,40,50,45,70,45,50,60,60,70,60,50,70,40];
var types1=[10,46,70,123];
var nums1=[10,7,2,5];
var prs1=[40,30,10,20];
var types2=[11,13,15,17,19,21,12,14,16,18,20,22,39,3];
var nums2=[5,5,5,5,5,5,2,2,2,2,2,2,10,10];
var prs2=[60,50,40,70,80,20,30,25,20,35,40,10,80,80];
var chests=[];

function chest(type){
    
    if(type===1){
        this.materials=[];
        for(var i=0;i<5;i++){
            this.materials.push([]);
            for(var j=0;j<3;j++){
                this.materials[i].push([-1,0]);
            var g=floor(random(0,types.length));
            //println(prs[g]);
            var h=random(0,100);
            if(h<prs[g]){
                this.materials[i][j][0]=types[g];
                this.materials[i][j][1]=ceil(nums[g]*random(0,1));
                //println(true);
            }
            else{
                //println(false);
            }
            }
        }
    }
    else if(type===2){
        this.materials=[];
        for(var i=0;i<5;i++){
            this.materials.push([]);
            for(var j=0;j<3;j++){
                this.materials[i].push([-1,0]);
            var g=floor(random(0,types1.length));
            //println(prs[g]);
            var h=random(0,100);
            if(h<prs1[g]){
                this.materials[i][j][0]=types1[g];
                this.materials[i][j][1]=ceil(nums1[g]*random(0,1));
                //println(true);
            }
            else{
                //println(false);
            }
            }
        }
    }
    else if(type===3){
        this.materials=[];
        for(var i=0;i<5;i++){
            this.materials.push([]);
            for(var j=0;j<3;j++){
                this.materials[i].push([-1,0]);
            var g=floor(random(0,types2.length));
            //println(prs[g]);
            var h=random(0,100);
            if(h<prs2[g]){
                this.materials[i][j][0]=types2[g];
                this.materials[i][j][1]=ceil(nums2[g]*random(0,1));
                //println(true);
            }
            else{
                //println(false);
            }
            }
        }
    }
    else{
    this.materials=[[[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0]]];
    }
}
function shuffle(array){
    var ret=[];
    for(var i=0;i<array.length;i+=floor(random(1,10))){
        ret.push(array[i]);
    }
    return ret;
}
var worldLength=0;
var worldHeight=sections[0].length;
    textFont(createFont("monospace"));
    for(var i=0;i<gsections.length;i++){
    for(var j=0;j<gsections[i].length;j++){
        gsections[i][j]=gsections[i][j].split(",");
    }
    }
    for(var i=0;i<sections.length;i++){
    for(var j=0;j<sections[i].length;j++){
        sections[i][j]=sections[i][j].split(",");
    }
    }
    for(var i=0;i<osections.length;i++){
    for(var j=0;j<osections[i].length;j++){
        osections[i][j]=osections[i][j].split(",");
    }
    }
    for(var j=0;j<oLeft.length;j++){
        oLeft[j]=oLeft[j].split(",");
    }
    for(var j=0;j<oTop.length;j++){
        oTop[j]=oTop[j].split(",");
    }
    for(var j=0;j<oRight.length;j++){
        oRight[j]=oRight[j].split(",");
    }
var materials=[
    "dirt","wood","sand","glue block","water","lava","stone","leaves","stick","coal","coal block","iron","iron block","gold","gold block","diamond","diamond block","copper","copper block","tin","tin block","rouguetite","rouguetite block","ladder","water drop","lava drop","venom","iron ore","gold ore","diamond ore","copper ore","tin ore","rouguetite ore","coal ore","glue","mystery","gspawner","xspawner","chest","rubber","seed","copper wire","gold wire","gold power block","copper power block","pole","berethite","furnace","glass","anvil","crusher","foundry","oil","oil shale","shale","fspawner","sspawner","spiderweb","grossstuffyoudontwanttoknowwhatitis","guard head","gaul head","feagle head","spider head","string","empty flask","compact stone","ironwood","ironwood shard","ironwood block","charred ironwood","firepowder","transformer","copper repeater","gold repeater","switch","switch (on)","switch (off)","rubber block","water flask","cannonball","cannon","cannon (left)","cannon (up)","right mover","left mover","up mover","down mover","wool","cowhide","leather","fang","raw bacon","cooked bacon","raw mutton","cooked mutton","raw steak","cooked steak","roasted seed","crushed seed","husk","fish eggs","raw fish","cooked fish","scale","piston","piston (right)","piston (down)","piston (left)","arm (up)","arm (right)","arm (down)","arm (left)","ext (up)","ext (right)","ext (down)","ext (left)","transistor block","pressure plate","capacitor","wall splitter","electric wall","electric wall (horizontal)","circuit breaker","hardstone","glitter","glitter glue","brewing stand","boat","sea chest","stone chest","teleporter","bed","shark eggs","eye"
    ];
var fuel=[
    0,2,0,0,0,0,0,1,1,5,50,0,0,0,0,10,100,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,1,0,0,0,0,0,0,7,0,0,0,100,1,0,0,0,0,0,1,0,0,5,1,100,500,2000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,10,0,0,0,0,0,0,0,1,2,4,0,0,0,2,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,5,0,0,0,100,0
    ];
materials[-1]="inv";
var placeable=[
    true,true,true,true,true,true,true,false,false,false,true,false,true,false,true,false,true,false,true,false,true,false,true,true,false,false,false,true,true,false,true,true,false,false,false,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,false,false,false,false,false,false,true,false,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false
    ];
var food=[
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.5,3,2,4,3,6,2,4,0,1,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
    ];
var inventory=[];
if(inv_Save.length>0){
    inventory=inv_Save;
}
var tCrafting=[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]];
var iCrafting=[[[-1,0],[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0],[-1,0]],[[-1,0],[-1,0],[-1,0],[-1,0]],];
var result=[-1,0];
function furnace(){
    this.in=[-1,0];
    this.out=[-1,0];
    this.fuel=0;
    this.recipe=null;
}
function crusher(){
    this.in=[-1,0];
    this.out=[[-1,0],[-1,0]];
    this.fuel=[-1,0];
    this.recipe=null;
}
function anvil(){
    this.tool=[-1,0];
    this.sheath=[-1,0];
    this.hammer=[-1,0];
    this.out=[-1,0];
}
function foundry(){
    this.tCrafting=[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]];
    this.result=[-1,0];
}
function brewer(){
    this.tCrafting=[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]];
    this.water=0;
    this.result=[-1,0];
}

for(var i=0;i<50;i++){
    if(!inventory[i]&&inv_Save.length===0){
    inventory[i]=[-1,0];
    }
}

for(var i=0;i<100;i++){
    h=[];
    for(var j=0;j<10;j++){
        h.push([]);
        for(var k=0;k<5;k++){
            var g=prob;
            h[j].push(g[constrain(floor((noise(i*0.2,j*0.2,k*0.2))*2*g.length),0,g.length-1)]);
        }
    }
    gsections.push(h);
}
/**
    Blocks
 0:dirt
 1:wood
 2:sand
 3:glue block
 4:water
 5:lava
 6:stone
 7:leaves
 8:stick
 9:coal
 10:coal block
 11:iron
 12:iron block
 13:gold
 14:gold block
 15:diamond
 16:diamond block
 17:copper
 18:copper block
 19:tin
 20:tin block
 21:rouguetite
 22:rouguetite block
 23:ladder
 24:water drop
 25:lava drop
 26:venom
 27:iron ore
 28:gold ore
 29:diamond ore
 30:copper ore
 31:tin ore
 32:rouguetite ore
 33:coal ore
 34:glue
 35:mystery block
 36:gspawner
 37:xspawner
 38:chest
 39:rubber
 40:seed
 41:copper wire
 42:gold wire
 43:gold power block
 44:copper power block
 45:pole
 46:berethite
 47:furnace
 48:glass
 49:anvil
 50:crusher
 51:foundry
 52:oil
 53:oil shale
 54:shale
 55:fspawner
 56:sspawner
 57:spiderweb
 58:grossstuffyoudontwanttokhowwhatitis
 59:guard head
 60:gaul head
 61:feagle head
 62:spider head
 63:string
 64:empty flask
 65:compact stone
 66:ironwood
 67:ironwood shard
 68:ironwood block
 69:charred ironwood
 70:firepowder
 71:transformer
 72:copper repeater
 73:gold repeater
 74:switch
 75:switch (on)
 76:switch (off)
 77:rubber block
 78:water flask
 79:cannonball
 80:cannon
 81:cannon (left)
 82:cannon (up)
 83:right mover
 84:left mover
 85:up mover
 86:down mover
 87:wool
 88:cowhide
 89:leather
 90:fang
 91:raw bacon
 92:cooked bacon
 93:raw mutton
 94:cooked mutton
 95:raw steak
 96:cooked steak
 97:roasted seed
 98:crushed seed
 99:husk
 100:fish eggs
 101:raw fish
 102:cooked fish
 103:scale
 104:piston
 105:piston (right)
 106:piston (down)
 107:piston (left)
 108:arm (up)
 109:arm (right)
 110:arm (down)
 111:arm (left)
 112:ext (up)
 113:ext (right)
 114:ext (down)
 115:ext (left)
 116:transistor block
 117:pressure plate
 118:capacitor
 119:wall splitter
 120:electric wall
 121:electric wall (horizontal)
 122:circuit breaker
 123:hardstone
 124:glitter
 125:glitter glue
 126:brewing stand
 127:boat
 128:sea chest
 129:stone chest
 130:teleporter
 131:bed
 132:shark eggs
 133:eye
 **/
var tRecipies=[
        {
            req:[
                [11,11,123,64,70,123,11,11,123],
                    ],
            ret:[126,1]
        },//Brewing Stand
        {
            req:[
                [22,22,22,22,70,22,22,22,22],
                    ],
            ret:[130,1]
        },//Teleporter
        {
            req:[
                [45,45,45,-1,87,-1,-1,87,45],
                    ],
            ret:[131,1]
        },//Bed
        {
            req:[
                [1,1,1,1,14,1,1,1,1],
                    ],
            ret:[38,3]
        },//Chest
        {
            req:[
                [24,26,24,26,88,26,24,26,24],
                    ],
            ret:[89,1]
        },//Leather
        {
            req:[
                [19,1,65,19,8,65,19,1,65],
                    ],
            ret:[104,2]
        },//Piston
        {
            req:[
                [6,13,6,17,13,17,6,13,6],
                    ],
            ret:[116,2]
        },//Transistor Block
        {
            req:[
                [6,13,6,17,11,17,6,13,6],
                    ],
            ret:[122,2]
        },//Circuit Breaker
        {
            req:[
                [-1,-1,6,-1,-1,6,-1,-1,6],
                    ],
            ret:[117,6]
        },//Pressure Plate
        {
            req:[
                [39,52,39,124,71,125,39,52,39],
                    ],
            ret:[118,3]
        },//Capacitor
        {
            req:[
                [6,13,6,13,13,13,6,13,6],
                    ],
            ret:[119,6]
        },//Wall Splitter
        {
            req:[
                [6,6,6,13,13,13,6,6,6],
                    ],
            ret:[120,6]
        },//Electric Wall
        {
            req:[
                [46,65,46,65,21,65,46,65,46],
                    ],
            ret:[123,6]
        },//Hardstone
        {
            req:[
                [124,34,124,34,124,34,124,34,124],
                    ],
            ret:[125,3]
        },//Glitter Glue
        {
            req:[
                [-1,-1,6,11,66,6,-1,-1,6],
                    ],
            ret:[74,1]
        },//Switch
        {
            req:[
                [24,24,24,24,64,24,24,24,24],
                    ],
            ret:[78,1]
        },//Water Flask
        {
            req:[
                [17,77,17,77,13,77,17,77,17],
                    ],
            ret:[71,1]
        },//Transformer
        {
            req:[
                [17,41,-1,17,71,45,17,41,-1],
                    ],
            ret:[72,1]
        },//Copper Repeater
        {
            req:[
                [13,42,-1,13,71,45,13,42,-1],
                    ],
            ret:[73,1]
        },//Gold Repeater
        {
            req:[
                [-1,11,-1,11,11,11,-1,11,-1],
                    ],
            ret:[79,3]
        },//Cannonball
        {
            req:[
                [11,11,11,11,-1,11,11,-1,11],
                    ],
            ret:[80,1]
        },//Cannon
        {
            req:[
                [11,11,-1,19,11,11,11,11,-1],
                    ],
            ret:[86,3]
        },//Down Mover
        {
            req:[
                [-1,11,11,11,11,19,-1,11,11],
                    ],
            ret:[85,3]
        },//Up Mover
        {
            req:[
                [-1,11,-1,11,11,11,11,19,11],
                    ],
            ret:[84,3]
        },//Left Mover
        {
            req:[
                [11,19,11,11,11,11,-1,11,-1],
                    ],
            ret:[83,3]
        },//Right Mover
        {
            req:[
                [46,46,46,46,14,46,46,46,46],
                    ],
            ret:[43,1]
        },//Gold Power Block
        {
            req:[
                [65,65,65,65,18,65,65,65,65],
                    ],
            ret:[44,1]
        },//Copper Power Block
        {
            req:[
                [66,19,65,66,12,65,66,19,65],
                    ],
            ret:[50,1]
        },//Crusher
        {
            req:[
                [12,-1,11,12,11,11,12,-1,11],
                    ],
            ret:[49,1]
        },//Anvil
        {
            req:[
                [6,6,6,6,-1,6,6,6,6],
                    ],
            ret:[47,1]
        },//Furnace
        {
            req:[
                [19,52,46,20,68,46,19,52,46],
                    ],
            ret:[51,1]
        },//Foundry
        {
            req:[
                [11,11,11,11,60,11,11,11,11],
                    ],
            ret:[37,2]
        },//Xspawner
        {
            req:[
                [11,11,11,11,59,11,11,11,11],
                    ],
            ret:[36,2]
        },//Gspawner
        {
            req:[
                [11,11,11,11,62,11,11,11,11],
                    ],
            ret:[56,2]
        },//Sspawner
        {
            req:[
                [11,11,11,11,61,11,11,11,11],
                    ],
            ret:[55,2]
        },//Fspawner
        {
            req:[
                [39,39,39,39,39,39,39,39,39],
                    ],
            ret:[77,1]
        },//Rubber Block
        {
            req:[
                [77,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,77,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,77,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,77,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,77,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,77,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,77,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,77,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,77],
                    ],
            ret:[39,9]
        },//Rubber from block
        {
            req:[
                [6,6,6,6,6,6,6,6,6],
                    ],
            ret:[65,1]
        },//Compact Stone
        {
            req:[
                [67,67,67,67,67,67,67,67,67],
                    ],
            ret:[66,1]
        },//Ironwood from shards
        {
            req:[
                [68,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,68,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,68,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,68,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,68,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,68,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,68,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,68,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,68],
                ],
            ret:[66,9]
        },//Ironwood from block
        {
            req:[
                [66,66,66,66,66,66,66,66,66],
                    ],
            ret:[68,1]
        },//Ironwood Block
        {
            req:[
                [-1,-1,17,-1,17,-1,17,-1,-1],
                    ],
            ret:[41,9]
        },//Copper wire
        {
            req:[
                [-1,-1,13,-1,13,-1,13,-1,-1],
                    ],
            ret:[42,9]
        },//Gold wire
        {
            req:[
                [1,1,1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,1,1,1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,1,1,1],
                    ],
            ret:[45,2]
        },//Pole
        {
            req:[
                [12,10,14,100,38,99,16,10,18],
                    ],
            ret:[21,3]
        },//Roguetite
        {
            req:[
                [3,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,3,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,3,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,3,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,3,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,3,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,3,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,3,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,3],
                    ],
            ret:[34,4]
        },//Glue from block
        {
            req:[
                [10,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,10,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,10,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,10,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,10,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,10,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,10,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,10,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,10],
                    ],
            ret:[9,9]
        },//Coal from block
        {
            req:[
                [12,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,12,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,12,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,12,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,12,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,12,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,12,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,12,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,12],
                    ],
            ret:[11,9]
        },//Iron from block
        {
            req:[
                [14,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,14,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,14,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,14,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,14,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,14,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,14,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,14,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,14],
                    ],
            ret:[13,9]
        },//Gold from block
        {
            req:[
                [16,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,16,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,16,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,16,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,16,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,16,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,16,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,16,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,16],
                    ],
            ret:[15,9]
        },//Diamond from block
        {
            req:[
                [18,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,18,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,18,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,18,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,18,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,18,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,18,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,18,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,18],
                    ],
            ret:[17,9]
        },//Copper from block
        {
            req:[
                [20,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,20,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,20,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,20,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,20,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,20,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,20,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,20,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,20],
                    ],
            ret:[19,9]
        },//Tin from block
        {
            req:[
                [22,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,22,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,22,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,22,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,22,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,22,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,22,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,22,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,22],
                    ],
            ret:[21,9]
        },//Rouguetite from block
        {
            req:[
                [4,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,4,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,4,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,4,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,4,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,4,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,4,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,4,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,4],
                    ],
            ret:[24,4]
        },//Water drops
        {
            req:[
                [5,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,5,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,5,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,5,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,5,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,5,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,5,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,5,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,5],
                    ],
            ret:[25,4]
        },//Lava drops
        {
            req:[
                [25,25,-1,25,25,-1,-1,-1,-1],
                [-1,25,25,-1,25,25,-1,-1,-1],
                [-1,-1,-1,25,25,-1,25,25,-1],
                [-1,-1,-1,-1,25,25,-1,25,25],
                [6,6,25,6,4,25,6,6,25],
                    ],
            ret:[5,1]
        },//Lava block
        {
            req:[
                [24,24,-1,24,24,-1,-1,-1,-1],
                [-1,24,24,-1,24,24,-1,-1,-1],
                [-1,-1,-1,24,24,-1,24,24,-1],
                [-1,-1,-1,-1,24,24,-1,24,24],
                    ],
            ret:[4,1]
        },//Water block
        {
            req:[
                [8,8,8,-1,8,-1,8,8,8],
                    ],
            ret:[23,2]
        },//Ladder
        {
            req:[
                [11,11,11,11,11,11,11,11,11],
                    ],
            ret:[12,1]
        },//Iron block
        {
            req:[
                [13,13,13,13,13,13,13,13,13],
                    ],
            ret:[14,1]
        },//Gold block
        {
            req:[
                [15,15,15,15,15,15,15,15,15],
                [5,5,5,5,10,5,5,5,5],
                    ],
            ret:[16,1]
        },//Diamond block
        {
            req:[
                [17,17,17,17,17,17,17,17,17],
                    ],
            ret:[18,1]
        },//Copper block
        {
            req:[
                [34,34,34,34,34,34,34,34,34],
                    ],
            ret:[3,1]
        },//Glue block
        {
            req:[
                [19,19,19,19,19,19,19,19,19],
                    ],
            ret:[20,1]
        },//Tin block
        {
            req:[
                [21,21,21,21,21,21,21,21,21],
                    ],
            ret:[22,1]
        },//Rouguetite block
        {
            req:[
                [9,9,9,9,9,9,9,9,9],
                    ],
            ret:[10,1]
        },//Coal block
        {
            req:[
                [-1,1,-1,8,8,1,-1,1,-1],
                    ],
            ret:[1,-1]
        },//Wooden Shovel
        {
            req:[
                [-1,17,-1,8,8,17,-1,17,-1],
                    ],
            ret:[2,-1]
        },//Copper Shovel
        {
            req:[
                [-1,19,-1,8,8,19,-1,19,-1],
                    ],
            ret:[3,-1]
        },//Tin Shovel
        {
            req:[
                [-1,11,-1,8,8,11,-1,11,-1],
                    ],
            ret:[4,-1]
        },//Iron Shovel
        {
            req:[
                [-1,15,-1,8,8,15,-1,15,-1],
                    ],
            ret:[5,-1]
        },//Diamond Shovel
        {
            req:[
                [-1,21,-1,8,8,21,-1,21,-1],
                    ],
            ret:[6,-1]
        },//Rouguetite Shovel
        {
            req:[
                [-1,-1,-1,8,8,8,1,1,-1],
                [8,8,8,1,1,-1,-1,-1,-1],
                    ],
            ret:[7,-1]
        },//Wooden Axe
        {
            req:[
                [-1,-1,-1,8,8,8,17,17,-1],
                [8,8,8,17,17,-1,-1,-1,-1],
                    ],
            ret:[8,-1]
        },//Copper Axe
        {
            req:[
                [-1,-1,-1,8,8,8,19,19,-1],
                [8,8,8,19,19,-1,-1,-1,-1],
                    ],
            ret:[9,-1]
        },//Tin Axe
        {
            req:[
                [-1,-1,-1,8,8,8,11,11,-1],
                [8,8,8,11,11,-1,-1,-1,-1],
                    ],
            ret:[10,-1]
        },//Iron Axe
        {
            req:[
                [-1,-1,-1,8,8,8,15,15,-1],
                [8,8,8,15,15,-1,-1,-1,-1],
                    ],
            ret:[11,-1]
        },//Diamond Axe
        {
            req:[
                [-1,-1,-1,8,8,8,21,21,-1],
                [8,8,8,21,21,-1,-1,-1,-1],
                    ],
            ret:[12,-1]
        },//Rouguetite Axe
        {
            req:[
                [1,-1,-1,1,8,8,1,-1,-1],
                    ],
            ret:[13,-1]
        },//Wooden Pickaxe
        {
            req:[
                [17,-1,-1,17,8,8,17,-1,-1],
                    ],
            ret:[14,-1]
        },//Copper Pickaxe
        {
            req:[
                [19,-1,-1,19,8,8,19,-1,-1],
                    ],
            ret:[15,-1]
        },//Tin Pickaxe
        {
            req:[
                [11,-1,-1,11,8,8,11,-1,-1],
                    ],
            ret:[16,-1]
        },//Iron Pickaxe
        {
            req:[
                [15,-1,-1,15,8,8,15,-1,-1],
                    ],
            ret:[17,-1]
        },//Diamond Pickaxe
        {
            req:[
                [21,-1,-1,21,8,8,21,-1,-1],
                    ],
            ret:[18,-1]
        },//Rouguetite Pickaxe
        {
            req:[
                [-1,-1,-1,1,1,8,-1,-1,-1],
                    ],
            ret:[19,-1]
        },//Wooden Sword
        {
            req:[
                [-1,-1,-1,17,17,8,-1,-1,-1],
                    ],
            ret:[20,-1]
        },//Copper Sword
        {
            req:[
                [-1,-1,-1,19,19,8,-1,-1,-1],
                    ],
            ret:[21,-1]
        },//Tin Sword
        {
            req:[
                [-1,-1,-1,11,11,8,-1,-1,-1],
                    ],
            ret:[22,-1]
        },//Iron Sword
        {
            req:[
                [-1,-1,-1,15,15,8,-1,-1,-1],
                    ],
            ret:[23,-1]
        },//Diamond Sword
        {
            req:[
                [-1,-1,-1,21,21,8,-1,-1,-1],
                    ],
            ret:[24,-1]
        },//Rouguetite Sword
        {
            req:[
                [19,19,-1,-1,-1,19,19,19,-1],
                    ],
            ret:[25,-1]
        },//Bucket
        {
            req:[
                [65,-1,-1,65,66,66,65,-1,-1],
                    ],
            ret:[26,-1]
        },//Stone Hammer
        {
            req:[
                [20,-1,-1,20,66,66,20,-1,-1],
                    ],
            ret:[27,-1]
        },//Tin Hammer
        {
            req:[
                [12,-1,-1,12,66,66,12,-1,-1],
                    ],
            ret:[28,-1]
        },//Iron Hammer
        {
            req:[
                [14,-1,-1,14,66,66,14,-1,-1],
                    ],
            ret:[29,-1]
        },//Gold Hammer
        {
            req:[
                [16,-1,-1,16,66,66,16,-1,-1],
                    ],
            ret:[30,-1]
        },//Diamond Hammer
        {
            req:[
                [22,-1,-1,22,66,66,22,-1,-1],
                    ],
            ret:[31,-1]
        },//Rouguetite Hammer
    ];
var fRecipies=[
    {
        in:27,
        out:11,
        cost:4
    },//Iron from ore
    {
        in:28,
        out:13,
        cost:4
    },//Gold from ore
    {
        in:30,
        out:17,
        cost:3
    },//Copper from ore
    {
        in:31,
        out:19,
        cost:3
    },//Tin from ore
    {
        in:1,
        out:9,
        cost:2
    },//Coal
    {
        in:68,
        out:69,
        cost:10
    },//Charred Ironwood
    {
        in:2,
        out:48,
        cost:1
    },//Glass
    {
        in:58,
        out:39,
        cost:1
    },//Rubber
    {
        in:91,
        out:92,
        cost:3
    },//Cooked Bacon
    {
        in:93,
        out:94,
        cost:3
    },//Cooked Mutton
    {
        in:95,
        out:96,
        cost:4
    },//Cooked Steak
    {
        in:101,
        out:102,
        cost:3
    },//Cooked Fish
    {
        in:40,
        out:97,
        cost:2
    },//Roasted Seed
    {
        in:57,
        out:34,
        cost:1
    },//Glue
    {
        in:88,
        out:89,
        cost:7
    },//Leather
    ];
var cRecipies=[
    {
        in:53,
        out:[[52,2],[54,1]],
        fuel:9
    },//Oil
    {
        in:69,
        out:[[70,1],[9,1]],
        fuel:69
    },//Firepowder
    {
        in:54,
        out:[[2,3],[67,8]],
        fuel:66
    },//Sand
    {
        in:40,
        out:[[98,1],[99,2]],
        fuel:8
    },//Crushed Seed
    {
        in:103,
        out:[[124,1],[100,4]],
        fuel:52
    },//Glitter
    ];
var sRecipies=[
    {
            req:[
                [67,67,67,67,69,67,67,67,67],
                    ],
            ret:[0,-2]
        },//Midas Touch
    {
            req:[
                [63,15,63,13,68,13,63,15,63],
                    ],
            ret:[1,-2]
        },//Efficiency I
    {
            req:[
                [62,21,60,58,69,58,60,21,62],
                    ],
            ret:[2,-2]
        },//Efficiency II
    {
            req:[
                [6,65,6,46,46,46,6,65,6],
                    ],
            ret:[3,-2]
        },//Durability I
    {
            req:[
                [15,66,15,68,3,68,15,66,15],
                    ],
            ret:[4,-2]
        },//Durability II
    {
            req:[
                [21,20,21,21,69,21,21,20,21],
                    ],
            ret:[5,-2]
        },//Durability III
    {
            req:[
                [25,25,25,5,69,5,25,25,25],
                    ],
            ret:[6,-2]
        },//Fire I
    {
            req:[
                [5,5,5,70,70,70,5,5,5],
                    ],
            ret:[7,-2]
        },//Fire II
    {
            req:[
                [61,59,61,61,62,61,61,60,61],
                    ],
            ret:[8,-2]
        },//Damage I
    {
            req:[
                [65,65,65,15,21,15,65,65,65],
                    ],
            ret:[9,-2]
        },//Damage II
    {
            req:[
                [46,52,46,46,70,46,46,52,46],
                    ],
            ret:[10,-2]
        },//Damage III
    {
            req:[
                [26,3,26,3,16,3,26,3,26],
                    ],
            ret:[11,-2]
        },//Damage IV
    {
            req:[
                [68,20,68,20,16,20,68,20,68],
                    ],
            ret:[12,-2]
        },//Damage V
    {
            req:[
                [68,16,68,16,22,16,68,16,68],
                    ],
            ret:[13,-2]
        },//Damage VI
    ];
var pRecipies=[
    {
            req:[
                [39,39,39,39,52,39,39,39,39],
                    ],
            ret:[0,-3]
        },//Moonwalking (1:00)
    {
            req:[
                [90,99,77,89,99,77,90,99,77],
                    ],
            ret:[1,-3]
        },//Moonwalking (2:00)
    {
            req:[
                [89,124,89,124,123,124,89,124,89],
                    ],
            ret:[2,-3]
        },//Healing (0:00)
    {
            req:[
                [99,124,99,124,0,124,99,124,99],
                    ],
            ret:[3,-3]
        },//Homing (0:00)
    {
            req:[
                [99,125,99,125,123,125,99,125,99],
                    ],
            ret:[4,-3]
        },//Invincibility (0:30)
    {
            req:[
                [125,125,133,125,16,125,125,133,125],
                    ],
            ret:[5,-3]
        },//Invincibility (1:00)
    {
            req:[
                [63,63,63,63,70,63,63,63,63],
                    ],
            ret:[6,-3]
        },//Speed (1:00)
    {
            req:[
                [63,70,63,89,90,89,63,70,63],
                    ],
            ret:[7,-3]
        },//Speed (2:00)
    {
            req:[
                [63,70,63,70,63,70,63,70,63],
                    ],
            ret:[8,-3]
        },//Superspeed (0:15)
    {
            req:[
                [21,70,21,70,133,70,21,70,21],
                    ],
            ret:[9,-3]
        },//Superspeed (0:30)
    {
            req:[
                [5,5,5,5,70,5,5,5,5],
                    ],
            ret:[10,-3]
        },//Fire Fist (1:00)
    {
            req:[
                [26,52,63,26,52,63,26,52,63],
                    ],
            ret:[11,-3]
        },//Health Regen (0:30)
    {
            req:[
                [125,52,133,26,125,63,133,52,125],
                    ],
            ret:[12,-3]
        },//Health Regen (1:00)
    {
            req:[
                [100,90,63,87,90,63,87,133,100],
                    ],
            ret:[13,-3]
        },//Water Breathing (1:00)
    {
            req:[
                [100,125,63,133,125,63,133,52,100],
                    ],
            ret:[14,-3]
        },//Water Breathing (2:00)
    {
            req:[
                [0,0,65,2,65,1,65,1,0],
                    ],
            ret:[15,-3]
        },//Nourishment (0:00)
    {
            req:[
                [3,45,2,3,45,2,3,45,2],
                    ],
            ret:[16,-3]
        },//Unhungry (1:00)
    {
            req:[
                [54,90,63,54,3,3,54,52,45],
                    ],
            ret:[17,-3]
        },//Unhungry (2:00)
    {
            req:[
                [65,46,65,65,133,65,65,46,65],
                    ],
            ret:[18,-3]
        },//Strength (0:30)
    {
            req:[
                [46,123,46,46,133,46,46,123,46],
                    ],
            ret:[19,-3]
        },//Strength (1:00)
    ];
var mouseIsClicked=false;
textAlign(CENTER,CENTER);
rectMode(CORNER);
var tools=[
    {name:"fist",mining:0.05,damage:0.5,mines:0,durability:Infinity},
    {name:"wooden shovel",mines:1,mining:0.25,damage:1.05,durability:500},
    {name:"copper shovel",mines:1.1,mining:0.5,damage:1.1,durability:1000},
    {name:"tin shovel",mines:1.2,mining:1,damage:1.25,durability:150},
    {name:"iron shovel",mines:1.3,mining:1.5,damage:1.3,durability:2000},
    {name:"diamond shovel",mines:1.4,mining:2,damage:1.4,durability:3000},
    {name:"rouguetite shovel",mines:1.5,mining:3,damage:2,durability:5000},
    
    {name:"wooden axe",mines:2,mining:0.25,damage:1.55,durability:500},
    {name:"copper axe",mines:2.1,mining:0.5,damage:1.6,durability:1000},
    {name:"tin axe",mines:2.2,mining:1,damage:1.75,durability:1500},
    {name:"iron axe",mines:2.3,mining:1.5,damage:1.8,durability:2000},
    {name:"diamond axe",mines:2.4,mining:2,damage:1.9,durability:3000},
    {name:"rouguetite axe",mines:2.5,mining:3,damage:2.5,durability:5000},
    
    {name:"wooden pickaxe",mines:3,mining:0.25,damage:1.55,durability:700},
    {name:"copper pickaxe",mines:3.1,mining:0.5,damage:1.6,durability:1000},
    {name:"tin pickaxe",mines:3.2,mining:1,damage:1.75,durability:1500},
    {name:"iron pickaxe",mines:3.3,mining:1.5,damage:1.8,durability:2000},
    {name:"diamond pickaxe",mines:3.4,mining:2,damage:1.9,durability:3000},
    {name:"rouguetite pickaxe",mines:3.5,mining:3,damage:2.5,durability:5000},
    
    {name:"wooden sword",mines:0,mining:0.25,damage:1.5,durability:500},
    {name:"copper sword",mines:0.1,mining:0.5,damage:2,durability:1000},
    {name:"tin sword",mines:0.2,mining:1,damage:2.5,durability:1500},
    {name:"iron sword",mines:0.3,mining:1.5,damage:3,durability:2000},
    {name:"diamond sword",mines:0.4,mining:2,damage:4,durability:3000},
    {name:"rouguetite sword",mines:0.5,mining:3,damage:6,durability:5000},
    
    {name:"bucket",mines:4,mining:100,damage:1,durability:300},
    
    {name:"stone hammer",mines:-1,mining:1,damage:2,durability:10},
    {name:"tin hammer",mines:-1,mining:2,damage:3,durability:20},
    {name:"iron hammer",mines:-1,mining:3,damage:3,durability:40},
    {name:"gold hammer",mines:-1,mining:4,damage:3,durability:60},
    {name:"diamond hammer",mines:-1,mining:5,damage:4,durability:80},
    {name:"rouguetite hammer",mines:-1,mining:6,damage:5,durability:100},
    ];
var ts=[];
var sNames=[];
for(var i=0;i<sheaths.length;i++){
   sNames.push(sheaths[i].name);
}
var blocks=[];
var player;
var collect=function(){};
function shard(x,y,$1,$2){
    this.x=x;
    this.y=y;
    this.w=20;
    this.h=20;
    this.type=[$1,$2];
    this.dead=false;
    this.timer=$1===132?750:($1===100?900:1800);
}
function boat(x,y){
    this.carrying=false;
    this.x=x;
    this.y=y;
}
function tool(type){
    this.type=type;
    this.broken=false;
    this.redurability=tools[type].durability;
    this.remining=tools[type].mining;
    this.redamage=tools[type].damage;
    this.sheaths=[];
    this.fire=0;
    for(var i in tools[type]){
    this[i]=tools[type][i];
    }
}

ts[-1]=new tool(0);
if(ts_Save.length>0){
    for(var i=0;i<ts_Save.length;i++){
        ts[i]=new tool(ts_Save[i].type);
        for(var j in ts_Save[i]){
		if(j==="sheaths"){
		ts[i][j]=[];
		for(var k=0;k<ts_Save[i][j].length;k++){
		ts[i][j].push(sheaths[ts_Save[i][j][k]]);
		}
		}
		else{
            	ts[i][j]=ts_Save[i][j];
		}
        }
    }
}
var potions=[
    {
        time:1800,
        name:"moonwalking (1:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.grav=0.05;
        },
        reset:function(e){
            e.grav=0.15;
        }
    },//Moonwalking (1:00)
    {
        time:3600,
        name:"moonwalking (2:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.grav=0.05;
        },
        reset:function(e){
            e.grav=0.15;
        }
    },//Moonwalking (2:00)
    {
        time:0,
        name:"healing (0:00)",
        start:function(e){
            e.health=150;
        },
        effect:function(e){
            e.health=150;
        },
        reset:function(e){
            e.health=150;
        }
    },//Healing (0:00)
    {
        time:0,
        name:"homing (0:00)",
        start:function(e){
            
        },
        effect:function(e){
            
        },
        reset:function(e){
            e.x=e.rex;
            e.y=e.rey;
        }
    },//Homing (0:00)
    {
        time:900,
        name:"invincibility (0:30)",
        start:function(e){
            e.health=100;
        },
        effect:function(e){
            e.health=100;
        },
        reset:function(e){
            e.health=100;
        }
    },//Invincibility (0:30)
    {
        time:1800,
        name:"invincibility (1:00)",
        start:function(e){
            e.health=100;
        },
        effect:function(e){
            e.health=100;
        },
        reset:function(e){
            e.health=100;
        }
    },//Invincibility (1:00)
    {
        time:1800,
        name:"speed (1:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.xSpeed*=2;
            if(e.xSpeed!==0){
            e.hunger+=0.06;
            }
        },
        reset:function(e){
            
        }
    },//Speed (1:00)
    {
        time:3600,
        name:"speed (2:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.xSpeed*=2;
            if(e.xSpeed!==0){
            e.hunger+=0.06;
            }
        },
        reset:function(e){
            
        }
    },//Speed (2:00)
    {
        time:450,
        name:"superspeed (0:15)",
        start:function(e){
            
        },
        effect:function(e){
            e.xSpeed*=5;
            if(e.xSpeed!==0){
            e.hunger+=0.18;
            }
        },
        reset:function(e){
            
        }
    },//Superspeed (0:15)
    {
        time:900,
        name:"superspeed (0:30)",
        start:function(e){
            
        },
        effect:function(e){
            e.xSpeed*=5;
            if(e.xSpeed!==0){
            e.hunger+=0.18;
            }
        },
        reset:function(e){
            
        }
    },//Superspeed (0:30)
    {
        time:1800,
        name:"fire-fist (1:00)",
        start:function(e){
            ts[-1].fire=10;
        },
        effect:function(e){
            
        },
        reset:function(e){
            ts[-1].fire=0;
        }
    },//Fire Fist (1:00)
    {
        time:900,
        name:"health regeneration (0:30)",
        start:function(e){
            
        },
        effect:function(e){
            if(e.health<100){
            e.health+=0.5;
            }
        },
        reset:function(e){
            
        }
    },//Health Regen (0:30)
    {
        time:1800,
        name:"health regeneration (1:00)",
        start:function(e){
            
        },
        effect:function(e){
            if(e.health<150){
            e.health+=0.5;
            }
        },
        reset:function(e){
            
        }
    },//Health Regen (1:00)
    {
        time:1800,
        name:"water breathing (1:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.oxygen=1000;
        },
        reset:function(e){
            
        }
    },//Water Breathing (1:00)
    {
        time:3600,
        name:"water breathing (2:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.oxygen=1000;
        },
        reset:function(e){
            
        }
    },//Water Breathing (2:00)
    {
        time:0,
        name:"nourishment (0:00)",
        start:function(e){
            
        },
        effect:function(e){
            e.hunger=200;
        },
        reset:function(e){
            
        }
    },//Nourishment (0:00)
    {
        time:1800,
        name:"unhungry (1:00)",
        start:function(e){
            
        },
        effect:function(e){
            if(e.hunger<200){
            e.hunger++;
            }
        },
        reset:function(e){
            
        }
    },//Unhungry (1:00)
    {
        time:3600,
        name:"unhungry (2:00)",
        start:function(e){
            
        },
        effect:function(e){
            if(e.hunger<200){
            e.hunger++;
            }
        },
        reset:function(e){
            
        }
    },//Unhungry (2:00)
    {
        time:900,
        name:"strength (0:30)",
        start:function(e){
            e.strength=true;
        },
        effect:function(e){
            
        },
        reset:function(e){
            e.strength=false;
        }
    },//Strength (0:30)
    {
        time:1800,
        name:"strength (1:00)",
        start:function(e){
            e.strength=true;
        },
        effect:function(e){
            
        },
        reset:function(e){
            e.strength=false;
        }
    },//Strength (1:00)
    {
        time:Infinity,
        name:"water breathing (Infinity)",
        start:function(e){
            
        },
        effect:function(e){
            e.oxygen=1000;
        },
        reset:function(e){
            
        }
    },//Water Breathing (Infinity)
    ];
var toolbar=[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]];
if(tlb_Save.length>0){
    toolbar=tlb_Save;
}
player={
    x:xy_Save[0]||0,
    y:xy_Save[1]||0,
    rey:xy_Save[2]||480,
    rex:xy_Save[3]||300,
    w:25,
    h:25,
    xSpeed:0,
    ySpeed:0,
    grav:0.15,
    canJump:true,
    health:100,
    equipped:0,
    canPlace:[],
    potions:[],
    hunger:100,
    oxygen:1000,
    strength:false,
    inVehicle:false,
    vehicle:null,
    draw: function() {
        if(this.x===0&&this.y===0){
            this.x=this.rex;
            this.y=this.rey;
        }
        if(!this.inVehicle){
            image(graphics[-1],this.x,this.y,this.w,this.h);
        
        this.x+=this.xSpeed;
        this.ySpeed=constrain(this.ySpeed,-10,10);
        this.hunger-=0.01*abs(this.xSpeed);
        this.y+=this.ySpeed;
        this.ySpeed+=this.grav;
        if(keys[UP]&&this.canJump){
            this.ySpeed=-5;
            this.canJump=false;
            this.hunger-=0.03;
        }
        if(keys[LEFT]){
            this.xSpeed=-3;
            
        }
        else if(keys[RIGHT]){
            this.xSpeed=3;
            
        }
        else{
            this.xSpeed=0;
        }
        
        }
    }
};
var enemies=[];
function fish(x,y,type){
    this.x=x;
    this.y=y;
    this.w=25;
    this.h=25;
    this.xsp=0;
    this.ysp=0;
    this.speed=0;
    this.jump=0;
    this.type=type;
    this.damage=0;
    this.health=1;
    this.fire=0;
    this.timer=0;
    this.attacking=false;
    this.dTime=Infinity;
    this.dir=chooseRandom([-1,1]);
    this.ydir=chooseRandom([-1,1]);
    switch(this.type){
        case "fish":
            this.speed=4;
            this.damage=0;
            this.health=5;
            break;
        case "shark":
            this.speed=4;
            this.damage=3;
            this.health=10;
            break;
    }
}
shard.prototype.draw= function() {
    if(this.type[1]>0){
    image(graphics[this.type[0]],this.x,this.y,20,20);
    }
    else if(this.type[1]===-1){
        image(toolGs[ts[this.type[0]].type],this.x,this.y,20,20);
    }
    else{
        image(graphics[-6],this.x,this.y,20,20);
    }
    if(floor((this.y+this.h)%30)===0&&world[floor(this.y+this.h)/30][floor((this.x+this.w/2)/30)]&&world[floor(this.y+this.h)/30][floor((this.x+this.w/2)/30)].solid===true){
        
    }
    else{
        this.y++;
    }
    if(dist(player.x+player.w/2,player.y+player.h/2,this.x+this.w/2,this.y+this.h/2)<=30){
        if(collect(this.type)){
            this.dead=true;
        }
    }
    this.timer--;
    if(this.timer<=0){
        if((this.type[0]===100||this.type[0]===132)&&world[floor(this.y/30)][floor(this.x/30)]&&world[floor(this.y/30)][floor(this.x/30)].type==="water"&&random(0,1)<0.25){
            if(this.type[0]===100){
            enemies.push(new fish(this.x-5,this.y-5,"fish"));
            }
            else{
                enemies.push(new fish(this.x-5,this.y-5,"shark"));
            }
        }
        this.dead=true;
    }
};
var levelStart=true;
var chst=false;
var fnc=false;
var ref=0;
collect=function(item/*[type,num]*/){
    if(item[1]>0){
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===item[0]&&toolbar[i][1]>0&&item[1]>0){
            var g=constrain(item[1],0,100-toolbar[i][1]);
            item[1]-=g;
            toolbar[i][1]+=g;
            if(item[1]===0){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===item[0]&&inventory[i][1]>0&&item[1]>0){
            var g=constrain(item[1],0,100-inventory[i][1]);
            item[1]-=g;
            inventory[i][1]+=g;
            if(item[1]===0){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===-1&&toolbar[i][1]===0){
            var g=constrain(item[1],-1,100-toolbar[i][1]);
            item[1]-=g;
            toolbar[i][0]=item[0];
            toolbar[i][1]+=g;
            if(item[1]===0||item[1]===-2){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===-1&&inventory[i][1]===0){
            var g=constrain(item[1],-1,100-inventory[i][1]);
            item[1]-=g;
            inventory[i][0]=item[0];
            inventory[i][1]+=g;
            if(item[1]===0||item[1]===-2){
                item[0]=-1;
                return true;
            }
        }
    }
    }
    else{
        
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===-1){
            toolbar[i]=item;
            item=[-1,0];
                return true;
        }
    }
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===-1){
            inventory[i]=item;
            item=[-1,0];
                return true;
        }
        }
    }
    return false;
};
function invColl(item/*[type,num]*/){
    if(item[1]>0){
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===item[0]&&inventory[i][1]>0&&item[1]>0){
            var g=constrain(item[1],0,100-inventory[i][1]);
            item[1]-=g;
            inventory[i][1]+=g;
            if(item[1]===0){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===-1&&inventory[i][1]===0){
            var g=constrain(item[1],-1,100-inventory[i][1]);
            item[1]-=g;
            inventory[i][0]=item[0];
            inventory[i][1]+=g;
            if(item[1]===0||item[1]===-2){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===item[0]&&toolbar[i][1]>0&&item[1]>0){
            var g=constrain(item[1],0,100-toolbar[i][1]);
            item[1]-=g;
            toolbar[i][1]+=g;
            if(item[1]===0){
                item[0]=-1;
                return true;
            }
        }
    }
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===-1&&toolbar[i][1]===0){
            var g=constrain(item[1],-1,100-toolbar[i][1]);
            item[1]-=g;
            toolbar[i][0]=item[0];
            toolbar[i][1]+=g;
            if(item[1]===0||item[1]===-2){
                item[0]=-1;
                return true;
            }
        }
    }
    }
    else{
        for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===-1){
            inventory[i]=item;
            item=[-1,0];
                return true;
        }
        }
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][0]===-1){
            toolbar[i]=item;
            item=[-1,0];
                return true;
        }
    }
    
    }
    return false;
}
function block(x,y,type,motion,dir){
    this.x=x;
    this.y=y;
    this.type=type;
    this.w=30;
    this.h=30;
    this.dir=dir||"";
    this.burning=false;
    if(motion){
    this.motion=motion;
    }
    else{
        this.motion=0;
    }
    this.xsp=0;
    this.ysp=0;
    this.loaded=false;
    this.index=[floor(this.y/30),(this.x/30)];
    this.coll=function(){};
    this.canFall=true;
    this.health=10;
    this.durability=1;
    this.drops=[{type:materials.indexOf(type),num:1}];
    this.minable=0;
    this.conducts=false;
    this.conv=[-1,0];
    this.in={left:0,right:0,top:0,bottom:0};
    this.out={left:0,right:0,top:0,bottom:0};
    this.left=null;
    this.right=null;
    this.top=null;
    this.bottom=null;
    this.resistance=0;
    this.unplacable=false;
    this.charge=0;
    this.cooldown=0;
    if((this.type==="chest"||this.type==="sea chest"||this.type==="stone chest")&&this.motion===0){
        this.ref=new chest(0);
    }
    if(this.type==="furnace"&&this.motion===0){
        this.ref=new furnace();
    }
    if(this.type==="crusher"&&this.motion===0){
        this.ref=new crusher();
    }
    if(this.type==="anvil"&&this.motion===0){
        this.ref=new anvil();
    }
    if(this.type==="foundry"&&this.motion===0){
        this.ref=new foundry();
    }
    if(this.type==="brewing stand"&&this.motion===0){
        this.ref=new brewer();
    }
    if(this.motion===0){
    switch(this.type){
    case "teleporter":{
        player.x=player.rex;
        player.y=player.rey;
        this.drops=[];
        collect([130,1]);
        this.health=-10;
    }
    break;
    case "bed":{
        player.rex=this.x;
        player.rey=this.y;
        this.coll=function(){
            if(keys[32]){
                player.rex=this.x;
                player.rey=this.y;
            }
        };
    }
    break;
    case "boat":{
        vehicles.push(new boat(this.x,this.y));
        this.ref=vehicles.length-1;
    }
    break;
    case "fish eggs":{
        this.health=-10;
    }
        break;
    case "shark eggs":{
        this.health=-10;
    }
        break;
    case "pressure plate":{
        this.conducts=true;
        this.in={top:null,bottom:null,left:null,right:null};
        this.out={top:null,bottom:0,left:null,right:null};
        this.coll=function(){
            this.out.bottom=0.2;
        };
    }
        break;
    case "dirt":{
        this.solid=true;
        this.drops=[{type:0,num:1}];
        this.minable=1;
    }
        break;
    case "seed":{
        this.solid=false;
        this.minable=0;
        this.durability=0.05;
    }
        break;
    case "capacitor":{
        this.solid=true;
        this.minable=0;
        this.durability=2;
        this.conducts=true;
        this.resistance=0.1;
        this.load=0;
    }
        break;
    case "spiderweb":{
        this.durability=0.1;
    }
        break;
    case "wool":{
        this.solid=true;
    }
        break;
    case "glass":{
        this.solid=true;
        this.drops={};
        this.minable=0;
        this.durability=0.25;
    }
        break;
    case "mystery":{
        this.solid=true;
        this.drops=[
            {type:9,num:5},
            {type:11,num:3},
            {type:13,num:2},
            {type:15,num:1},
            {type:17,num:4},
            {type:19,num:4},
            {type:21,num:1},
            {type:24,num:5},
            {type:25,num:3},
            {type:26,num:2},
            {type:34,num:3},
            {type:1,num:8},
            ];
        this.minable=0.1;
        this.durability=1;
    }
        break;
    case "stone":{
        this.solid=true;
        this.drops=[{type:6,num:1}];
        this.minable=3;
        this.durability=3;
    }
        break;
    case "right mover":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "left mover":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "up mover":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "down mover":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "cannon":{
        this.solid=true;
        this.drops=[{type:80,num:1}];
        this.minable=3;
        this.durability=8;
        this.conducts=true;
        this.resistance=Infinity;
        this.in.top=null;
        this.out.top=null;
    }
        break;
    case "compact stone":{
        this.solid=true;
        this.minable=3;
        this.durability=27;
    }
        break;
    case "shale":{
        this.solid=true;
        this.minable=3;
        this.durability=2;
    }
        break;
    case "rubber block":{
        this.solid=true;
        this.minable=0.1;
        this.durability=1;
    }
        break;
    case "oil shale":{
        this.solid=true;
        this.minable=3;
        this.durability=2;
    }
        break;
    case "furnace":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "crusher":{
        this.solid=true;
        this.minable=3;
        this.durability=3.5;
    }
        break;
    case "foundry":{
        this.solid=true;
        this.minable=3.3;
        this.durability=6;
    }
        break;
    case "brewing stand":{
        this.solid=true;
        this.minable=3.3;
        this.durability=6;
    }
        break;
    case "anvil":{
        this.solid=true;
        this.minable=3.2;
        this.durability=5;
    }
        break;
    case "berethite":{
        this.solid=true;
        this.drops=[{type:46,num:1}];
        this.minable=3.4;
        this.durability=20;
    }
        break;
    case "hardstone":{
        this.solid=true;
        this.minable=3.5;
        this.durability=40;
    }
        break;
    case "gold power block":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        this.conducts=true;
        this.in={left:null,right:null,top:null,bottom:null};
        this.out={left:2,right:2,top:2,bottom:2};
    }
        break;
    case "copper power block":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        this.conducts=true;
        this.in={left:null,right:null,top:null,bottom:null};
        this.out={left:1,right:1,top:1,bottom:1};
    }
        break;
    case "switch (on)":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        this.conducts=true;
        this.out.top=null;
        this.out.bottom=null;
        this.in.top=null;
        this.in.bottom=null;
        this.resistance=0.1;
        this.drops=[{type:74,num:1}];
    }
        break;
    case "switch (off)":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        this.conducts=true;
        this.resistance=Infinity;
        this.drops=[{type:74,num:1}];
    }
        break;
    case "gspawner":{
        this.solid=true;
        this.drops=[{type:59,num:1}];
        this.minable=3;
        this.durability=4;
        
    }
        break;
    case "xspawner":{
        this.solid=true;
        this.drops=[{type:60,num:1}];
        this.minable=3;
        this.durability=4;
        
    }
        break;
    case "fspawner":{
        this.solid=true;
        this.minable=3;
        this.durability=4;
        this.drops=[{type:61,num:1}];
    }
        break;
    case "sspawner":{
        this.solid=true;
        this.minable=3;
        this.durability=4;
        this.drops=[{type:62,num:1}];
    }
        break;
    case "coal ore":{
        this.solid=true;
        this.drops=[{type:materials.indexOf("coal"),num:2}];
        this.minable=3;
        this.durability=3;
    }
        break;
    case "iron ore":{
        this.solid=true;
        this.minable=3.2;
        this.durability=3;
    }
        break;
    case "gold ore":{
        this.solid=true;
        this.minable=3.2;
        this.durability=3;
        this.conducts=true;
        this.resistance=0.25;
    }
        break;
    case "diamond ore":{
        this.solid=true;
        this.drops=[{type:materials.indexOf("diamond"),num:1}];
        this.minable=3.3;
        this.durability=3;
    }
        break;
    case "copper ore":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        this.conducts=true;
        this.resistance=0.5;
    }
        break;
    case "tin ore":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
    }
        break;
    case "rouguetite ore":{
        this.solid=true;
        this.drops=[{type:materials.indexOf("rouguetite"),num:1}];
        this.minable=3.4;
        this.durability=3;
    }
        break;
    case "coal block":{
        this.minable=3;
        this.durability=1;
        this.solid=true;
    }
        break;
    case "iron block":{
        this.minable=3;
        this.durability=5;
        this.solid=true;
    }
        break;
    case "gold block":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.05;
    }
        break;
    case "wall splitter":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.05;
    }
        break;
    case "electric wall (horizontal)":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.05;
        this.in={left:0,right:0,top:null,bottom:null};
        this.out={left:0,right:0,top:null,bottom:null};
        this.drops=[{type:120,num:1}];
    }
        break;
    case "electric wall":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.1;
        this.in={left:null,right:null,top:0,bottom:0};
        this.out={left:null,right:null,top:0,bottom:0};
    }
        break;
    case "transistor block":{
        this.minable=3;
        this.durability=3;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.1;
        this.out.top=null;
        this.out.bottom=null;
    }
        break;
    case "circuit breaker":{
        this.minable=3;
        this.durability=3;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.1;
        this.out.top=null;
        this.out.bottom=null;
    }
        break;
    case "diamond block":{
        this.minable=3;
        this.durability=5;
        this.solid=true;
    }
        break;
    case "copper block":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
        this.conducts=true;
        this.resistance=0.1;
    }
        break;
    case "tin block":{
        this.minable=3;
        this.durability=2;
        this.solid=true;
    }
        break;
    case "rouguetite block":{
        this.minable=3;
        this.durability=6;
        this.solid=true;
    }
        break;
    case "leaves":{
        this.solid=true;
        this.drops=[{type:8,num:2}];
        this.minable=0;
        this.durability=1;
    }
        break;
    case "wood":{
        this.solid=true;
        this.drops=[{type:1,num:1}];
        this.minable=2;
        this.durability=2;
    }
        break;
    case "arm (up)":{
        this.solid=true;
        this.drops=[];
        this.minable=-1;
        this.durability=Infinity;
    }
        break;
    case "arm (down)":{
        this.solid=true;
        this.drops=[];
        this.minable=-1;
        this.durability=Infinity;
    }
        break;
    case "arm (left)":{
        this.solid=true;
        this.drops=[];
        this.minable=-1;
        this.durability=Infinity;
    }
        break;
    case "arm (right)":{
        this.solid=true;
        this.drops=[];
        this.minable=-1;
        this.durability=Infinity;
    }
        break;
    case "piston":{
        this.solid=true;
        this.drops=[{type:104,num:1}];
        this.minable=2;
        this.durability=4;
        this.conducts=true;
        this.resistance=Infinity;
    }
        break;
    case "piston (right)":{
        this.solid=true;
        this.drops=[{type:104,num:1}];
        this.minable=2;
        this.durability=4;
        this.conducts=true;
        this.resistance=Infinity;
    }
        break;
    case "piston (down)":{
        this.solid=true;
        this.drops=[{type:104,num:1}];
        this.minable=2;
        this.durability=4;
        this.conducts=true;
        this.resistance=Infinity;
    }
        break;
    case "piston (left)":{
        this.solid=true;
        this.drops=[{type:104,num:1}];
        this.minable=2;
        this.durability=4;
        this.conducts=true;
        this.resistance=Infinity;
    }
        break;
    case "ironwood block":{
        this.solid=true;
        this.minable=2.4;
        this.durability=10;
    }
        break;
    case "chest":{
        this.solid=true;
        this.minable=2;
        this.durability=2;
        this.drops=[{type:38,num:1}];
        
    }
        break;
    case "stone chest":{
        this.solid=true;
        this.minable=3;
        this.durability=3;
        
    }
        break;
    case "sea chest":{
        this.solid=true;
        this.minable=1;
        this.durability=2;
        
    }
        break;
    case "sand":{
        fill(228, 230, 181);
        if(this.falling){
           this.ysp=2;
        }
        if(this.canFall){
        this.falling=true;
        }
        else{
            this.ysp=0;
        }
        this.solid=true;
        this.coll=function(){
            this.falling=true;
        };
        this.minable=1;
        this.drops=[{type:2,num:1}];
    }
        break;
    case "inv":{
        this.solid=true;
        this.durability=Infinity;
        this.minable=-1;
    }
        break;
    case "glue block":{
        this.solid=true;
        this.grass=true;
        this.drops=[{type:3,num:1}];
        this.minable=0;
        this.durability=1;
    }
        break;
    case "water":{
        this.solid=false;
        this.coll=function(){
            player.ySpeed=constrain(player.ySpeed,-1.5,1.5);
            player.xSpeed=constrain(player.xSpeed,-1.5,1.5);
            player.canJump=true;
            if(player.y>=this.y){
                player.oxygen--;
            }
        };
        this.minable=4;
        this.drops=[{type:4,num:1}];
    }
        break;
    case "ladder":{
        this.solid=false;
        this.coll=function(){
            player.ySpeed=constrain(player.ySpeed,-1.5,1.5);
            player.xSpeed=constrain(player.xSpeed,-1.5,1.5);
            player.canJump=true;
        };
        this.minable=2;
        this.drops=[{type:23,num:1}];
    }
        break;
    case "lava":{
        this.solid=false;
        this.coll=function(){
            player.ySpeed=constrain(player.ySpeed,-1.5,1.5);
            player.xSpeed=constrain(player.xSpeed,-1.5,1.5);
            player.health-=5;
            player.canJump=true;
        };
        this.minable=4;
        this.drops=[{type:5,num:1}];
    }
        break;
    case "copper wire":{
        this.conducts=true;
        this.resistance=0.1;
        this.out.top=null;
        this.out.bottom=null;
        this.in.top=null;
        this.in.bottom=null;
    }
        break;
    case "copper repeater":{
        this.conducts=true;
        this.resistance=0;
        this.out.top=null;
        this.out.bottom=null;
        this.in.top=null;
        this.in.bottom=null;
    }
        break;
    case "gold repeater":{
        this.conducts=true;
        this.resistance=0;
        this.out.top=null;
        this.out.bottom=null;
        this.in.top=null;
        this.in.bottom=null;
    }
        break;
    case "gold wire":{
        this.conducts=true;
        this.resistance=0.05;
        this.out.top=null;
        this.out.bottom=null;
        this.in.top=null;
        this.in.bottom=null;
        this.coll=function(){
            if(this.charge>0){
            player.xSpeed*=1.5;
            if(frameCount%10===0&&player.health<150){
            player.health++;
            }
            }
        };
    }
        break;
    }
    }
    if(this.motion===0&&this.conducts===true){
        var g=0;
        
            if(!world&&(type==="gold wire"||type==="copper wire")&&motion!==1){
                this.health=-10;
                this.unplacable=true;
            }
        }
}
for(var i=0;i<58;i++){
                if(world_Save.length>0){
                    world.push([]);
                    for(var j=0;j<world_Save[i].length;j++){
                        if(world_Save[i][j]===-1){
                            world[i].push(null);
                        }
                        else{
                            var w=world_Save[i][j];
                            if(w instanceof Array){
                                world[i].push(new block(j*30,i*30,materials[parseFloat(w[0])]));
                                if(w[1]){
                        world[i][j].ref.materials=w[1];
                    }
                            }
                            else{
                                world[i].push(new block(j*30,i*30,materials[w]));
                            }
                    
                    
                        }
                    }
                }
                else{
                world.push([]);
                }
            }
            worldLength=world[0].length;
var perc=0;
var ps=1;
function enemy(x,y,type){
    this.x=x;
    this.y=y;
    this.w=25;
    this.h=25;
    this.xsp=0;
    this.ysp=0;
    this.speed=0;
    this.jump=0;
    this.type=type;
    this.damage=0;
    this.health=1;
    this.fire=0;
    this.dTime=random(500,1000);
    switch(parseFloat(this.type)){
        case 1:
            this.speed=3;
            this.jump=5;
            this.damage=1;
            this.health=5;
            break;
        case 2:
            this.speed=4;
            this.jump=6;
            this.damage=0.1;
            this.health=7;
            break;
        case 3:
            this.speed=3;
            this.jump=3;
            this.damage=5;
            this.health=15;
            break;
        case 4:
            this.speed=2;
            this.jump=5;
            this.damage=2;
            this.health=5;
            break;
    }
}
function animal(x,y,type){
    this.x=x;
    this.y=y;
    this.w=25;
    this.h=25;
    this.xsp=0;
    this.ysp=0;
    this.speed=0;
    this.jump=0;
    this.type=type;
    this.damage=0;
    this.health=1;
    this.fire=0;
    this.timer=0;
    this.dTime=random(100,1000);
    this.dir=chooseRandom([-1,1]);
    switch(this.type){
        case "sheep":
            this.speed=3;
            this.jump=4;
            this.damage=0;
            this.health=7;
            break;
        case "cow":
            this.speed=4;
            this.jump=6;
            this.damage=0;
            this.health=10;
            break;
        case "wolf":
            this.speed=5;
            this.jump=5;
            this.damage=5;
            this.health=15;
            break;
        case "pig":
            this.speed=3;
            this.jump=4;
            this.damage=0;
            this.health=7;
            break;
    }
}

block.prototype.draw= function() {
    if(this.type==="boat"&&this.motion===0){        
        if(floor(vehicles[this.ref].x/30)!==this.index[1]){
        this.x=vehicles[this.ref].x;
        this.y=vehicles[this.ref].y;

            world[this.index[0]][this.index[1]]=null;
            world[this.index[0]][floor(this.x/30)]=this;
        }
    }
    
    if(this.type!=="inv"){
        if(this.type==="boat"&&this.motion===0){
            
    if(this.burning){
        image(graphics[-7],vehicles[this.ref].x,vehicles[this.ref].y-30,this.w,this.h);
        this.health-=0.125/fuel[materials.indexOf(this.type)];
    }
        }
        else{
    image(graphics[materials.indexOf(this.type)],this.x,this.y,this.w,this.h);
    if(this.burning){
        image(graphics[-7],this.x,this.y-30,this.w,this.h);
        this.health-=0.125/fuel[materials.indexOf(this.type)];
    }
        }
    }
    if(this.motion===0){
        this.index[0]=floor(this.y/30);
        this.index[1]=floor(this.x/30);
        if(this.type==="switch"){
            this.type="switch (off)";
            this.constructor(this.x,this.y,this.type,0);
        }
        stroke(0);
    if(this.type==="chest"||this.type==="stone chest"||this.type==="sea chest"){
        this.drops=[{type:materials.indexOf(this.type),num:1}];
        for(var i=0;i<this.ref.materials.length;i++){
            for(var j=0;j<this.ref.materials[i].length;j++){
                if(this.ref.materials[i][j][0]!==-1){
            this.drops.push({type:this.ref.materials[i][j][0],num:this.ref.materials[i][j][1]});
                }
        }
        }
    }
    fill(255, 0, 0);
    if(this.type==="gspawner"){
        if(frameCount%500===0){
            enemies.push(new enemy(this.x,this.y-30,"1"));
        }
    }
    else if(this.type==="xspawner"){
        if(frameCount%500===0){
            enemies.push(new enemy(this.x,this.y-30,"3"));
        }
    }
    else if(this.type==="fspawner"){
        if(frameCount%500===0){
            enemies.push(new enemy(this.x,this.y-30,"2"));
        }
    }
    else if(this.type==="sspawner"){
        if(frameCount%500===0){
            enemies.push(new enemy(this.x,this.y-30,"4"));
        }
    }
    //ellipse(this.x+this.w/2,this.y+this.h/2,5,5);
    fill(255, 0, 0);
    noStroke();
    if(this.solid){
    if(player.y+player.h>=this.y-1&&player.x+player.w>=this.x-1&&player.x<=this.x+this.w+1&&player.y<=this.y+this.h+1){
        if(player.ySpeed>0&&player.y+player.h<this.y+15&&player.x+player.w>this.x+3&&player.x<this.x+this.w-3){
        player.ySpeed=constrain(player.ySpeed,-10,0);
        player.y=this.y-player.h-1+this.ysp;
        player.xSpeed+=this.xsp;
        if(!this.grass){
        player.canJump=true;
        }
        else{
            player.canJump=false;
            player.xSpeed=constrain(player.xSpeed,-1,1);
        }
        if(this.type==="switch (on)"){
            this.constructor(this.x,this.y,"switch (off)",0);
            player.ySpeed=-2;
        }
        else if(this.type==="switch (off)"){
            this.constructor(this.x,this.y,"switch (on)",0);
            player.ySpeed=-2;
        }
        if(this.type==="rubber block"){
            player.ySpeed=-6;
        }
        }
        if(player.ySpeed<0&&player.y>this.y+15&&player.x+player.w>this.x+3&&player.x<this.x+this.w-3){
            player.ySpeed=constrain(player.ySpeed,0,10);
            player.y=this.y+this.h+1-this.ysp;
            player.canJump=false;
        }
        if(player.x+player.w>=this.x&&player.x+player.w<this.x+15&&player.y+player.h>this.y&&player.y<this.y+this.h){
            player.x=this.x-player.w-1-this.xsp;
            player.xSpeed=constrain(player.xSpeed,-10,0);
        }
        if(player.x<=this.x+this.w&&player.x>this.x+this.w-15&&player.y+player.h>this.y&&player.y<this.y+this.h){
            player.x=this.x+this.w+1+this.xsp;
            player.xSpeed=constrain(player.xSpeed,0,10);
        }
    }
    }
    if(this.health<10){
        stroke(0);
        line(this.x,this.y,this.x+20,this.y+15);
        //line(this.x+10,this.y+this.h,this.x+12,this.y+25);
        line(this.x+20,this.y+15,this.x+24,this.y+30);
        if(this.health<7){
            //line(this.x+15,this.y,this.x+8,this.y+25);
        line(this.x+8,this.y+25,this.x+17,this.y+19);
        line(this.x+20,this.y+15,this.x+27,this.y+8);
        }
        if(this.health<5){
            line(this.x,this.y+10,this.x+13,this.y+17);
        line(this.x+18,this.y+5,this.x+27,this.y+19);
        //line(this.x+4,this.y+3,this.x+12,this.y+26);
        }
        if(this.health<3){
            line(this.x+25,this.y+13,this.x+6,this.y+24);
        //line(this.x+28,this.y+17,this.x,this.y+14);
        line(this.x+24,this.y,this.x+20,this.y+30);
        }
        if(frameCount%20===0){
        this.health+=0.1;
        }
    }
    if(this.index[0]>0&&(world[this.index[0]-1][this.index[1]]||world[this.index[0]+1][this.index[1]]||world[this.index[0]][this.index[1]-1]||world[this.index[0]][this.index[1]+1])||this.type!=="leaves"){
        
    }
    else if(this.type==="leaves"){
        this.health=-100;
    }
    
    if(this.conducts){
        if(this.charge>0){
            fill(255, 0, 0);
            ellipse(this.x,this.y,5,5);
        }
        else if(this.type==="electric wall"||this.type==="electric wall (horizontal)"){
            if((this.left&&this.left.out.right>0)||(this.right&&this.right.out.left>0)){
                this.type="electric wall (horizontal)";
                this.in={left:0,right:0,top:null,bottom:null};
                this.out={left:0,right:0,top:null,bottom:null};
            }
            else if((this.top&&this.top.out.bottom>0)||(this.bottom&&this.bottom.out.top>0)){
                this.type="electric wall";
                this.in={left:null,right:null,top:0,bottom:0};
                this.out={left:null,right:null,top:0,bottom:0};
            }
        }
        for(var i in this.in){
            if(this.in[i]!==null){
                this.in[i]=0;
            }
        }
        if(this.left!==null&&this.in.left!==null){
        if(this.left.out.right!==null){
            this.in.left=this.left.out.right;
        }
        }
        if(this.right!==null&&this.in.right!==null){
        if(this.right.out.left!==null){
            this.in.right=this.right.out.left;
        }
        }
        if(this.top!==null&&this.in.top!==null){
        if(this.top.out.bottom!==null){
            this.in.top=this.top.out.bottom;
        }
        }
        if(this.bottom!==null&&this.in.bottom!==null){
        if(this.bottom.out.top!==null){
            this.in.bottom=this.bottom.out.top;
        }
        }
        this.charge=max(max(this.in.left,this.in.right),max(this.in.top,this.in.bottom))-this.resistance;
        if(this.type==="capacitor"){
            if(this.charge>0&&this.load<4){
                this.load+=0.1*this.charge;
            }
            else if(this.load>0){
                this.charge=this.load/2;
                this.load-=0.1;
            }
        }
        if(this.type==="transistor block"){
            this.charge=max(this.in.left,this.in.right)-this.resistance;
        }
        if(this.type==="circuit breaker"){
            this.charge=max(this.in.left,this.in.right)-this.resistance;
        }
        if(this.type==="copper repeater"){
            this.charge*=2;
        }
        else if(this.type==="gold repeater"){
            this.charge*=3;
        }
        var t=this.in;
        var o=this.out;
        if(o.left!==null&&(!t.left||t.left<=0)){
            o.left=this.charge;
        }
        if(o.right!==null&&(!t.right||t.right<=0)){
            o.right=this.charge;
        }
        if(o.top!==null&&t.top<=0){
            o.top=this.charge;
        }
        if(o.bottom!==null&&t.bottom<=0){
            o.bottom=this.charge;
        }
        if(this.type==="gold power block"){
            this.out={left:2,right:2,top:2,bottom:2};
        }
        else if(this.type==="copper power block"){
            this.out={left:1,right:1,top:1,bottom:1};
        }
        else if(this.type==="pressure plate"){
            
        }
        this.top=null;
        this.bottom=null;
        this.left=null;
        this.right=null;
        if(world[this.index[0]][this.index[1]-1]){
            if(world[this.index[0]][this.index[1]-1].conducts){
            this.left=world[this.index[0]][this.index[1]-1];
            world[this.index[0]][this.index[1]-1].right=this;
            }
            else{
                this.left=null;
            }
        }
        if(world[this.index[0]][this.index[1]+1]){
            if(world[this.index[0]][this.index[1]+1].conducts){
            this.right=world[this.index[0]][this.index[1]+1];
            world[this.index[0]][this.index[1]+1].left=this;
            }
            else{
                this.right=null;
            }
        }
        if(world[this.index[0]-1][this.index[1]]){
            if(world[this.index[0]-1][this.index[1]].conducts){
            this.top=world[this.index[0]-1][this.index[1]];
            world[this.index[0]-1][this.index[1]].bottom=this;
            }
            else{
                this.top=null;
            }
        }
        if(world[this.index[0]+1][this.index[1]]){
            if(world[this.index[0]+1][this.index[1]].conducts){
            this.bottom=world[this.index[0]+1][this.index[1]];
            world[this.index[0]+1][this.index[1]].top=this;
            }
            else{
                this.bottom=null;
            }
        }
        if((((world[this.index[0]+1][this.index[1]]===null)||(world[this.index[0]+1][this.index[1]].type!=="pole"))&&(this.type==="gold repeater"||this.type==="copper repeater"))||((this.left===null&&this.right===null)&&(this.type==="gold wire"||this.type==="copper wire"))){
                world[this.index[0]][this.index[1]]=null;
                collect([materials.indexOf(this.type),1]);
            }
        if(this.type==="cannon"||this.type==="cannon (left)"||this.type==="cannon (up)"){
            if(this.in.left>0){
                this.type="cannon";
                if(this.loaded!==false&&this.cooldown===0){
                blocks.push(new block(this.x+30,this.y,"cannonball",0,"right"));
                this.loaded=false;
                this.cooldown=floor(200/this.in.left);
                }
                
            }
            else if(this.in.right>0){
                this.type="cannon (left)";
                if(this.loaded!==false&&this.cooldown===0){
                blocks.push(new block(this.x-30,this.y,"cannonball",0,"left"));
                this.loaded=false;
                this.cooldown=floor(200/this.in.right);
                }
            }
            else if(this.in.bottom>0){
                this.type="cannon (up)";
                if(this.loaded!==false&&this.cooldown===0){
                blocks.push(new block(this.x,this.y-30,"cannonball",0,"up"));
                this.loaded=false;
                this.cooldown=floor(200/this.in.bottom);
                }
            }
            if(this.cooldown>0){
                
                    this.cooldown--;
                    if(this.type==="cannon"){
                    image(graphics[-9],this.x,this.y,this.w,this.h);
                    }
                    else if(this.type==="cannon (left)"){
                    image(graphics[-10],this.x,this.y,this.w,this.h);
                    }
                    else{
                    image(graphics[-11],this.x,this.y,this.w,this.h);
                    }
                }
        }
        else if(this.type==="piston"||this.type==="piston (left)"||this.type==="piston (right)"||this.type==="piston (down)"){
            this.durability=4;
            if(this.in.bottom>0&&this.type!=="piston (down)"){
                this.type="piston";
                
                
            }
            else if(this.in.right>0&&this.type!=="piston (right)"){
                this.type="piston (left)";
                
            }
            else if(this.in.top>0&&this.type!=="piston"){
                this.type="piston (down)";
                
            }
            else if(this.in.left>0&&this.type!=="piston (left)"){
                this.type="piston (right)";
                
            }
            switch(this.type){
                case "piston":{
                    if(this.in.bottom>0&&(world[this.index[0]-2][this.index[1]]===null)){
                        world[this.index[0]-2][this.index[1]]=world[this.index[0]-1][this.index[1]];
                        if(world[this.index[0]-1][this.index[1]]){
                        world[this.index[0]-1][this.index[1]].y-=30;
                        world[this.index[0]-1][this.index[1]].index[0]--;
                        }
                        world[this.index[0]-1][this.index[1]]=new block(this.x,this.y-30,"arm (up)");
                        this.type="ext (up)";
                }
                }
                    break;
                case "piston (left)":{
                    if(this.in.right>0&&(world[this.index[0]][this.index[1]-2]===null)){
                        world[this.index[0]][this.index[1]-2]=world[this.index[0]][this.index[1]-1];
                        if(world[this.index[0]][this.index[1]-1]){
                        world[this.index[0]][this.index[1]-1].x-=30;
                        world[this.index[0]][this.index[1]-1].index[1]--;
                        }
                        world[this.index[0]][this.index[1]-1]=new block(this.x-30,this.y,"arm (left)");
                        this.type="ext (left)";
                    }
                }
                    break;
                case "piston (right)":{
                    if(this.in.left>0&&(world[this.index[0]][this.index[1]+2]===null)){
                        world[this.index[0]][this.index[1]+2]=world[this.index[0]][this.index[1]+1];
                        if(world[this.index[0]][this.index[1]+1]){
                        world[this.index[0]][this.index[1]+1].x+=30;
                        world[this.index[0]][this.index[1]-1].index[1]++;
                        }
                        world[this.index[0]][this.index[1]+1]=new block(this.x+30,this.y,"arm (right)");
                        this.type="ext (right)";
                    }
                }
                    break;
                case "piston (down)":{
                    if(this.in.top>0&&(world[this.index[0]+2][this.index[1]]===null)){
                        world[this.index[0]+2][this.index[1]]=world[this.index[0]+1][this.index[1]];
                        if(world[this.index[0]+1][this.index[1]]){
                        world[this.index[0]+1][this.index[1]].y+=30;
                        world[this.index[0]-1][this.index[1]].index[0]++;
                        }
                        world[this.index[0]+1][this.index[1]]=new block(this.x,this.y+30,"arm (down)");
                        this.type="ext (down)";
                }
                }
                    break;
            }
        }
        else if(this.type==="ext (up)"||this.type==="ext (left)"||this.type==="ext (right)"||this.type==="ext (down)"){
            
            if(this.type==="ext (up)"&&(this.in.bottom<=0||this.health<=0)){
                this.type="piston";
                world[this.index[0]-1][this.index[1]]=world[this.index[0]-2][this.index[1]];
                        if(world[this.index[0]-2][this.index[1]]){
                        world[this.index[0]-2][this.index[1]].y+=30;
                        }
                world[this.index[0]-2][this.index[1]]=null;
                
            }
            else if(this.type==="ext (left)"&&(this.in.right<=0||this.health<=0)){
                this.type="piston (left)";
                world[this.index[0]][this.index[1]-1]=world[this.index[0]][this.index[1]-2];
                        if(world[this.index[0]][this.index[1]-2]){
                        world[this.index[0]][this.index[1]-2].x+=30;
                        }
                world[this.index[0]][this.index[1]-2]=null;
            }
            else if(this.type==="ext (down)"&&(this.in.top<=0||this.health<=0)){
                this.type="piston (down)";
                world[this.index[0]+1][this.index[1]]=world[this.index[0]+2][this.index[1]];
                        if(world[this.index[0]+2][this.index[1]]){
                        world[this.index[0]+2][this.index[1]].y-=30;
                        }
                world[this.index[0]+2][this.index[1]]=null;
                
            }
            else if(this.type==="ext (right)"&&(this.in.left<=0||this.health<=0)){
                this.type="piston (right)";
                world[this.index[0]][this.index[1]+1]=world[this.index[0]][this.index[1]+2];
                        if(world[this.index[0]][this.index[1]+2]){
                        world[this.index[0]][this.index[1]+2].x-=30;
                        }
                world[this.index[0]][this.index[1]+2]=null;
                
            }
            
        }
        
        else if(this.type==="transistor block"){
            if(this.in.top>0||this.in.bottom>0){
                this.resistance=0.1;
            }
            else{
                this.resistance=Infinity;
            }
        }
        else if(this.type==="circuit breaker"){
            if(this.in.top>0||this.in.bottom>0){
                this.resistance=Infinity;
            }
            else{
                this.resistance=0.1;
            }
        }
    }
    else if(this.type==="arm (down)"||this.type==="arm (up)"||this.type==="arm (left)"||this.type==="arm (right)"){
            switch(this.type){
                case "arm (down)":
                    if(world[this.index[0]-1][this.index[1]]===null||world[this.index[0]-1][this.index[1]].type!=="ext (down)"){
                        world[this.index[0]][this.index[1]]=null;
                    }
                    break;
                case "arm (up)":
                    if(world[this.index[0]+1][this.index[1]]===null||world[this.index[0]+1][this.index[1]].type!=="ext (up)"){
                        world[this.index[0]][this.index[1]]=null;
                    }
                    break;
                case "arm (left)":
                    if(world[this.index[0]][this.index[1]+1]===null||world[this.index[0]][this.index[1]+1].type!=="ext (left)"){
                        world[this.index[0]][this.index[1]]=null;
                    }
                    break;
                case "arm (right)":
                    if(world[this.index[0]][this.index[1]-1]===null||world[this.index[0]][this.index[1]-1].type!=="ext (right)"){
                        world[this.index[0]][this.index[1]]=null;
                    }
                    break;
            }
        }
    if(player.y+player.h>=this.y&&player.x+player.w>=this.x&&player.x<=this.x+this.w&&player.y<=this.y+this.h){
        this.coll();
    }
    else if(this.type==="left mover"||this.type==="right mover"||this.type==="up mover"||this.type==="down mover"){
        switch(this.type){
            case "right mover":
                if(world[this.index[0]][this.index[1]-1]===null){
                    var j=0;
                    
                    for(var i=0;i<shards.length;i++){
                        if(floor(shards[i].x/30)===this.index[1]-1&&floor(shards[i].y/30)===this.index[0]){
                            this.conv=[shards[i].type[0],shards[i].type[1]];
                            j=i;
                            i=shards.length;
                        }
                    }
                    if(this.conv[0]!==-1){
                        if(world[this.index[0]][this.index[1]+1]===null){
                            
                            shards.push(new shard(this.x+40,this.y+10,this.conv[0],this.conv[1]));
                            shards.splice(j,1);
                            this.conv=[-1,0];
                        }
                        else{
                            switch(world[this.index[0]][this.index[1]+1].type){
                                case "chest":{
                                    var c=world[this.index[0]][this.index[1]+1].ref.materials;
                                    
                                    var g=false;
                                    out:for(var i=0;i<c.length;i++){
                                        for(var j=0;j<c[i].length;j++){
                                            if(c[i][j][0]===this.conv[0]&&c[i][j][1]>0&&this.conv[1]>0&&c[i][j][1]+this.conv[1]<=100){
                                                c[i][j][1]+=this.conv[1];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                            else if(c[i][j][0]===-1){
                                                c[i][j]=[this.conv[0],this.conv[1]];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                        }
                                    }
                                    if(g===true){
                                        shards.splice(j,1);
                                    }
                                }
                                    break;
                            }
                        }
                    }
                }
                else{
                    switch(world[this.index[0]][this.index[1]-1].type){
                        case "chest":
                            var o=world[this.index[0]][this.index[1]-1];
                            if(world[this.index[0]][this.index[1]+1]!==null){
                            switch(world[this.index[0]][this.index[1]+1].type){
                            case "chest":{
                                var t=world[this.index[0]][this.index[1]+1];
                                var ready=false;
                                var select=[0,0];
                                outer1:for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        if(o.ref.materials[i][j][0]!==-1){
                                            select=o.ref.materials[i][j];
                                            outer:for(var k=0;k<t.ref.materials.length;k++){
                                    for(var l=0;l<t.ref.materials[k].length;l++){
                                        if(t.ref.materials[k][l][1]>0&&t.ref.materials[k][l][0]===o.ref.materials[i][j][0]&&o.ref.materials[i][j][1]>0&&t.ref.materials[k][l][1]+o.ref.materials[i][j][1]<=100){
                                            t.ref.materials[k][l][1]+=o.ref.materials[i][j][1];
                                            o.ref.materials[i][j][1]=0;
                                            break outer;
                                        }
                                        else if(t.ref.materials[k][l][0]===-1){
                                            t.ref.materials[k][l]=o.ref.materials[i][j];
                                            o.ref.materials[i][j]=[-1,0];
                                            }
                                             
                                    }
                                }
                                            break outer1;
                                        }
                                    }
                                }
                                
                                if(ready===true){
                                    
                                }
                            }
                                break;
                        }
                            }
                            else{
                                for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        var r=o.ref.materials[i][j];
                                        if(r[0]!==-1){
                                            shards.push(new shard(this.x+40,this.y+10,r[0],r[1]));
                                            o.ref.materials[i][j]=[-1,0];
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
                break;
            case "left mover":
                if(world[this.index[0]][this.index[1]+1]===null){
                    var j=0;
                    
                    for(var i=0;i<shards.length;i++){
                        if(floor(shards[i].x/30)===this.index[1]+1&&floor(shards[i].y/30)===this.index[0]){
                            this.conv=[shards[i].type[0],shards[i].type[1]];
                            j=i;
                            i=shards.length;
                        }
                    }
                    if(this.conv[0]!==-1){
                        if(world[this.index[0]][this.index[1]-1]===null){
                            
                            shards.push(new shard(this.x-20,this.y+10,this.conv[0],this.conv[1]));
                            shards.splice(j,1);
                            this.conv=[-1,0];
                        }
                        else{
                            switch(world[this.index[0]][this.index[1]-1].type){
                                case "chest":{
                                    var c=world[this.index[0]][this.index[1]-1].ref.materials;
                                    
                                    var g=false;
                                    out:for(var i=0;i<c.length;i++){
                                        for(var j=0;j<c[i].length;j++){
                                            if(c[i][j][0]===this.conv[0]&&c[i][j][1]>0&&this.conv[1]>0&&c[i][j][1]+this.conv[1]<=100){
                                                c[i][j][1]+=this.conv[1];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                            else if(c[i][j][0]===-1){
                                                c[i][j]=[this.conv[0],this.conv[1]];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                        }
                                    }
                                    if(g===true){
                                        shards.splice(j,1);
                                    }
                                }
                                    break;
                            }
                        }
                    }
                }
                else{
                    switch(world[this.index[0]][this.index[1]+1].type){
                        case "chest":
                            var o=world[this.index[0]][this.index[1]+1];
                            if(world[this.index[0]][this.index[1]-1]!==null){
                            switch(world[this.index[0]][this.index[1]-1].type){
                            case "chest":{
                                var t=world[this.index[0]][this.index[1]-1];
                                var ready=false;
                                var select=[0,0];
                                outer1:for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        if(o.ref.materials[i][j][0]!==-1){
                                            select=o.ref.materials[i][j];
                                            outer:for(var k=0;k<t.ref.materials.length;k++){
                                    for(var l=0;l<t.ref.materials[k].length;l++){
                                        if(t.ref.materials[k][l][1]>0&&t.ref.materials[k][l][0]===o.ref.materials[i][j][0]&&o.ref.materials[i][j][1]>0&&t.ref.materials[k][l][1]+o.ref.materials[i][j][1]<=100){
                                            t.ref.materials[k][l][1]+=o.ref.materials[i][j][1];
                                            o.ref.materials[i][j][1]=0;
                                            break outer;
                                        }
                                        else if(t.ref.materials[k][l][0]===-1){
                                            t.ref.materials[k][l]=o.ref.materials[i][j];
                                            o.ref.materials[i][j]=[-1,0];
                                            }
                                             
                                    }
                                }
                                            break outer1;
                                        }
                                    }
                                }
                                
                                if(ready===true){
                                    
                                }
                            }
                                break;
                        }
                            }
                            else{
                                for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        var r=o.ref.materials[i][j];
                                        if(r[0]!==-1){
                                            shards.push(new shard(this.x-20,this.y+10,r[0],r[1]));
                                            o.ref.materials[i][j]=[-1,0];
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
                break;
            case "up mover":
                if(world[this.index[0]+1][this.index[1]]===null){
                    var j=0;
                    
                    for(var i=0;i<shards.length;i++){
                        if(floor(shards[i].x/30)===this.index[1]&&floor(shards[i].y/30)===this.index[0]+1){
                            this.conv=[shards[i].type[0],shards[i].type[1]];
                            j=i;
                            i=shards.length;
                        }
                    }
                    if(this.conv[0]!==-1){
                        if(world[this.index[0]-1][this.index[1]]===null){
                            
                            shards.push(new shard(this.x+10,this.y-20,this.conv[0],this.conv[1]));
                            shards.splice(j,1);
                            this.conv=[-1,0];
                        }
                        else{
                            switch(world[this.index[0]-1][this.index[1]].type){
                                case "chest":{
                                    var c=world[this.index[0]-1][this.index[1]].ref.materials;
                                    
                                    var g=false;
                                    out:for(var i=0;i<c.length;i++){
                                        for(var j=0;j<c[i].length;j++){
                                            if(c[i][j][0]===this.conv[0]&&c[i][j][1]>0&&this.conv[1]>0&&c[i][j][1]+this.conv[1]<=100){
                                                c[i][j][1]+=this.conv[1];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                            else if(c[i][j][0]===-1){
                                                c[i][j]=[this.conv[0],this.conv[1]];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                        }
                                    }
                                    if(g===true){
                                        shards.splice(j,1);
                                    }
                                }
                                    break;
                            }
                        }
                    }
                }
                else{
                    switch(world[this.index[0]+1][this.index[1]].type){
                        case "chest":
                            var o=world[this.index[0]+1][this.index[1]];
                            if(world[this.index[0]-1][this.index[1]]!==null){
                            switch(world[this.index[0]-1][this.index[1]].type){
                            case "chest":{
                                var t=world[this.index[0]-1][this.index[1]];
                                var ready=false;
                                var select=[0,0];
                                outer1:for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        if(o.ref.materials[i][j][0]!==-1){
                                            select=o.ref.materials[i][j];
                                            outer:for(var k=0;k<t.ref.materials.length;k++){
                                    for(var l=0;l<t.ref.materials[k].length;l++){
                                        if(t.ref.materials[k][l][1]>0&&t.ref.materials[k][l][0]===o.ref.materials[i][j][0]&&o.ref.materials[i][j][1]>0&&t.ref.materials[k][l][1]+o.ref.materials[i][j][1]<=100){
                                            t.ref.materials[k][l][1]+=o.ref.materials[i][j][1];
                                            o.ref.materials[i][j][1]=0;
                                            break outer;
                                        }
                                        else if(t.ref.materials[k][l][0]===-1){
                                            t.ref.materials[k][l]=o.ref.materials[i][j];
                                            o.ref.materials[i][j]=[-1,0];
                                            }
                                             
                                    }
                                }
                                            break outer1;
                                        }
                                    }
                                }
                                
                                if(ready===true){
                                    
                                }
                            }
                                break;
                        }
                            }
                            else{
                                for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        var r=o.ref.materials[i][j];
                                        if(r[0]!==-1){
                                            shards.push(new shard(this.x+10,this.y-20,r[0],r[1]));
                                            o.ref.materials[i][j]=[-1,0];
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
                break;
            case "down mover":
                if(world[this.index[0]-1][this.index[1]]===null){
                    var j=0;
                    
                    for(var i=0;i<shards.length;i++){
                        if(floor(shards[i].x/30)===this.index[1]&&floor(shards[i].y/30)===this.index[0]-1){
                            this.conv=[shards[i].type[0],shards[i].type[1]];
                            j=i;
                            i=shards.length;
                        }
                    }
                    if(this.conv[0]!==-1){
                        if(world[this.index[0]+1][this.index[1]]===null){
                            
                            shards.push(new shard(this.x+10,this.y+40,this.conv[0],this.conv[1]));
                            shards.splice(j,1);
                            this.conv=[-1,0];
                        }
                        else{
                            switch(world[this.index[0]+1][this.index[1]].type){
                                case "chest":{
                                    var c=world[this.index[0]+1][this.index[1]].ref.materials;
                                    
                                    var g=false;
                                    out:for(var i=0;i<c.length;i++){
                                        for(var j=0;j<c[i].length;j++){
                                            if(c[i][j][0]===this.conv[0]&&c[i][j][1]>0&&this.conv[1]>0&&c[i][j][1]+this.conv[1]<=100){
                                                c[i][j][1]+=this.conv[1];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                            else if(c[i][j][0]===-1){
                                                c[i][j]=[this.conv[0],this.conv[1]];
                                                this.conv=[-1,0];
                                                g=true;
                                                break out;
                                            }
                                        }
                                    }
                                    if(g===true){
                                        shards.splice(j,1);
                                    }
                                }
                                    break;
                            }
                        }
                    }
                }
                else{
                    switch(world[this.index[0]-1][this.index[1]].type){
                        case "chest":
                            var o=world[this.index[0]-1][this.index[1]];
                            if(world[this.index[0]+1][this.index[1]]!==null){
                            switch(world[this.index[0]+1][this.index[1]].type){
                            case "chest":{
                                var t=world[this.index[0]+1][this.index[1]];
                                var ready=false;
                                var select=[0,0];
                                outer1:for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        if(o.ref.materials[i][j][0]!==-1){
                                            select=o.ref.materials[i][j];
                                            outer:for(var k=0;k<t.ref.materials.length;k++){
                                    for(var l=0;l<t.ref.materials[k].length;l++){
                                        if(t.ref.materials[k][l][1]>0&&t.ref.materials[k][l][0]===o.ref.materials[i][j][0]&&o.ref.materials[i][j][1]>0&&t.ref.materials[k][l][1]+o.ref.materials[i][j][1]<=100){
                                            t.ref.materials[k][l][1]+=o.ref.materials[i][j][1];
                                            o.ref.materials[i][j][1]=0;
                                            break outer;
                                        }
                                        else if(t.ref.materials[k][l][0]===-1){
                                            t.ref.materials[k][l]=o.ref.materials[i][j];
                                            o.ref.materials[i][j]=[-1,0];
                                            }
                                             
                                    }
                                }
                                            break outer1;
                                        }
                                    }
                                }
                                
                                if(ready===true){
                                    
                                }
                            }
                                break;
                        
                        }
                            }
                            else{
                                for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        var r=o.ref.materials[i][j];
                                        if(r[0]!==-1){
                                            shards.push(new shard(this.x+10,this.y+40,r[0],r[1]));
                                            o.ref.materials[i][j]=[-1,0];
                                        }
                                    }
                                }
                            }
                            break;
                        case "stone chest":
                            var o=world[this.index[0]-1][this.index[1]];
                            if(world[this.index[0]+1][this.index[1]]!==null){
                            switch(world[this.index[0]+1][this.index[1]].type){
                            case "chest":{
                                var t=world[this.index[0]+1][this.index[1]];
                                var ready=false;
                                var select=[0,0];
                                outer1:for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        if(o.ref.materials[i][j][0]!==-1){
                                            select=o.ref.materials[i][j];
                                            outer:for(var k=0;k<t.ref.materials.length;k++){
                                    for(var l=0;l<t.ref.materials[k].length;l++){
                                        if(t.ref.materials[k][l][1]>0&&t.ref.materials[k][l][0]===o.ref.materials[i][j][0]&&o.ref.materials[i][j][1]>0&&t.ref.materials[k][l][1]+o.ref.materials[i][j][1]<=100){
                                            t.ref.materials[k][l][1]+=o.ref.materials[i][j][1];
                                            o.ref.materials[i][j][1]=0;
                                            break outer;
                                        }
                                        else if(t.ref.materials[k][l][0]===-1){
                                            t.ref.materials[k][l]=o.ref.materials[i][j];
                                            o.ref.materials[i][j]=[-1,0];
                                            }
                                             
                                    }
                                }
                                            break outer1;
                                        }
                                    }
                                }
                                
                                if(ready===true){
                                    
                                }
                            }
                                break;
                            case "cannon":{
                                var t=world[this.index[0]+1][this.index[1]];
                                
                                if(t.loaded===false){
                                    var m=o.ref;
                                    first:for(var i=0;i<m.materials.length;i++){
                                        for(var j=0;j<m.materials[i].length;j++){
                                            if(m.materials[i][j][0]===79&&m.materials[i][j][1]>0){
                                                m.materials[i][j][1]--;
                                                t.loaded=true;
                                                break first;
                                            }
                                        }
                                    }
                                }
                            }
                                break;
                            case "cannon (left)":{
                                var t=world[this.index[0]+1][this.index[1]];
                                
                                if(t.loaded===false){
                                    var m=o.ref;
                                    first:for(var i=0;i<m.materials.length;i++){
                                        for(var j=0;j<m.materials[i].length;j++){
                                            if(m.materials[i][j][0]===79&&m.materials[i][j][1]>0){
                                                m.materials[i][j][1]--;
                                                t.loaded=true;
                                                break first;
                                            }
                                        }
                                    }
                                }
                            }
                                break;
                        }
                            }
                            else{
                                for(var i=0;i<o.ref.materials.length;i++){
                                    for(var j=0;j<o.ref.materials[i].length;j++){
                                        var r=o.ref.materials[i][j];
                                        if(r[0]!==-1){
                                            shards.push(new shard(this.x+10,this.y+40,r[0],r[1]));
                                            o.ref.materials[i][j]=[-1,0];
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
                break;
        }
    }
    
    if(fuel[materials.indexOf(this.type)]>0){
        if(random()<0.05&&((world[this.index[0]-1][this.index[1]]&&world[this.index[0]-1][this.index[1]].burning)||(world[this.index[0]+1][this.index[1]]&&world[this.index[0]+1][this.index[1]].burning)||(world[this.index[0]][this.index[1]+1]&&world[this.index[0]][this.index[1]+1].burning)||(world[this.index[0]][this.index[1]-1]&&world[this.index[0]][this.index[1]-1].burning))){
            this.burning=true;
        }
    }
    
    }
};

boat.prototype.draw= function() {
    image(graphics[127],this.x,this.y,30,30);
    if(player.inVehicle===false&&player.x+player.w>this.x&&player.x<this.x+30&&player.y+player.h>this.y&&player.y<this.y+30){
        this.carrying=true;
        player.inVehicle=true;
        player.vehicle=this;
    }
    if(this.carrying){
        player.x=this.x;
        player.y=this.y;
        if(world[floor((this.y+15)/30)+1][floor((this.x+15)/30)]&&world[floor((this.y+15)/30)+1][floor((this.x+15)/30)].type==="water"){
        if(keys[LEFT]){
            this.x-=7;
        }
        if(keys[RIGHT]){
            this.x+=7;
        }
        }
        if(keys[UP]){
            player.inVehicle=false;
            this.carrying=false;
            player.y-=30;
            player.ySpeed=-2;
        }
    }
    else{
        this.x=round(this.x/30)*30;
    }
};
enemy.prototype.draw= function() {
    switch(this.type){
        case "1":
            image(graphics[-2],this.x,this.y,this.w,this.h);
        break;
        case "2":
            image(graphics[-4],this.x,this.y,this.w,this.h);
        break;
        case "3":
            image(graphics[-3],this.x,this.y,this.w,this.h);
        break;
        case "4":
            image(graphics[-5],this.x,this.y,this.w,this.h);
            if(world[floor(this.y/30)][floor(this.x/30)]===null&&frameCount%30===0){
                world[floor(this.y/30)][floor(this.x/30)]=new block(floor(this.x/30)*30,floor(this.y/30)*30,"spiderweb");
            }
            
            
        break;
    }
        if(this.fire>0){
            image(graphics[-7],this.x,this.y-25,25,25);
            this.health-=0.2;
            this.fire-=0.1;
        }
        this.x+=this.xsp;
        this.ysp=constrain(this.ysp,-10,10);
        this.y+=this.ysp;
        this.ysp+=0.15;
        if(this.canJump){
            this.ysp=-this.jump;
            this.canJump=false;
        }
        if(player.x<this.x){
            this.xsp=-this.speed;
        }
        else if(player.x>this.x){
            this.xsp=this.speed;
        }
        else{
            this.xsp=0;
        }
        if(player.y+player.h>=this.y&&player.x+player.w>=this.x&&player.x<=this.x+this.w&&player.y<=this.y+this.h){
        player.health-=this.damage;
    }
    if(keys[32]&&dist(this.x+this.w/2,this.y+this.h/2,player.x+player.w/2,player.y+player.h/2)<60&&toolbar[player.equipped][1]===-1){
        this.health-=ts[toolbar[player.equipped][0]].damage/10;
        if(ts[toolbar[player.equipped][0]].fire>0){
            this.fire=ts[toolbar[player.equipped][0]].fire;
        }
        
    }
    for(var i=floor(this.y/30);i<ceil((this.y+this.h)/30);i++){
    for(var j=floor(this.x/30);j<ceil((this.x+this.w)/30);j++){
            var playe=this;
            var thi=world[i][j];
            if(this.type==="4"&&thi&&thi.type==="spiderweb"){
                if(this.x+this.w>thi.x&&this.x<thi.x+thi.w&&this.y+this.h>thi.y&&this.y<thi.y+thi.h){
                    this.ysp=0;
                    if(player.y>this.y){
                        this.y+=2;
                    }
                    else if(player.y<this.y){
                        this.y-=2;
                    }
                }
            }
            else if(thi&&(thi.solid||(thi.type==="water"||thi.type==="lava"))){
                if(thi.type==="lava"){
                    this.health=0;
                }
                if(thi.burning===true){
                    this.fire=2;
                }
    if(playe.y+playe.h>=thi.y-1&&playe.x+playe.w>=thi.x-1&&playe.x<=thi.x+thi.w+1&&playe.y<=thi.y+thi.h+1){
        playe.canJump=false;
        if(playe.ysp>0&&playe.y+playe.h<thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.ysp=constrain(playe.ysp,-10,0);
        playe.y=thi.y-playe.h-1+thi.ysp;
        playe.xsp+=thi.xsp;
        if(!thi.grass){
        playe.canJump=true;
        }
        else{
            playe.canJump=false;
            playe.xsp=constrain(playe.xsp,-playe.speed/3,playe.speed/3);
        }
        }
        if(playe.ysp<0&&playe.y>thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.ysp=constrain(playe.ysp,0,10);
            playe.y=thi.y+thi.h+1-thi.ysp;
            playe.canJump=false;
        }
        
        if(playe.xsp>0&&playe.x+playe.w>=thi.x&&playe.x+playe.w<thi.x+11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x-playe.w-1-thi.xsp;
            playe.xsp=constrain(playe.xsp,-10,0);
        }
        else if(playe.xsp<0&&playe.x<=thi.x+thi.w&&playe.x>thi.x+thi.w-11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x+thi.w+1+thi.xsp;
            playe.xsp=constrain(playe.xsp,0,10);
        }
    }
    }
        }
    }
    
};
animal.prototype.draw= function() {
    switch(this.type){
        case "sheep":
            image(graphics[-12],this.x,this.y,this.w,this.h);
        break;
        case "wolf":
            image(graphics[-13],this.x,this.y,this.w,this.h);
        break;
        case "cow":
            image(graphics[-14],this.x,this.y,this.w,this.h);
        break;
        case "pig":
            image(graphics[-15],this.x,this.y,this.w,this.h);
        break;
    }
        if(this.fire>0){
            image(graphics[-7],this.x,this.y-25,25,25);
            this.health-=0.2;
            this.fire-=0.1;
        }
        
        this.x+=this.xsp;
        this.x=constrain(this.x,0,Infinity);
        if(this.x===0){
            this.dir=1;
        }
        this.ysp=constrain(this.ysp,-10,10);
        this.y+=this.ysp;
        this.ysp+=0.15;
        if(this.canJump){
            this.ysp=-this.jump;
            this.canJump=false;
        }
        if(this.homing){
        if(player.x<this.x){
            this.xsp=-this.speed;
        }
        else if(player.x>this.x){
            this.xsp=this.speed;
        }
        else{
            this.xsp=0;
        }
        if(dist(this.x,this.y,player.x,player.y)>120){
            this.homing=false;
        }
        }
        else{
            this.xsp=this.speed*0.75*this.dir;
            this.timer--;
            if(this.timer<=0){
                this.timer=random(100,500);
                this.dir=chooseRandom([-1,-1,0,1,1]);
            }
        }
        if(this.running){
        if(player.x<=this.x){
            this.dir=2;
        }
        else if(player.x>this.x){
            this.dir=-2;
        }
        if(dist(this.x,this.y,player.x,player.y)>120){
            this.running=false;
        }
        }
        
        if(player.y+player.h>=this.y&&player.x+player.w>=this.x&&player.x<=this.x+this.w&&player.y<=this.y+this.h&&this.homing){
        player.health-=this.damage;
    }
    if(keys[32]&&dist(this.x+this.w/2,this.y+this.h/2,player.x+player.w/2,player.y+player.h/2)<60&&toolbar[player.equipped][1]<=0){
        this.health-=ts[toolbar[player.equipped][0]].damage/10;
        if(ts[toolbar[player.equipped][0]].fire>0){
            this.fire=ts[toolbar[player.equipped][0]].fire;
        }
        if(this.damage>0){
            this.homing=true;
        }
        else{
            this.running=true;
        }
        this.dTime=random(200,500);
    }
    for(var i=floor(this.y/30);i<ceil((this.y+this.h)/30);i++){
    for(var j=floor(this.x/30);j<ceil((this.x+this.w)/30);j++){
            var playe=this;
            var thi=world[i][j];
            if(thi&&(thi.solid||(thi.type==="water"||thi.type==="lava"))){
                if(thi.type==="lava"){
                    this.health=0;
                }
                if(thi.burning===true){
                    this.fire=2;
                }
    if(playe.y+playe.h>=thi.y-1&&playe.x+playe.w>=thi.x-1&&playe.x<=thi.x+thi.w+1&&playe.y<=thi.y+thi.h+1){
        playe.canJump=false;
        if(playe.ysp>0&&playe.y+playe.h<thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.ysp=constrain(playe.ysp,-10,0);
        playe.y=thi.y-playe.h-1+thi.ysp;
        playe.xsp+=thi.xsp;
        if(!thi.grass){
        playe.canJump=true;
        }
        else{
            playe.canJump=false;
            playe.xsp=constrain(playe.xsp,-playe.speed/3,playe.speed/3);
        }
        }
        if(playe.ysp<0&&playe.y>thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.ysp=constrain(playe.ysp,0,10);
            playe.y=thi.y+thi.h+1-thi.ysp;
            playe.canJump=false;
        }
        
        if(playe.xsp>0&&playe.x+playe.w>=thi.x&&playe.x+playe.w<thi.x+11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x-playe.w-1-thi.xsp;
            playe.xsp=constrain(playe.xsp,-10,0);
            if(playe.running){
                playe.xsp=-5;
            }
            else{
                this.dir=-1;
            }
        }
        else if(playe.xsp<0&&playe.x<=thi.x+thi.w&&playe.x>thi.x+thi.w-11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x+thi.w+1+thi.xsp;
            playe.xsp=constrain(playe.xsp,0,10);
            if(playe.running){
                playe.xsp=5;
            }
            else{
                this.dir=1;
            }
        }
    }
    }
        }
    }
};
fish.prototype.draw= function() {
    switch(this.type){
        case "fish":
            image(this.xsp>=0?graphics[-16]:graphics[-17],this.x,this.y,this.w,this.h);
        break;
        case "shark":
            image(this.xsp>=0?graphics[-18]:graphics[-19],this.x,this.y,this.w,this.h);
        break;
    }
        
        this.x+=this.xsp;
        this.x=constrain(this.x,0,Infinity);
        if(this.x===0){
            this.dir=1;
        }
        this.ysp=constrain(this.ysp,-10,10);
        this.y+=this.ysp;
            this.xsp=this.speed*this.dir;
            this.ysp=this.speed*this.ydir;

            this.timer--;
            if(this.timer<=0){
                this.timer=random(100,500);
                
                if(this.type==="shark"){
                    shards.push(new shard(this.x,this.y,132,1));
                    if(!this.attacking){
                        this.dir=chooseRandom([-0.5,-1,1,0.5]);
                this.ydir=chooseRandom([-0.5,-1,1,0.5]);
                    }
            }
            else{
                this.dir=chooseRandom([-0.5,-1,1,0.5]);
                this.ydir=chooseRandom([-0.5,-1,1,0.5]);
            }
            }
        
    if(keys[32]&&dist(this.x+this.w/2,this.y+this.h/2,player.x+player.w/2,player.y+player.h/2)<60&&toolbar[player.equipped][1]<=0){
        this.health-=ts[toolbar[player.equipped][0]].damage/10;
        
    }
    if(dist(this.x+this.w/2,this.y+this.h/2,player.x+player.w/2,player.y+player.h/2)<30){
        player.health-=this.damage;
    }
    for(var i=floor(this.y/30);i<ceil((this.y+this.h)/30);i++){
    for(var j=floor(this.x/30);j<ceil((this.x+this.w)/30);j++){
            var playe=this;
            var th=world[i][j];
            if(!th||(th&&th.type!=="water")){
                var thi;
                if(!th){
                    thi={x:j*30,y:i*30,w:30,h:30,type:"air"};
                }
                else{
                    thi=th;
                }
                if(thi.type==="lava"){
                    this.health=0;
                }
    if(playe.y+playe.h>=thi.y-1&&playe.x+playe.w>=thi.x-1&&playe.x<=thi.x+thi.w+1&&playe.y<=thi.y+thi.h+1){
        
        if(playe.ysp>0&&playe.y+playe.h<thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.y=thi.y-playe.h-1;
            playe.ydir=-playe.ydir;
            playe.ysp=constrain(playe.ysp,-10,0);
        }
        if(playe.ysp<0&&playe.y>thi.y+15&&playe.x+playe.w>thi.x+3&&playe.x<thi.x+thi.w-3){
            playe.y=thi.y+thi.h+1;
            playe.ysp=constrain(playe.ysp,0,10);
            playe.ydir=-playe.ydir;
        }
        
        if(playe.xsp>0&&playe.x+playe.w>=thi.x&&playe.x+playe.w<thi.x+11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x-this.h-1;
            playe.xsp=constrain(playe.xsp,-10,0);
            this.dir=-playe.dir;
        }
        else if(playe.xsp<0&&playe.x<=thi.x+thi.w&&playe.x>thi.x+thi.w-11&&playe.y+playe.h>thi.y&&playe.y<thi.y+thi.h){
            playe.x=thi.x+thi.h+1;
            playe.xsp=constrain(playe.xsp,0,10);
            this.dir=-playe.dir;
        }
    }
                
    }
        }
    }
};
var createGSegment=function(q,j,i){
        for(var l=0;l<gsections[q].length;l++){
            for(var k=0;k<gsections[q][l].length;k++){
                if(gsections[q][l][k]!==" "){
                    if(world[j+l]){
                world[j+l].push(new block((i+k)*30,(j+l)*30,materials[gsections[q][l][k]],0));
                    if(world[j+l][world[j+l].length-1].type==="chest"){
                        var c=world[j+l][world[j+l].length-1];
                        if(c.type==="chest"){
                            c.ref=new chest(1);
                        }
                        if(c.type==="stone chest"){
                    c.ref=new chest(2);
                }
                        if(c.type==="sea chest"){
                    c.ref=new chest(3);
                }
                    }
                    }
                }
                else{
                    if(world[j+l]){
                    world[j+l].push(null);
                    }
                }
            }
        }
    //currLevel.message=messages[level];
};
var createOSegment=function(q,j,i){
        for(var l=0;l<osections[q].length;l++){
            for(var k=0;k<osections[q][l].length;k++){
                if(osections[q][l][k]!==" "){
                    if(world[j+l]){
                world[j+l].push(new block((i+k)*30,(j+l)*30,materials[osections[q][l][k]],0));
                    if(world[j+l][world[j+l].length-1].type==="chest"||world[j+l][world[j+l].length-1].type==="stone chest"||world[j+l][world[j+l].length-1].type==="sea chest"){
                        var c=world[j+l][world[j+l].length-1];
                        if(c.type==="chest"){
                            c.ref=new chest(1);
                        }
			else if(c.type==="stone chest"){
                            c.ref=new chest(2);
                        }
			else if(c.type==="sea chest"){
                            c.ref=new chest(3);
                        }
                    }
                    }
                }
                else{
                    if(world[j+l]){
                    world[j+l].push(null);
                    }
                }
            }
        }
    //currLevel.message=messages[level];
};
var trans=0;
var transy=0;
var mc=0;
var inv=false;
var num=0;
var sel=0;
var finished=false;
var grid=0;
var crush=false;
var anv=false;
var found=false;
var brew=false;
var ocean=0;
var save_load=0;
var load=function(){
    if(art.length!==(graphics.length)){
    createArt(num);
    if(tArt.length+1!==toolGs.length){
        createToolArt(num);
    }
    num++;
    }
    else{
        finished=true;
    }
    background(150, 157, 255);
    fill(0,255,0);
    rectMode(CORNER);
    rect(200,400,num*200/art.length,40);
    if(finished){
        scene="game";
    }
    else{
        
    }
};

function game(){
    if(levelStart){
        blocks=[];
        enemies=[];
        blockNum=0;
        player.health=100;
        //player.x=player.rex;
        //player.y=player.rey;
        player.hunger=200;
        levelStart=false;
    }
    if(inv||chst||fnc||crush||anv||found||brew){
        keys=[];
        mc=mouseIsClicked;
        mouseIsClicked=false;
    }
    if(player.x>=worldLength*30-300||ocean>0){
        if(ocean===0){
        blockNum=0;
        var r=floor(random(0,sections.length));
        for(var i=0;i<sections[r].length;i++){
            for(var j=0;j<sections[r][i].length;j++){
                if(sections[r][i][j]!==" "){
                world[i].push(new block((worldLength+j)*30,i*30,materials[sections[r][i][j]],0));
                var c=world[i][world[i].length-1];
                if(c.type==="chest"){
                    c.ref=new chest(1);
                }
                if(c.type==="stone chest"){
                    c.ref=new chest(2);
                }
                if(c.type==="sea chest"){
                    c.ref=new chest(3);
                }
                if(c.type==="water"&&!world[i-1][world[i].length-1]){
                    shards.push(new shard((worldLength+j)*30+10,i*30+10,100,1));
                }
                }
                else{
                    world[i].push(null);
                }
            }
        }
        for(var i=worldLength;i<worldLength+sections[r][0].length;i+=5){
            for(var j=24;j<=58;j+=10){
            var q=floor(random(0,gsections.length));
            try{
            createGSegment(q,j,i);
            }
            catch(e){
                //println(e);
            }
            }
        }
        worldLength+=sections[r][0].length;
        if(random(0,1)<0.05){
            ocean=10;
        }
        }
        else if(ocean===10){
        blockNum=0;
        var r=-1;
        sections[-1]=oLeft;
        for(var i=0;i<sections[r].length;i++){
            for(var j=0;j<sections[r][i].length;j++){
                if(sections[r][i][j]!==" "){
                world[i].push(new block((worldLength+j)*30,i*30,materials[sections[r][i][j]],0));
                var c=world[i][world[i].length-1];
                if(c.type==="chest"){
                    c.ref=new chest(1);
                }
                else if(c.type==="stone chest"){
                    c.ref=new chest(2);
                }
                if(c.type==="sea chest"){
                    c.ref=new chest(3);
                }
                }
                else{
                    world[i].push(null);
                }
            }
        }
        for(var i=worldLength;i<worldLength+sections[r][0].length;i+=5){
            for(var j=24;j<=58;j+=10){
            var q=floor(random(0,gsections.length));
            try{
            createGSegment(q,j,i);
            }
            catch(e){
                //println(e);
            }
            }
        }
        worldLength+=sections[r][0].length;
        
            ocean--;
        }
        else if(ocean===1){
        blockNum=0;
        var r=-1;
        sections[-1]=oRight;
        for(var i=0;i<sections[r].length;i++){
            for(var j=0;j<sections[r][i].length;j++){
                if(sections[r][i][j]!==" "){
                world[i].push(new block((worldLength+j)*30,i*30,materials[sections[r][i][j]],0));
                var c=world[i][world[i].length-1];
                if(c.type==="chest"){
                    c.ref=new chest(1);
                }
                else if(c.type==="stone chest"){
                    c.ref=new chest(2);
                }
                if(c.type==="sea chest"){
                    c.ref=new chest(3);
                }
                }
                else{
                    world[i].push(null);
                }
            }
        }
        for(var i=worldLength;i<worldLength+sections[r][0].length;i+=5){
            for(var j=24;j<=58;j+=10){
            var q=floor(random(0,gsections.length));
            try{
            createGSegment(q,j,i);
            }
            catch(e){
                //println(e);
            }
            }
        }
        worldLength+=sections[r][0].length;
        
            ocean--;
        }
        else{
        blockNum=0;
        var r=-1;
        var q=floor(random(0,osections.length));
            for(var j=24;j<=58;j+=20){
            
            try{
            createOSegment(q,j,worldLength);
            }
            catch(e){
                //println(e);
            }
            }
        
        sections[-1]=oTop;
        r=-1;
        for(var k=worldLength;k<worldLength+osections[q][0].length;k+=10){
        for(var i=0;i<sections[r].length;i++){
            for(var j=0;j<sections[r][i].length;j++){
                if(sections[r][i][j]!==" "){
                world[i].push(new block((k+j)*30,i*30,materials[sections[r][i][j]],0));
                var c=world[i][world[i].length-1];
                if(c.type==="chest"){
                    c.ref=new chest(1);
                }
                else if(c.type==="stone chest"){
                    c.ref=new chest(2);
                }
                if(c.type==="sea chest"){
                    c.ref=new chest(3);
                }
                if(c.type==="water"&&random(0,10)<0.1){
                    shards.push(new shard((k+j)*30+10,i*30+10,100,1));
                }
                }
                else{
                    world[i].push(null);
                }
            }
        }
        }
        worldLength+=osections[q][0].length;
            ocean--;
        }
    }
    for(var i=0;i<ts.length;i++){
        if(ts.broken){
            
        }
        else{
            if(ts[i].durability<=0){
                ts[i].broken=true;
                var t=ts[i];
                for(var j=0;j<inventory.length;j++){
                    if(inventory[j][1]===-1&&inventory[j][0]===i){
                        inventory[j]=[-1,0];
                    }
                }
                for(var j=0;j<toolbar.length;j++){
                    if(toolbar[j][1]===-1&&toolbar[j][0]===i){
                        toolbar[j]=[-1,0];
                    }
                }
            }
        }
    }
    player.x=constrain(player.x,0,Infinity);
    player.y=constrain(player.y,0,1300);
    player.hunger=constrain(player.hunger,0,400);
    player.oxygen=constrain(player.oxygen,0,1000);
    trans=constrain(player.x-300,0,Infinity);
    transy=constrain(player.y-300,0,700);
    pushMatrix();
    translate(-trans,-transy);
    background(171, 255, 255);
    player.draw();
    if(player.oxygen<1000){
    player.oxygen+=0.5;
    }
    if(keys[DOWN]){
        player.xSpeed*=1.5;
    }
    var h=floor(random(0,enemies.length));
    var g=random(0,1);
    if(frameCount%300===0){
        enemies.push(new animal(random(player.x-1000,player.x+1000),30*18,chooseRandom(["wolf","sheep","cow","pig"])));
    }
    for(var i=0;i<enemies.length;i++){
        
        if(!(enemies[i].x>=trans-30&&enemies[i].x<=trans+600)){
            enemies[i].dTime--;
            if(enemies[i].dTime<=0){
            enemies.splice(i,1);
        }
            continue;
        }
        else{
        enemies[i].dTime--;
        
        enemies[i].draw();
        if(enemies[i].health<=0){
            var e=enemies[i];
            enemies.splice(i,1);
            var drops=[];
            switch(e.type){
                case "1":
                    drops=[{type:24,num:1},{type:67,num:1}];
                    break;
                case "3":
                    drops=[{type:64,num:1},{type:67,num:1}];
                    break;
                case "2":
                    drops=[{type:58,num:1}];
                    break;
                case "4":
                    drops=[{type:63,num:1},{type:26,num:1}];
                    break;
                case "sheep":
                    drops=[{type:87,num:1},{type:93,num:1}];
                    break;
                case "cow":
                    drops=[{type:88,num:1},{type:95,num:1}];
                    break;
                case "wolf":
                    drops=[{type:90,num:1}];
                    break;
                case "pig":
                    drops=[{type:91,num:1}];
                    break;
                case "fish":
                    drops=[{type:101,num:1},{type:103,num:2}];
                    break;
                case "shark":
                    drops=[{type:133,num:1}];
                    break;
            }
            for(var i=0;i<drops.length;i++){
            var d=drops[i];
            shards.push(new shard(e.x,e.y,d.type,d.num));
        }
            
        }
        else if(enemies[i].dTime<=0){
            enemies.splice(i,1);
        }
        }
        
    }
    player.canPlace[UP]=true;
    player.canPlace[DOWN]=true;
    player.canPlace[LEFT]=true;
    player.canPlace[RIGHT]=true;
    for(var i=constrain(floor((transy-30)/30),0,world.length);i<constrain(floor((transy+630)/30),0,world.length);i++){
        for(var j=constrain(floor((trans-30)/30),0,world[0].length);j<constrain(floor((trans+630)/30),0,world[0].length);j++){
            if(world[i][j]===null){
                if(j>0&&i>0&&world[i][j-1]!==null&&world[i][j+1]!==null&&world[i][j-1].type==="water"&&world[i][j+1].type==="water"&&((world[i-1][j]!==null&&world[i-1][j].type==="water")||(world[i+1][j]!==null&&world[i+1][j].type==="water"))){
                    world[i][j]=new block(j*30,i*30,"water",0);
                }
                else if(j>0&&i>0&&world[i-1][j]!==null&&world[i-1][j].type==="water"){
                    world[i][j]=new block(j*30,i*30,"water",0);
                    world[i-1][j]=null;
                }
                if(j>0&&i>0&&world[i][j-1]!==null&&world[i][j+1]!==null&&world[i][j-1].type==="lava"&&world[i][j+1].type==="lava"&&((world[i-1][j]!==null&&world[i-1][j].type==="lava")||(world[i+1][j]!==null&&world[i+1][j].type==="lava"))){
                    world[i][j]=new block(j*30,i*30,"lava",0);
                }
                else if(j>0&&i>0&&world[i-1][j]!==null&&world[i-1][j].type==="lava"){
                    world[i][j]=new block(j*30,i*30,"lava",0);
                    world[i-1][j]=null;
                }
                continue;
            }
            else{
                var b=world[i][j];
                world[i][j].draw();
                if(b.health<=0){
        if(b.type==="mystery"){
            for(var k=0;k<9;k++){
            var d=chooseRandom(b.drops);
            shards.push(new shard(b.x+5,b.y+5,d.type,d.num));
            }
        }
        else if(b.type==="boat"){
            shards.push(new shard(b.x,b.y,materials.indexOf(b.type),1));
            vehicles.splice(b.ref,1);
            world[i][j]=null;
        }
        else{
        for(var k=0;k<b.drops.length;k++){
            var d=b.drops[k];
            shards.push(new shard(b.x+5,b.y+5,d.type,d.num));
        }
        }
        
        if(toolbar[player.equipped][1]===-1&&ts[toolbar[player.equipped][0]].midas){
        shards.push(new shard(b.x+5,b.y+5,13,1));
        }
        
        if(b.right&&b.right.in.left!==null){
        b.right.in.left=0;
        b.right.left=null;
        }
        if(b.left&&b.left.in.right!==null){
        b.left.in.right=0;
        b.left.right=null;
        }
        if(b.top&&b.top.in.bottom!==null){
        b.top.in.bottom=0;
        b.top.bottom=null;
        }
        if(b.bottom&&b.bottom.in.top!==null){
        b.bottom.in.top=0;
        b.bottom.top=null;
        }
        world[i][j]=null;
    }
            }
        }
    }
    for(var i=0;i<blocks.length;i++){
        var b=blocks[i];
        b.draw();
        if(world[floor(b.y/30)][floor(b.x/30)]!==null){
            var w=world[floor(b.y/30)][floor(b.x/30)];
           
            if(w.solid&&w.health>0){
                if(b.type==="cannonball"){
                    shards.push(new shard(b.x+10,b.y+10,79,1));
                    blocks.splice(i,1);
                
                }
            }
            w.health=-10;
        } 
        if((floor(b.x/30)===0&&b.dir==="left")||(floor(b.y/30)===0&&b.dir==="up")){
            shards.push(new shard(b.x+10,b.y+10,79,1));
            blocks.splice(i,1);
        }
        if(floor(b.x/30)<world[0].length-1){
        if(b.dir==="right"){
            b.x+=30;
        }
        else if(b.dir==="left"){
            b.x-=30;
        }
        else if(b.dir==="up"){
            b.y-=30;
        }
        }
        for(var i=0;i<enemies.length;i++){
            if(dist(b.x+15,b.y+15,enemies[i].x+12.5,enemies[i].y+12.5)<40){
            enemies[i].health=0;
            }
        }
    }
    for(var i=0;i<shards.length;i++){
        shards[i].draw();
        if(shards[i].dead){
            shards.splice(i,1);
        }
    }
    for(var i=0;i<vehicles.length;i++){
        vehicles[i].draw();
    }
    if(keys[87]&&floor((player.y+player.h)/30)>0){
        
        if(world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)]!==null){
            if(toolbar[player.equipped][1]===-1||toolbar[player.equipped][0]===-1){
        var b=world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)];
        if(ts[toolbar[player.equipped][0]].fire>0){
            if(fuel[materials.indexOf(b.type)]>0){
                b.burning=true;
            }
        }
        if(((floor(ts[toolbar[player.equipped][0]].mines)===floor(b.minable)&&ts[toolbar[player.equipped][0]].mines>=b.minable)||(ts[toolbar[player.equipped][0]].mines===0&&b.minable<4&&b.minable%1===0))){
            b.health-=ts[toolbar[player.equipped][0]].mining/b.durability;
            ts[toolbar[player.equipped][0]].durability--;
        }
        }
        else if(toolbar[player.equipped][0]===79&&world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)].loaded===false&&(world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)].type==="cannon"||world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)].type==="cannon (left)"||world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)].type==="cannon (up)")){
            world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)].loaded=true;
            toolbar[player.equipped][1]--;
        }
    }
        else if(toolbar[player.equipped][1]>0&&keys[SHIFT]&&placeable[toolbar[player.equipped][0]]){
            world[floor(player.y/30)-1][floor((player.x+player.w/2)/30)]=new block(floor((player.x+player.w/2)/30)*30,floor(player.y/30)*30-30,materials[toolbar[player.equipped][0]]);
            toolbar[player.equipped][1]--;
        }
    }
    if(keys[83]&&floor((player.y+player.h)/30)<41){
        if(world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)]!==null){
        if(toolbar[player.equipped][1]===-1||toolbar[player.equipped][0]===-1){
        var b=world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)];
        if(ts[toolbar[player.equipped][0]].fire>0){
            if(fuel[materials.indexOf(b.type)]>0){
                b.burning=true;
            }
        }
        if(((floor(ts[toolbar[player.equipped][0]].mines)===floor(b.minable)&&ts[toolbar[player.equipped][0]].mines>=b.minable)||(ts[toolbar[player.equipped][0]].mines===0&&b.minable<4&&b.minable%1===0))){
            b.health-=ts[toolbar[player.equipped][0]].mining/b.durability;
            ts[toolbar[player.equipped][0]].durability--;
        }
        }
        else if(toolbar[player.equipped][0]===79&&world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)].loaded===false&&(world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)].type==="cannon"||world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)].type==="cannon (left)")){
            world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)].loaded=true;
            toolbar[player.equipped][1]--;
        }
    }
        else if(toolbar[player.equipped][1]>0&&keys[SHIFT]&&placeable[toolbar[player.equipped][0]]){
            world[floor((player.y+player.h)/30)+1][floor((player.x+player.w/2)/30)]=new block(floor((player.x+player.w/2)/30)*30,floor((player.y+player.h)/30)*30+30,materials[toolbar[player.equipped][0]]);
            toolbar[player.equipped][1]--;
        }
    }
    if(keys[65]&&floor((player.y+player.h)/30)<42){
        if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1]!==null){
            
            if((world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="chest"||world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="stone chest"||world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="sea chest")&&toolbar[player.equipped][1]!==-1){
                chst=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="furnace"&&toolbar[player.equipped][1]!==-1){
                fnc=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="foundry"&&toolbar[player.equipped][1]!==-1){
                found=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="brewing stand"&&toolbar[player.equipped][1]!==-1){
                brew=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="crusher"&&toolbar[player.equipped][1]!==-1){
                crush=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="anvil"&&toolbar[player.equipped][1]!==-1){
                anv=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].ref;
            }
        else if(toolbar[player.equipped][1]===-1||toolbar[player.equipped][0]===-1){
        var b=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1];
        if(ts[toolbar[player.equipped][0]].fire>0){
            if(fuel[materials.indexOf(b.type)]>0){
                b.burning=true;
            }
        }
        if(((floor(ts[toolbar[player.equipped][0]].mines)===floor(b.minable)&&ts[toolbar[player.equipped][0]].mines>=b.minable)||(ts[toolbar[player.equipped][0]].mines===0&&b.minable<4&&b.minable%1===0))){
            b.health-=ts[toolbar[player.equipped][0]].mining/b.durability;
            ts[toolbar[player.equipped][0]].durability--;
        }
        }
         else if(toolbar[player.equipped][0]===79&&world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].loaded===false&&(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="cannon (up)"||world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].type==="cannon (left)")){
            world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].loaded=true;
            toolbar[player.equipped][1]--;
        }
    }
        else if(toolbar[player.equipped][1]>0&&keys[SHIFT]&&placeable[toolbar[player.equipped][0]]){
            if(toolbar[player.equipped][0]===40){
                var y=floor((player.y+player.h/2)/30),x=floor((player.x)/30)-1;
                if(y>3&&world[y+1][x]!==null&&world[y+1][x].type==="dirt"){
                
                
                if(world[y][x]===null){
                    world[y][x]=new block(x*30,y*30,"wood");
                }
                if(world[y-1][x]===null){
                    world[y-1][x]=new block(x*30,y*30-30,"wood");
                }
                if(world[y-2][x]===null){
                    world[y-2][x]=new block(x*30,y*30-60,"wood");
                }
                if(world[y-3][x]===null){
                    world[y-3][x]=new block(x*30,y*30-90,"wood");
                }
                if(world[y-2][x-2]===null){
                    world[y-2][x-2]=new block(x*30-60,y*30-60,"leaves");
                }
                if(world[y-2][x-1]===null){
                    world[y-2][x-1]=new block(x*30-30,y*30-60,"leaves");
                }
                if(world[y-2][x+2]===null){
                    world[y-2][x+2]=new block(x*30+60,y*30-60,"leaves");
                }
                if(world[y-2][x+1]===null){
                    world[y-2][x+1]=new block(x*30+30,y*30-60,"leaves");
                }
                if(world[y-3][x-1]===null){
                    world[y-3][x-1]=new block(x*30-30,y*30-90,"leaves");
                }
                if(world[y-3][x+1]===null){
                    world[y-3][x+1]=new block(x*30+30,y*30-90,"leaves");
                }
                if(world[y-4][x]===null){
                    world[y-4][x]=new block(x*30,y*30-120,"leaves");
                }
                if(world[y-1][x-1]===null){
                    world[y-1][x-1]=new block(x*30-30,y*30-30,"seed");
                }
                if(world[y-1][x+1]===null){
                    world[y-1][x+1]=new block(x*30+30,y*30-30,"seed");
                }
                toolbar[player.equipped][1]--;
                }
            }
            else{
            world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1]=new block(floor((player.x)/30)*30-30,floor((player.y+player.h/2)/30)*30,materials[toolbar[player.equipped][0]]);
            toolbar[player.equipped][1]--;
            }
            
        }
    }
    if(keys[68]&&floor((player.y+player.h)/30)<42){
        if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1]!==null){
            if((world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="chest"||world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="stone chest"||world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="sea chest")&&toolbar[player.equipped][1]!==-1){
                chst=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="furnace"&&toolbar[player.equipped][1]!==-1){
                fnc=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="foundry"&&toolbar[player.equipped][1]!==-1){
                found=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="brewing stand"&&toolbar[player.equipped][1]!==-1){
                brew=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="crusher"&&toolbar[player.equipped][1]!==-1){
                crush=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="anvil"&&toolbar[player.equipped][1]!==-1){
                anv=true;
                ref=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].ref;
            }
            else if(toolbar[player.equipped][1]===-1||toolbar[player.equipped][0]===-1){
        var b=world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1];
        if(ts[toolbar[player.equipped][0]].fire>0){
            if(fuel[materials.indexOf(b.type)]>0){
                b.burning=true;
            }
        }
        if(((floor(ts[toolbar[player.equipped][0]].mines)===floor(b.minable)&&ts[toolbar[player.equipped][0]].mines>=b.minable)||(ts[toolbar[player.equipped][0]].mines===0&&b.minable<4&&b.minable%1===0))){
            b.health-=ts[toolbar[player.equipped][0]].mining/b.durability;
            ts[toolbar[player.equipped][0]].durability--;
        }
            }
            else if(toolbar[player.equipped][0]===79&&world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].loaded===false&&(world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="cannon (up)"||world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].type==="cannon")){
            world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1].loaded=true;
            toolbar[player.equipped][1]--;
        }
    }
        else if(toolbar[player.equipped][1]>0&&keys[SHIFT]&&placeable[toolbar[player.equipped][0]]){
            if(toolbar[player.equipped][0]===40){
                var y=floor((player.y+player.h/2)/30),x=floor((player.x+player.w)/30)+1;
                if(y>3&&world[y+1][x]!==null&&world[y+1][x].type==="dirt"){
                
                
                if(world[y][x]===null){
                    world[y][x]=new block(x*30,y*30,"wood");
                }
                if(world[y-1][x]===null){
                    world[y-1][x]=new block(x*30,y*30-30,"wood");
                }
                if(world[y-2][x]===null){
                    world[y-2][x]=new block(x*30,y*30-60,"wood");
                }
                if(world[y-3][x]===null){
                    world[y-3][x]=new block(x*30,y*30-90,"wood");
                }
                if(world[y-2][x-2]===null){
                    world[y-2][x-2]=new block(x*30-60,y*30-60,"leaves");
                }
                if(world[y-2][x-1]===null){
                    world[y-2][x-1]=new block(x*30-30,y*30-60,"leaves");
                }
                if(world[y-2][x+2]===null){
                    world[y-2][x+2]=new block(x*30+60,y*30-60,"leaves");
                }
                if(world[y-2][x+1]===null){
                    world[y-2][x+1]=new block(x*30+30,y*30-60,"leaves");
                }
                if(world[y-3][x-1]===null){
                    world[y-3][x-1]=new block(x*30-30,y*30-90,"leaves");
                }
                if(world[y-3][x+1]===null){
                    world[y-3][x+1]=new block(x*30+30,y*30-90,"leaves");
                }
                if(world[y-4][x]===null){
                    world[y-4][x]=new block(x*30,y*30-120,"leaves");
                }
                if(world[y-1][x-1]===null){
                    world[y-1][x-1]=new block(x*30-30,y*30-30,"seed");
                }
                if(world[y-1][x+1]===null){
                    world[y-1][x+1]=new block(x*30+30,y*30-30,"seed");
                }
                toolbar[player.equipped][1]--;
                }
            }
            else{
            world[floor((player.y+player.h/2)/30)][floor((player.x+player.w)/30)+1]=new block(floor((player.x+player.w)/30)*30+30,floor((player.y+player.h/2)/30)*30,materials[toolbar[player.equipped][0]]);
            toolbar[player.equipped][1]--;
            }
        }
    }
    if(keys[LEFT]&&player.strength&&world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1]&&world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].solid){
                if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-2]===null){
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-2]=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1];
                    
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].x-=30;
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1]=null;
                }
                else{
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)-1].health=-10;
                }
            }
    if(keys[RIGHT]&&player.strength&&world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1]&&world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1].solid){
                if(world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+2]===null){
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+2]=world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1];
                    
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1].x+=30;
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1]=null;
                }
                else{
                    world[floor((player.y+player.h/2)/30)][floor((player.x)/30)+1].health=-10;
                }
            }
    for(var i=49;i<49+9;i++){
        if(keys[i]){
            player.equipped=i-49;
        }
    }
    if(keys[48]){
       player.equipped=9; 
    }
    if(keys[32]&&toolbar[player.equipped][0]===130){
            new block(floor((player.x+player.w/2)/30)*30,floor(player.y/30)*30,materials[toolbar[player.equipped][0]]).draw();
            toolbar[player.equipped][1]--;
        }
    if(keys[32]&&toolbar[player.equipped][1]===-3){
        player.potions.push([potions[toolbar[player.equipped][0]].time,potions[toolbar[player.equipped][0]]]);
        potions[toolbar[player.equipped][0]].start(player);
        toolbar[player.equipped]=[-1,0];
    }
    if(keys[32]&&(toolbar[player.equipped][1]===-1||toolbar[player.equipped][0]===-1)&&player.hunger<100){
        player.hunger-=0.01;
    }
    popMatrix();
    fill(255, 0, 0);
    textSize(20);
    text(floor(player.health),300,15);
    fill(0,255,0);
    text(floor(player.hunger/2),300,45);
    fill(0,0,255);
    text(floor(player.oxygen/10),300,75);
    fill(0);
    textSize(12);
    text("x:"+floor((player.x+15)/30)+"\ny:"+floor((player.y+15)/30),20,20);
    //textAlign(LEFT,CENTER);
    for(var i=0;i<toolbar.length;i++){
        if(toolbar[i][1]===0){
            toolbar[i][0]=-1;
        }
            fill(255,200);
            stroke(0);
            if(player.equipped===i){
                strokeWeight(5);
            }
            text(toolbar[i].name,i*65+40,550);
            
            rect(i*60+10,550,40,40);
            strokeWeight(1);
            if(toolbar[i][0]>-1){
                if(toolbar[i][1]>=0){
                    new block(i*60+15,555,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect(i*60+15,565,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],i*60+30,568);
            }
                }
                else if(toolbar[i][1]===-1){
                    image(toolGs[ts[toolbar[i][0]].type],i*60+15,555,30,30);
                    if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*60+15,582,30,4);
                        fill(0,255,0);
                        rect(i*60+15,582,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
                    
                }
                else{
                    image(graphics[-6+(toolbar[i][1]+2)*2],i*60+15,555,30,30);
                }
            }
        }
    for(var i=0;i<inventory.length;i++){
        if(inventory[i][0]===-1){
            inventory[i][1]=0;
        }
    }
    if(toolbar[player.equipped][0]!==-1&&toolbar[player.equipped][1]>0&&food[toolbar[player.equipped][0]]>0&&keys[32]&&keyIsPressed&&player.hunger<200){
        player.hunger+=food[toolbar[player.equipped][0]]*15;
        toolbar[player.equipped][1]--;
    }
    textAlign(CENTER,CENTER);
    if(player.health<=0){
        
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][0]!==-1){
                shards.push(new shard(player.x,player.y,inventory[i][0],inventory[i][1]));
            }
            inventory[i]=[-1,0];
        }
        for(var i=0;i<toolbar.length;i++){
            if(toolbar[i][0]!==-1){
                shards.push(new shard(player.x,player.y,toolbar[i][0],toolbar[i][1]));
            }
            toolbar[i]=[-1,0];
        }
        for(var i=0;i<tCrafting.length;i++){
            if(tCrafting[i][0]!==-1){
                shards.push(new shard(player.x,player.y,tCrafting[i][0],tCrafting[i][1]));
            }
            tCrafting[i]=[-1,0];
        }
        player.x=player.rex;
        player.y=player.rey;
        player.health=100;
        player.hunger=200;
        player.oxygen=1000;
    }
    else if(frameCount%50===0&&player.health<100&&player.hunger>180){
        player.health++;
    }
    if(player.hunger>200){
        player.hunger-=0.01;
        if(frameCount%10===0){
            player.health++;
        }
    }
    if(player.hunger<=0||player.oxygen<=0){
        player.health-=0.5;
    }
    for(var i=0;i<player.potions.length;i++){
        fill(255);
        rect(499,i*50,100,50);
        fill(0);
        textSize(13);
        text(player.potions[i][1].name.toTitleCase().split(" ")[0].split("-").join(" "),549,i*50+10);
        textSize(12);
        var s=floor(player.potions[i][0]%1800/30)>=10?floor(player.potions[i][0]%1800/30):"0"+floor(player.potions[i][0]%1800/30);
        text(floor(player.potions[i][0]/1800)+":"+s,549,i*50+40);
        player.potions[i][1].effect(player);
        if(player.potions[i][0]<=0){
            player.potions[i][1].reset(player);
            player.potions.splice(i,1);
        }
        else{
        player.potions[i][0]--;
        }
        
    }
    //println(inventory);
    //println(player.canPlace[DOWN]);
    if(inv){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,320,150,150);
                rect(400,400,50,50);
                if(result[0]!==-1){
                    if(result[1]>0){
                    new block(410,410,materials[result[0]],1).draw();
                    }
                    else{
                        image(toolGs[result[0]],410,410,30,30);
                    }
                    if(result[1]>1){
                    fill(255);
                    rect(410,420,30,10);
                    fill(0);
                    textSize(12);
                    text(result[1],425,423);
                    }
                }
                stroke(0);
                for(var i=0;i<2;i++){
                    line(100+i*50,320,100+i*50,470);
                    line(50,370+i*50,200,370+i*50);
                }
                for(var i=0;i<tCrafting.length;i++){
                    var g=tCrafting[i];
                if(g[0]!==-1){
                    new block(floor(i/3)*50+60,325+5+(floor(i%3)*50),materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(floor(i/3)*50+60,335+5+(floor(i%3)*50),30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],floor(i/3)*50+75,338+5+(floor(i%3)*50));
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                }
                
        }
                if(mc&&mouseX>50&&mouseX<200&&mouseY>320&&mouseY<470&&mouseButton!==RIGHT){
                    if(tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===inventory[sel][0]){
                    tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<200&&mouseX>50&&mouseY>320&&mouseY<470&&mouseButton===RIGHT){
                    if(tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]!==-1){
                        var d=tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)];
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>400&&mouseY<450&&result[0]!==-1){
                    
                    if(result[1]!==-1){
                        var d=result;
                        for(var i=0;i<tCrafting.length;i++){
                        
                            tCrafting[i][1]--;
                        
                    }
                        invColl(d);
                    }
                    else{
                        var d=result;
                        for(var i=0;i<tCrafting.length;i++){
                            tCrafting[i][1]--;
                        }
                        ts.push(new tool(d[0]));
                        invColl([ts.length-1,-1]);
                        
                    
                    }
                    
                }
                var tr=[];
                for(var i=0;i<tCrafting.length;i++){
                    tr[i]=tCrafting[i][0];
                }
                result=[-1,0];
                for(var i=0;i<tRecipies.length;i++){
                    if(result[0]===-1){
                    for(var j=0;j<tRecipies[i].req.length;j++){
                        if(tRecipies[i].req[j].equals(tr)){
                            //println(tRecipies[i].ret);
                            result=[tRecipies[i].ret[0],tRecipies[i].ret[1]];
                            
                            
                        }
                    }
                    }
                }
        
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
    else if(fnc){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,400,50,50);
                rect(150,400,50,50);
                rect(400,400,50,50);
                if(ref.out[0]!==-1){
                    if(ref.out[1]>0){
                    new block(410,410,materials[ref.out[0]],1).draw();
                    }
                }
                stroke(0);
                
                    var g=ref.in;
                if(g[0]!==-1){
                    new block(60,405+5,materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(60,415+5,30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],75,418+5);
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        }
        textSize(15);
        text("Fuel: "+ref.fuel,175,380);
        if(ref.recipe!==null){
            text("Requires: "+ref.recipe.cost,175,470);
        }
                if(mc&&mouseX>50&&mouseX<100&&mouseY>400&&mouseY<450&&mouseButton!==RIGHT){
                    if(g[0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    ref.in=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        ref.in=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(g[0]===inventory[sel][0]){
                    ref.in[1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<200&&mouseX>50&&mouseY>320&&mouseY<470&&mouseButton===RIGHT){
                    if(g[0]!==-1){
                        var d=ref.in;
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>400&&mouseY<450&&ref.out[0]!==-1){
                    
                    if(ref.out[1]!==-1){
                        var d=ref.out;
                        ref.out--;
                        ref.fuel-=ref.recipe.cost;
                        ref.in[1]--;
                        invColl(d);
                    }
                    
                }
                else if(mc&&mouseX>150&&mouseX<200&&mouseY>400&&mouseY<450&&fuel[inventory[sel][0]]>0&&inventory[sel][1]>0){
                    ref.fuel+=fuel[inventory[sel][0]];
                    inventory[sel][1]--;
                    
                }
                ref.out=[-1,0];
                ref.recipe=null;
                for(var i=0;i<fRecipies.length;i++){
                    if(fRecipies[i].in===ref.in[0]){
                        ref.recipe=fRecipies[i];
                        if(ref.fuel>=fRecipies[i].cost){
                        ref.out=[fRecipies[i].out,1];
                        }
                    }
                }
        
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
    else if(chst){
        //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
        noFill();
                stroke(0);
                rect(50,320,250,150);
        
                stroke(0);
                for(var i=0;i<4;i++){
                    line(100+i*50,320,100+i*50,470);
                    
                }
                for(var i=0;i<2;i++){
                    line(50,370+i*50,300,370+i*50);
                
                }
                for(var i=0;i<ref.materials.length;i++){
                    for(var j=0;j<ref.materials[i].length;j++){
                    var g=ref.materials[i][j];
                if(g[0]!==-1){
                    new block((i%10-k)*50+60,325+5+(floor(j)*50),materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect((i%10-k)*50+60,335+5+(floor(j)*50),30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],(i%10-k)*50+75,338+5+(floor(j)*50));
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                }
                }
        }
                if(mc&&mouseX>50&&mouseX<300&&mouseY>320&&mouseY<470&&mouseButton!==RIGHT){
                    if(ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)][0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)]=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)]=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)][0]===inventory[sel][0]&&ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)][1]<100){
                    ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)][1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<300&&mouseX>50&&mouseY>320&&mouseY<470&&mouseButton===RIGHT){
                    if(ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)][0]!==-1){
                        var d=ref.materials[floor((mouseX-50)/50)][floor((mouseY-320)/50)];
                    invColl(d);
                    }
                }
                
    }
    else if(crush){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,400,50,50);
                rect(150,400,50,50);
                rect(400,375,50,50);
                rect(400,425,50,50);
                if(ref.out[0][0]!==-1){
                    var g=ref.out[0];
                    new block(410,405+5-25,materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(410,415+5-25,30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],425,418+5-25);
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        }
                if(ref.out[1][0]!==-1){
                    
                    var g=ref.out[1];
                    new block(410,455+5-25,materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(410,465+5-25,30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],425,468+5-25);
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        
                    }
                
                stroke(0);
                
                    var g=ref.in;
                if(g[0]!==-1){
                    new block(60,405+5,materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(60,415+5,30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],75,418+5);
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        }
                    g=ref.fuel;
                if(g[0]!==-1){
                    new block(160,405+5,materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(160,415+5,30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],175,418+5);
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        }
                    g=ref.in;
        textSize(15);
        text("Fuel",175,380);
        text("Input",75,380);
        if(ref.recipe!==null){
            text("Requires: "+materials[ref.recipe.fuel].toTitleCase(),175,470);
        }
                if(mc&&mouseX>50&&mouseX<100&&mouseY>400&&mouseY<450&&mouseButton!==RIGHT){
                    if(g[0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    ref.in=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        ref.in=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(g[0]===inventory[sel][0]){
                    ref.in[1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<100&&mouseX>50&&mouseY>400&&mouseY<450&&mouseButton===RIGHT){
                    if(ref.in[0]!==-1){
                        var d=ref.in;
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>375&&mouseY<475&&ref.out[0][0]!==-1){
                    
                    if(ref.out[0][1]!==-1){
                        var d=ref.out[0];
                        var e=ref.out[1];
                        ref.fuel[1]--;
                        ref.in[1]--;
                        invColl(d);
                        invColl(e);
                    }
                    
                }
                else if(ref.recipe&&mc&&mouseX>150&&mouseX<200&&mouseY>400&&mouseY<450){
                    if(ref.fuel[0]===-1&&inventory[sel][1]>0&&inventory[sel][0]===ref.recipe.fuel){
                        if(mouseButton===LEFT){
                            ref.fuel=[inventory[sel][0],1];
                            inventory[sel][1]--;
                        }
                        else if(mouseButton!==RIGHT){
                            ref.fuel=[inventory[sel][0],inventory[sel][1]];
                            inventory[sel]=[-1,0];
                        }
                    }
                }
                ref.out=[[-1,0],[-1,0]];
                ref.recipe=null;
                for(var i=0;i<cRecipies.length;i++){
                    if(cRecipies[i].in===ref.in[0]){
                        ref.recipe=cRecipies[i];
                        if(ref.fuel[0]===cRecipies[i].fuel){
                            var h=cRecipies[i].out;
                        ref.out=[[h[0][0],h[0][1]],[h[1][0],h[1][1]]];
                        }
                    }
                }
        
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
    else if(anv){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,400,50,50);
                rect(150,400,50,50);
                rect(400,400,50,50);
                rect(250,325,50,50);
                if(ref.out[0]!==-1){
                    var g=ref.out[0];
                    image(toolGs[ts[g].type],410,410,30,30);
                
        }
                
                stroke(0);
                
                    var g=ref.tool;
                if(g[0]!==-1){
                    image(toolGs[ts[g[0]].type],60,405+5,30,30);
                    if(g[1]===0){
                        g[0]=-1;
                    }
                
                
        }
                    g=ref.sheath;
                if(g[0]!==-1){
                    image(graphics[-6],160,405+5,30,30);
                    if(g[1]===0){
                        g[0]=-1;
                    }
                }
                g=ref.hammer;
                if(g[0]!==-1){
                    image(toolGs[ts[g[0]].type],260,335,30,30);
                    if(ts[g[0]].durability<tools[ts[g[0]].type].durability){
                        fill(255);
                        rect(200+60,365,30,4);
                        fill(0,255,0);
                        rect(200+60,365,(ts[g[0]].durability/tools[ts[g[0]].type].durability)*30,4);
                    }
                    
        }
                    g=ref.tool;
                    fill(0);
        textSize(15);
        text("Sheath",175,380);
        if(ref.sheath[0]!==-1){
            text(sheaths[ref.sheath[0]].name.toTitleCase(),175,460);
        }
        text("Tool",75,380);
        text("Hammer",275,310);
                if(mc&&mouseX>50&&mouseX<100&&mouseY>400&&mouseY<450&&mouseButton!==RIGHT){
                    if(g[0]===-1&&inventory[sel][1]===-1){
                    ref.tool=[inventory[sel][0],-1];
                    inventory[sel]=[-1,0];
                    }
                }
                else if(mc&&mouseX<100&&mouseX>50&&mouseY>400&&mouseY<450&&mouseButton===RIGHT){
                    if(ref.tool[0]!==-1){
                        var d=ref.tool;
                    invColl(d);
                    ref.tool=[-1,0];
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>375&&mouseY<475&&ref.out[0]!==-1){
                    if(ref.sheath[0]!==-1){
                        ts[ref.tool[0]].sheaths.push(sheaths[ref.sheath[0]]);
                        sheaths[ref.sheath[0]].effect(ts[ref.tool[0]]);
                        ts[ref.hammer[0]].durability--;
                    }
                    ts[ref.tool[0]].durability=ts[ref.tool[0]].redurability;
                    invColl([ref.out[0],-1]);
                    ref.tool=[-1,0];
                    ref.sheath=[-1,0];
                    ref.out=[-1,0];
                    ts[ref.hammer[0]].durability--;
                    if(ts[ref.hammer[0]].broken){
                        ref.hammer=[-1,0];
                    }
                }
                else if(mc&&mouseX>150&&mouseX<200&&mouseY>400&&mouseY<450){
                    if(ref.sheath[0]===-1&&inventory[sel][1]===-2){
                        ref.sheath=[inventory[sel][0],-2];
                        inventory[sel]=[-1,0];
                    }
                    else if(ref.sheath[0]!==-1&&mouseButton===RIGHT){
                        invColl(ref.sheath);
                        ref.sheath=[-1,0];
                    }
                }
                else if(mc&&mouseX>250&&mouseX<300&&mouseY>325&&mouseY<375){
                    if(ref.hammer[0]===-1&&inventory[sel][1]===-1&&ts[inventory[sel][0]].mines===-1){
                        ref.hammer=[inventory[sel][0],-1];
                        inventory[sel]=[-1,0];
                    }
                    else if(ref.hammer[0]!==-1&&mouseButton===RIGHT){
                        invColl(ref.hammer);
                        ref.hammer=[-1,0];
                    }
                }
                ref.out=[-1,0];
                if(ref.tool[0]!==-1&&ref.hammer[0]!==-1){
                    ref.out=[ref.tool[0],-1];
                }
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
    else if(found){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,320,150,150);
                rect(400,400,50,50);
                if(ref.result[0]!==-1){
                    if(ref.result[1]>0){
                    new block(410,410,materials[ref.result[0]],1).draw();
                    }
                    else{
                        image(graphics[-6],410,410,30,30);
                        fill(0);
                        text(sheaths[ref.result[0]].name.toTitleCase(),425,460);
                    }
                    if(ref.result[1]>1){
                    fill(255);
                    rect(410,420,30,10);
                    fill(0);
                    textSize(12);
                    text(ref.result[1],425,423);
                    }
                }
                stroke(0);
                for(var i=0;i<2;i++){
                    line(100+i*50,320,100+i*50,470);
                    line(50,370+i*50,200,370+i*50);
                }
                for(var i=0;i<ref.tCrafting.length;i++){
                    var g=ref.tCrafting[i];
                if(g[0]!==-1){
                    new block(floor(i/3)*50+60,325+5+(floor(i%3)*50),materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(floor(i/3)*50+60,335+5+(floor(i%3)*50),30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],floor(i/3)*50+75,338+5+(floor(i%3)*50));
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                }
                
        }
                if(mc&&mouseX>50&&mouseX<200&&mouseY>320&&mouseY<470&&mouseButton!==RIGHT){
                    if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===inventory[sel][0]){
                    ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<200&&mouseX>50&&mouseY>320&&mouseY<470&&mouseButton===RIGHT){
                    if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]!==-1){
                        var d=ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)];
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>400&&mouseY<450&&ref.result[0]!==-1){
                    
                    if(ref.result[1]!==-1){
                        var d=ref.result;
                        for(var i=0;i<ref.tCrafting.length;i++){
                        
                            ref.tCrafting[i][1]--;
                        
                    }
                        invColl(d);
                    }
                    else{
                        var d=ref.result;
                        for(var i=0;i<ref.tCrafting.length;i++){
                            ref.tCrafting[i][1]--;
                        }
                        ts.push(new tool(d[0]));
                        invColl([ts.length-1,-1]);
                        
                    
                    }
                    
                }
                var tr=[];
                for(var i=0;i<ref.tCrafting.length;i++){
                    tr[i]=ref.tCrafting[i][0];
                }
                ref.result=[-1,0];
                for(var i=0;i<sRecipies.length;i++){
                    if(ref.result[0]===-1){
                    for(var j=0;j<sRecipies[i].req.length;j++){
                        if(sRecipies[i].req[j].equals(tr)){
                            //println(tRecipies[i].ret);
                            ref.result=[sRecipies[i].ret[0],sRecipies[i].ret[1]];
                            
                            
                        }
                    }
                    }
                }
        
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
    else if(brew){
       //{
        fill(212, 212, 212);
        rect(50,50,500,500);
        noFill();
        stroke(0);
        rect(50,50,500,250);
        for(var i=0;i<9;i++){
            line(100+i*50,50,100+i*50,300);
        }
        for(var i=0;i<4;i++){
            line(50,100+i*50,550,100+i*50);
        }
        var k=0;
        for(var i=0;i<inventory.length;i++){
            if(inventory[i][1]===0){
                inventory[i]=[-1,0];
            }
            if(i%10===0){
                k=0;
            }
            
            if(sel===i){
                stroke(0);
                noFill();
                rect((i%10-k)*50+57,52+5+(floor((i-k)/10)*50),35,35);
            }
            if(inventory[i][0]!==-1){
                if(inventory[i][1]>0){
            new block((i%10-k)*50+60,55+5+(floor(i/10)*50),materials[inventory[i][0]],1).draw();
            if(inventory[i][1]>1){
            fill(255);
            rect((i%10-k)*50+60,65+5+(floor(i/10)*50),30,10);
            fill(0);
            textSize(12);
            text(inventory[i][1],(i%10-k)*50+75,68+5+(floor(i/10)*50));
            }
                }
            else if(inventory[i][1]===-1){
                image(toolGs[ts[inventory[i][0]].type],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
                if(ts[inventory[i][0]].durability<tools[ts[inventory[i][0]].type].durability){
                        fill(255);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),30,4);
                        fill(0,255,0);
                        rect((i%10-k)*50+60,80+5+(floor(i/10)*50),(ts[inventory[i][0]].durability/tools[ts[inventory[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(inventory[i][1]+2)*2],(i%10-k)*50+60,55+5+(floor(i/10)*50),30,30);
            }
            }
        }
        noFill();
        stroke(0);
        for(var i=0;i<toolbar.length;i++){
            noFill();
            stroke(0);
            rect(50+i*50,500,50,50);
            if(toolbar[i][0]!==-1){
                if(toolbar[i][1]>0){
            new block((i)*50+60,510,materials[toolbar[i][0]],1).draw();
            if(toolbar[i][1]>1){
            fill(255);
            rect((i)*50+60,520,30,10);
            fill(0);
            textSize(12);
            text(toolbar[i][1],(i)*50+75,68+5+450);
            
            }
                }
            else if(toolbar[i][1]===-1){
                image(toolGs[ts[toolbar[i][0]].type],i*50+60,505+5,30,30);
                if(ts[toolbar[i][0]].durability<tools[ts[toolbar[i][0]].type].durability){
                        fill(255);
                        rect(i*50+60,537,30,4);
                        fill(0,255,0);
                        rect(i*50+60,537,(ts[toolbar[i][0]].durability/tools[ts[toolbar[i][0]].type].durability)*30,4);
                    }
            }
            else{
                image(graphics[-6+(toolbar[i][1]+2)*2],i*50+60,505+5,30,30);
            }
            }
        }
        if(mouseX>50&&mouseX<550&&mouseY>500&&mouseY<550){
            var n=floor((mouseX)/50)-1;
            if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===-1){
                toolbar[n]=[inventory[sel][0],inventory[sel][1]];
                inventory[sel]=[-1,0];
            }
            else if(mc&&mouseButton===LEFT&&inventory[sel][0]!==-1&&toolbar[n][0]===inventory[sel][0]&&inventory[sel][1]>0){
                var g=constrain(100-toolbar[n][1],0,inventory[sel][1]);
                toolbar[n][1]+=g;
                inventory[sel][1]-=g;
            }
            else if(mc&&mouseButton===RIGHT){
                invColl(toolbar[n]);
                toolbar[n]=[-1,0];
            }
        }
        fill(0);
            textSize(15);
            textAlign(RIGHT,CENTER);
            if(inventory[sel][0]!==-1){
                if(inventory[sel][1]>0){
            text(materials[inventory[sel][0]].toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-1){
                    text(ts[inventory[sel][0]].name.toTitleCase(),540,320);
                    var h="";
                    for(var i=0;i<ts[inventory[sel][0]].sheaths.length;i++){
                        h+=ts[inventory[sel][0]].sheaths[i].name.toTitleCase()+"\n";
                    }
                    textAlign(RIGHT,TOP);
                    textSize(12);
                    fill(89, 0, 255);
                    text(h,540,320);
                }
                else if(inventory[sel][1]===-2){
                    text("Sheath:\n"+sheaths[inventory[sel][0]].name.toTitleCase(),540,320);
                }
                else if(inventory[sel][1]===-3){
                    text("Potion of "+potions[inventory[sel][0]].name.toTitleCase(),540,320);
                }
            }
            textAlign(CENTER,CENTER);
            if(mc&&mouseX>50&&mouseX<550&&mouseY>50&&mouseY<300){
                sel=floor((mouseX-50)/50)+floor((mouseY-50)/50)*10;
            }
            //}
            

                noFill();
                stroke(0);
                rect(50,320,150,150);
                rect(250,320,50,50);
                rect(400,400,50,50);
                if(ref.result[0]!==-1){
                    if(ref.result[1]>0){
                    new block(410,410,materials[ref.result[0]],1).draw();
                    }
                    else{
                        image(graphics[-8],410,410,30,30);
                        fill(0);
                        text(potions[ref.result[0]].name.toTitleCase(),425,460);
                    }
                    if(ref.result[1]>1){
                    fill(255);
                    rect(410,420,30,10);
                    fill(0);
                    textSize(12);
                    text(ref.result[1],425,423);
                    }
                }
                if(ref.water>0){
                    if(ref.water>0){
                    new block(260,330,materials[78],1).draw();
                    }
                    
                    if(ref.water>1){
                    fill(255);
                    rect(260,340,30,10);
                    fill(0);
                    textSize(12);
                    text(ref.water,275,343);
                    }
                }
                stroke(0);
                for(var i=0;i<2;i++){
                    line(100+i*50,320,100+i*50,470);
                    line(50,370+i*50,200,370+i*50);
                }
                for(var i=0;i<ref.tCrafting.length;i++){
                    var g=ref.tCrafting[i];
                if(g[0]!==-1){
                    new block(floor(i/3)*50+60,325+5+(floor(i%3)*50),materials[g[0]],1).draw();
                    if(g[1]>1){
                    fill(255);
                    rect(floor(i/3)*50+60,335+5+(floor(i%3)*50),30,10);
                    fill(0);
                    textSize(12);
                    text(g[1],floor(i/3)*50+75,338+5+(floor(i%3)*50));
                    }
                    if(g[1]===0){
                        g[0]=-1;
                    }
                }
                
        }
                if(mc&&mouseX>50&&mouseX<200&&mouseY>320&&mouseY<470&&mouseButton!==RIGHT){
                    if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===-1&&inventory[sel][1]>0){
                    if(mouseButton===LEFT){
                    ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=[inventory[sel][0],1];
                    inventory[sel][1]--;
                    }
                    else{
                        ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)]=inventory[sel];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]===inventory[sel][0]){
                    ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][1]++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<200&&mouseX>50&&mouseY>320&&mouseY<470&&mouseButton===RIGHT){
                    if(ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)][0]!==-1){
                        var d=ref.tCrafting[floor((mouseX-50)/50)*3+floor((mouseY-320)/50)];
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>250&&mouseX<300&&mouseY>320&&mouseY<370&&mouseButton!==RIGHT&&inventory[sel][0]===78){
                    if(ref.water===0){
                    if(mouseButton===LEFT){
                    ref.water++;
                    inventory[sel][1]--;
                    }
                    else{
                        ref.water=inventory[sel][1];
                    inventory[sel]=[-1,0];
                    }
                    }
                    else if(ref.water<100){
                    ref.water++;
                    inventory[sel][1]--;
                    }
                }
                else if(mc&&mouseX<300&&mouseX>250&&mouseY>320&&mouseY<370&&mouseButton===RIGHT){
                    if(ref.water>0){
                        var d=[78,ref.water];
                        ref.water=0;
                    invColl(d);
                    }
                }
                else if(mc&&mouseX>400&&mouseX<450&&mouseY>400&&mouseY<450&&ref.result[0]!==-1&&ref.water>0){
                    
                    if(ref.result[1]!==-1){
                        var d=ref.result;
                        for(var i=0;i<ref.tCrafting.length;i++){
                        
                            ref.tCrafting[i][1]--;
                        
                    }
                    ref.water--;
                        invColl(d);
                    }
                    
                    
                }
                var tr=[];
                for(var i=0;i<ref.tCrafting.length;i++){
                    tr[i]=ref.tCrafting[i][0];
                }
                ref.result=[-1,0];
                for(var i=0;i<pRecipies.length;i++){
                    if(ref.result[0]===-1){
                    for(var j=0;j<pRecipies[i].req.length;j++){
                        if(pRecipies[i].req[j].equals(tr)){
                            //println(tRecipies[i].ret);
                            ref.result=[pRecipies[i].ret[0],pRecipies[i].ret[1]];
                            
                            
                        }
                    }
                    }
                }
        
        stroke(0);
        strokeWeight(20);
                strokeCap(SQUARE);
                line(225,425,325,425);
                line(300,400,330,431);
                line(300,450,330,419);
                strokeWeight(1);
    }
}
var clearTime=0;
draw= function() {
    try{
        if(save_load===0){
          switch(scene){
               case "game":
                    game();
                    break;
               case "load":
                    load();
                    break;
          }
	
        }
        else{
            switch(save_load){
                case 10:{
                    var $inv="[";
           for(var i=0;i<inventory.length;i++){
               $inv+="["+inventory[i][0]+","+inventory[i][1]+"],";
           }
           		localStorage.setItem("inv_Save",$inv+"]");
                }
                break;
                case 9:{

                    var $tlb="[";
                    for(var i=0;i<toolbar.length;i++){
               $tlb+="["+toolbar[i][0]+","+toolbar[i][1]+"],";
           }
                    localStorage.setItem("tlb_Save",$tlb+"]");
                }
                break;
                case 8:{
                    var $ts="[";
           for(var i=0;i<ts.length;i++){
               $ts+="{";
               for(var j in ts[i]){
                   if(j==="constructor"||j==="__id"){
                       continue;
                   }
                   if(j==="name"){
                       $ts+=j+":"+ts[i][j]+",";
                   }
                   else if(j==="sheaths"){
                       $ts+=j+":[";
                       for(var k=0;k<ts[i][j].length;k++){
                           $ts+=sNames.indexOf(ts[i][j][k].name)+",";
                           
                       }
                       $ts+="],";
                   }
			else if(j==="durability"){
                       $ts+=j+":"+ts[i][j];
                   }
                   else{
                   $ts+=j+":"+ts[i][j]+",";
                   }
               }
               $ts+="},";
           }
		localStorage.setItem("ts_Save",$ts+"]");
           	localStorage.setItem("xy_Save","["+player.x+","+player.y+","+player.rey+","+player.rex+"]");
                }
                break;
                case 7:{
                    var $w="[";
           for(var i=0;i<world.length;i++){
               $w+="[";
               for(var j=0;j<world[i].length;j++){
                   if(world[i][j]===null){
                       $w+="-1,";
                   }
                   else{
                       if(world[i][j].type==="chest"||world[i][j].type==="sea chest"||world[i][j].type==="stone chest"){
                           $w+="["+materials.indexOf(world[i][j].type)+",[";
                           for(var k=0;k<world[i][j].ref.materials.length;k++){
                               $w+="[";
                               var m=world[i][j].ref.materials[k];
                               for(var l=0;l<m.length;l++){
                               $w+="["+m[l][0]+","+m[l][1]+"],";
                               }
                               $w+="],";
                           }
                           $w+="]],";
                       }
                       else{
                   $w+=materials.indexOf(world[i][j].type)+",";
                       }
                   }
               }
               $w+="],";
           }
           	localStorage.setItem("world_Save",$w+"]");
                }
                break;
                case 6:{
                
		}    
                break;
                case 5:{
                
		}    
                break;
                case 4:{
                
		}    
                break;
                case 3:{
                
		}    
                break;
                case 2:{
                
		}    
                break;
                case 1:{
                    println("Saved!");
                }
                break;
            }
            save_load--;
        }
    mouseIsClicked=false;
    keyIsPressed=false;
	if(clearTime>0){
	fill(255,0,0);
		arc(300,300,100,100,0,(clearTime/200)*PI*2);
	}
    }
    catch(e){
        println(e);
    }
};
mouseReleased=function(){
    mouseIsClicked=true;
}
keyPressed=function(){
    // println(keyCode);
    keys[keyCode]=true;
       if(keyCode===69&&!chst&&!fnc&&!crush&&!anv&&!found&&!brew){
           inv=!inv;
       }
       else if(keyCode===69&&chst){
           chst=false;
       }
       else if(keyCode===69&&fnc){
           fnc=false;
       }
       else if(keyCode===69&&crush){
           crush=false;
       }
       else if(keyCode===69&&anv){
           anv=false;
       }
       else if(keyCode===69&&found){
          found=false;
       }
       else if(keyCode===69&&brew){
          brew=false;
       }
       else if(keyCode===ENTER&&save_load===0){
           save_load=10;
           
       }
	else if(keyCode===220){
		
		clearTime++;
		if(clearTime>=200){
		localStorage.clear();
		window.location.reload();
	}
	}
       keyIsPressed=true;
}
keyReleased=function(){
	if(keyCode===220){
		clearTime=0;
	}
    keys[keyCode]=false;
}
//}

     }
}
